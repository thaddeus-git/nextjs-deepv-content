{
  "metadata": {
    "title": "Fixing 'Conversion failed' for uniqueidentifier in SQL Server",
    "slug": "sql-server-uniqueidentifier-conversion-failed",
    "uniqueId": "cd06097d",
    "category": "databases",
    "subcategory": "sql",
    "description": "Learn to resolve 'Conversion failed when converting from a character string to uniqueidentifier' errors in SQL Server, often caused by missing default values, invalid GUID formats, or EF Core string interpolation issues.",
    "tags": [
      "sql-server",
      "uniqueidentifier",
      "guid",
      "conversion",
      "troubleshooting",
      "ef-core",
      "sql"
    ],
    "difficulty": "intermediate",
    "readTime": 8,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20940350",
    "votes": 80
  },
  "content": "# Fixing 'Conversion failed' for uniqueidentifier in SQL Server\n\nWhen working with `uniqueidentifier` data types in SQL Server, you might encounter the error \"Conversion failed when converting from a character string to uniqueidentifier.\" This error typically arises when SQL Server attempts to convert a string into a GUID but fails due to various reasons, such as an invalid GUID format, missing default values for `uniqueidentifier` columns, or incorrect handling in ORMs like EF Core.\n\n## Quick Answer\n\nThe most common cause for this error when inserting into a table with a `uniqueidentifier` primary key is that the `ID` column is not explicitly provided a value and also lacks a `DEFAULT NEWID()` constraint. Ensure all `uniqueidentifier` columns either receive a valid GUID or have a default value defined.\n\n```sql\n-- Example of adding a default value to an ID column\nALTER TABLE [db].[dbo].[table]\nADD CONSTRAINT DF_table_ID DEFAULT NEWID() FOR ID;\n\n-- Or, ensure you provide a valid GUID for every uniqueidentifier column\nINSERT INTO [db].[dbo].[table] (ID, myid, friendid, time1, time2)\nVALUES (NEWID(), CONVERT(uniqueidentifier, '0C6A36BA-10E4-438F-BA86-0D5B68A2BB15'),\n        CONVERT(uniqueidentifier, 'DF215E10-8BD4-4401-B2DC-99BB03135F2E'),\n        '2014-01-05 02:04:41.953', '2014-01-05 12:04:41.953');\n```\n\n## Common Issues & Solutions\n\nThe \"Conversion failed\" error for `uniqueidentifier` can stem from several sources. Understanding these common scenarios will help you diagnose and resolve the problem efficiently.\n\n### 1. Missing Default Value for `uniqueidentifier` Primary Key\n\n**Problem:** You're inserting data into a table, but you're not explicitly providing a value for a `uniqueidentifier` primary key column (often named `ID`), and that column doesn't have a `DEFAULT NEWID()` constraint. SQL Server then tries to implicitly convert an empty string or `NULL` (if not nullable) into a `uniqueidentifier`, which fails.\n\n**Example Scenario:**\nConsider a table definition like this:\n```sql\nCREATE TABLE MyTable (\n    ID UNIQUEIDENTIFIER PRIMARY KEY,\n    myid UNIQUEIDENTIFIER,\n    friendid UNIQUEIDENTIFIER\n);\n```\nAnd an `INSERT` statement that omits the `ID` column:\n```sql\nINSERT INTO MyTable (myid, friendid)\nVALUES (CONVERT(uniqueidentifier, '0C6A36BA-10E4-438F-BA86-0D5B68A2BB15'),\n        CONVERT(uniqueidentifier, 'DF215E10-8BD4-4401-B2DC-99BB03135F2E'));\n```\nThis will cause the conversion error because `ID` is a `uniqueidentifier` and `PRIMARY KEY`, requiring a value, but no default is provided.\n\n**Solution:**\nAdd a `DEFAULT NEWID()` constraint to the `ID` column. This automatically generates a new GUID for each new row if no value is explicitly provided.\n\n```sql\nALTER TABLE MyTable\nADD CONSTRAINT DF_MyTable_ID DEFAULT NEWID() FOR ID;\n\n-- Now the original insert will work:\nINSERT INTO MyTable (myid, friendid)\nVALUES (CONVERT(uniqueidentifier, '0C6A36BA-10E4-438F-BA86-0D5B68A2BB15'),\n        CONVERT(uniqueidentifier, 'DF215E10-8BD4-4401-B2DC-99BB03135F2E'));\n```\nAlternatively, explicitly provide a `NEWID()` or a valid GUID for the `ID` column in your `INSERT` statement:\n\n```sql\nINSERT INTO MyTable (ID, myid, friendid)\nVALUES (NEWID(),\n        CONVERT(uniqueidentifier, '0C6A36BA-10E4-438F-BA86-0D5B68A2BB15'),\n        CONVERT(uniqueidentifier, 'DF215E10-8BD4-4401-B2DC-99BB03135F2E'));\n```\n\n### 2. Invalid GUID String Format\n\n**Problem:** The string you are trying to convert to a `uniqueidentifier` does not conform to the standard GUID format. SQL Server expects a specific 32-hexadecimal-digit string, typically represented in 5 groups separated by hyphens: `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`.\n\n**Example of Invalid Format:**\n```sql\nSELECT CONVERT(uniqueidentifier, '0C6A36BA10E4438FBA860D5B68A2BB15'); -- Missing hyphens\nSELECT CONVERT(uniqueidentifier, '0C6A36BA-10E4-438F-BA86-0D5B68A2BB1'); -- Incorrect length\nSELECT CONVERT(uniqueidentifier, '0C6A36BA-10E4-438F-BA86-0D5B68A2BB1G'); -- Invalid character 'G'\n```\n\n**Solution:**\nEnsure your GUID strings are in the correct format. You can validate GUIDs using online tools or by checking their structure programmatically before attempting conversion.\n\n```sql\n-- This will work:\nSELECT CONVERT(uniqueidentifier, 'DF215E10-8BD4-4401-B2DC-99BB03135F2E');\n```\n![Valid GUID Format](/images/cd06097d-1.webp)\n\n### 3. Incorrect String Interpolation in ORMs (e.g., EF Core)\n\n**Problem:** When using ORMs like Entity Framework Core with interpolated SQL strings, you might accidentally wrap a `uniqueidentifier` parameter in single quotes, causing SQL Server to treat it as a literal string instead of a parameter that should be converted.\n\n**Example (Bad Code in C# with EF Core):**\n```csharp\n// Bad code: contactId is placed inside single quotes\nawait _dbContext.Database.ExecuteSqlInterpolatedAsync($\"UPDATE Contact SET Status = {(int)Status} WHERE Id = '{contactId}'\");\n```\nIn this case, if `contactId` is a `Guid` object, EF Core will convert it to a string representation (e.g., `'DF215E10-8BD4-4401-B2DC-99BB03135F2E'`) and then wrap that string in *another* set of single quotes, resulting in `'''DF215E10-8BD4-4401-B2DC-99BB03135F2E'''`. SQL Server then tries to convert this triple-quoted string to a `uniqueidentifier`, which fails.\n\n**Solution:**\nRemove the explicit single quotes around the `uniqueidentifier` parameter in interpolated strings. EF Core's `ExecuteSqlInterpolatedAsync` is designed to handle parameterization correctly.\n\n```csharp\n// Good code: remove the single quotes from contactId\nawait _dbContext.Database.ExecuteSqlInterpolatedAsync($\"UPDATE Contact SET Status = {(int)Status} WHERE Id = {contactId}\");\n```\nThis allows EF Core to correctly parameterize the `contactId` as a `uniqueidentifier` type, preventing the conversion error.\n\n### 4. Implicit Conversion Issues with `VARCHAR` or `NVARCHAR`\n\n**Problem:** Sometimes, the error can occur if you're trying to assign a `uniqueidentifier` value to a `VARCHAR` or `NVARCHAR` column that is too short, or if SQL Server attempts an implicit conversion in a complex query where a string literal that *looks* like a GUID is involved in a comparison or assignment with a `uniqueidentifier` column, but the context leads to an invalid conversion.\n\n**Solution:**\nAlways be explicit with `CONVERT` or `CAST` when dealing with `uniqueidentifier` and string types. Ensure string columns intended to hold GUIDs are large enough (e.g., `CHAR(36)` or `VARCHAR(36)`).\n\n```sql\n-- Explicitly convert to uniqueidentifier\nDECLARE @guidString VARCHAR(36) = '0C6A36BA-10E4-438F-BA86-0D5B68A2BB15';\nDECLARE @guid UNIQUEIDENTIFIER = CONVERT(uniqueidentifier, @guidString);\nSELECT @guid;\n```\n\n## Step-by-Step Diagnosis\n\nWhen facing this error, follow these steps to pinpoint the exact cause:\n\n1.  **Check the `uniqueidentifier` column definitions:**\n    *   Does the column in question (e.g., `ID`) have a `DEFAULT NEWID()` constraint? If not, and you're not explicitly providing a value, this is likely the issue.\n    *   Is the column nullable? If it's `NOT NULL` and you're not providing a value or default, it will fail.\n\n2.  **Inspect the `INSERT` or `UPDATE` statement:**\n    *   Are you providing a value for *every* `uniqueidentifier` column that is `NOT NULL` and doesn't have a default?\n    *   For each value being inserted into a `uniqueidentifier` column, is it a valid GUID string?\n        *   It must be 32 hexadecimal digits.\n        *   It must be formatted as `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`.\n        *   It must not contain any non-hexadecimal characters (A-F, a-f, 0-9) other than hyphens.\n    *   Are you using `CONVERT(uniqueidentifier, 'your-guid-string')` for string literals?\n\n3.  **If using an ORM (like EF Core):**\n    *   Review the generated SQL (if possible) or the C# code for `ExecuteSqlInterpolatedAsync` or similar methods.\n    *   Ensure that `uniqueidentifier` parameters are *not* wrapped in single quotes within the interpolated string. The ORM should handle the parameterization correctly.\n\n4.  **Isolate the problematic conversion:**\n    *   Try to `SELECT CONVERT(uniqueidentifier, 'your-problematic-string')` for each GUID string you are trying to insert. This will quickly tell you which specific string is causing the conversion failure.\n\n    ```sql\n    -- Test each GUID string individually\n    SELECT CONVERT(uniqueidentifier, '0C6A36BA-10E4-438F-BA86-0D5B68A2BB15'); -- Should work\n    SELECT CONVERT(uniqueidentifier, 'DF215E10-8BD4-4401-B2DC-99BB03135F2E'); -- Should work\n    SELECT CONVERT(uniqueidentifier, 'INVALID-GUID-STRING'); -- Will fail and show the error\n    ```\n    ![Diagnosis Flowchart](/images/cd06097d-2.webp)\n\n## Working Examples\n\nHere are working examples demonstrating the correct ways to handle `uniqueidentifier` insertions.\n\n### Example 1: Inserting with `DEFAULT NEWID()`\n\nFirst, create a table with a `uniqueidentifier` primary key that automatically generates GUIDs.\n\n```sql\nCREATE TABLE Products (\n    ProductID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),\n    ProductName NVARCHAR(100) NOT NULL,\n    ProductCode UNIQUEIDENTIFIER\n);\n```\n\nNow, insert data without explicitly providing a `ProductID`. SQL Server will generate one.\n\n```sql\nINSERT INTO Products (ProductName, ProductCode)\nVALUES ('Laptop', CONVERT(uniqueidentifier, 'A1B2C3D4-E5F6-7890-1234-567890ABCDEF'));\n\nINSERT INTO Products (ProductName, ProductCode)\nVALUES ('Mouse', NEWID()); -- You can also explicitly use NEWID() for other GUID columns\n\nSELECT * FROM Products;\n```\n\n```output\nProductID                            ProductName ProductCode\n------------------------------------ ----------- ------------------------------------\n[Generated GUID 1]                   Laptop      A1B2C3D4-E5F6-7890-1234-567890ABCDEF\n[Generated GUID 2]                   Mouse       [Generated GUID 3]\n```\n\n### Example 2: Inserting with Explicit GUIDs\n\nIf you need to provide specific GUIDs, ensure they are correctly formatted.\n\n```sql\n-- Assuming the Products table from Example 1, but without DEFAULT NEWID()\n-- Or, if you want to override the default\nINSERT INTO Products (ProductID, ProductName, ProductCode)\nVALUES (CONVERT(uniqueidentifier, '11111111-2222-3333-4444-555555555555'),\n        'Keyboard',\n        CONVERT(uniqueidentifier, '66666666-7777-8888-9999-AAAAAAAAAAAA'));\n\nSELECT * FROM Products;\n```\n\n```output\nProductID                            ProductName ProductCode\n------------------------------------ ----------- ------------------------------------\n11111111-2222-3333-4444-555555555555 Keyboard    66666666-7777-8888-9999-AAAAAAAAAAAA\n```\n\n### Example 3: Correcting EF Core Interpolated SQL\n\nConsider a C# method using EF Core:\n\n```csharp\npublic async Task UpdateContactStatus(Guid contactId, int status)\n{\n    // INCORRECT: Will cause \"Conversion failed\" if contactId is a Guid\n    // await _dbContext.Database.ExecuteSqlInterpolatedAsync($\"UPDATE Contact SET Status = {status} WHERE Id = '{contactId}'\");\n\n    // CORRECT: Let EF Core handle parameterization\n    await _dbContext.Database.ExecuteSqlInterpolatedAsync($\"UPDATE Contact SET Status = {status} WHERE Id = {contactId}\");\n}\n```\n\n## Summary\n\nThe \"Conversion failed when converting from a character string to uniqueidentifier\" error in SQL Server is typically a straightforward issue to resolve once you identify the root cause. The most frequent culprits are:\n\n1.  **Missing `DEFAULT NEWID()` constraint** on a `uniqueidentifier` column that is not explicitly provided a value during insertion.\n2.  **Invalid GUID string format**, where the string does not match the `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` pattern.\n3.  **Incorrect parameter handling in ORMs** (like EF Core), where `uniqueidentifier` parameters are mistakenly wrapped in single quotes in interpolated SQL.\n\nBy systematically checking your table definitions, `INSERT`/`UPDATE` statements, and ORM usage, you can quickly diagnose and fix this common SQL Server error.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A clear, simple diagram illustrating the correct format of a SQL Server `uniqueidentifier` (GUID). Show a string like \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" with \"x\" representing a hexadecimal digit. Below it, show an example: \"6F9619FF-8B86-D011-B42D-00C04FC964FF\". Use a clean, modern design with a green checkmark next to the correct format and a red X next to an example of an incorrect format (e.g., \"ABC-123-DEF\").\n\n**PLACEHOLDER-2:** A flowchart titled \"Diagnosing uniqueidentifier Conversion Failure\".\nStart Node: \"Conversion Failed Error\"\nDecision 1: \"Is the uniqueidentifier column explicitly provided a value?\" (Yes/No)\n    If No:\n        Decision 2: \"Does the column have `DEFAULT NEWID()`?\" (Yes/No)\n            If No: \"Add `DEFAULT NEWID()` or provide value\" (End Node)\n            If Yes: \"Proceed to next check\" (Connects to Decision 3)\n    If Yes: \"Proceed to next check\" (Connects to Decision 3)\nDecision 3: \"Is the GUID string in correct format (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)?\" (Yes/No)\n    If No: \"Correct GUID string format\" (End Node)\n    If Yes:\n        Decision 4: \"Using ORM (e.g., EF Core)?\" (Yes/No)\n            If Yes:\n                Decision 5: \"Is GUID parameter wrapped in single quotes in interpolated string?\" (Yes/No)\n                    If Yes: \"Remove single quotes around parameter\" (End Node)\n                    If No: \"Investigate other implicit conversion/trigger issues\" (End Node)\n            If No: \"Investigate other implicit conversion/trigger issues\" (End Node)\nUse distinct shapes for start/end, decisions, and processes. Use arrows for flow.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A clear, simple diagram illustrating the correct format of a SQL Server `uniqueidentifier` (GUID). Show a string like \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" with \"x\" representing a hexadecimal digit. Below it, show an example: \"6F9619FF-8B86-D011-B42D-00C04FC964FF\". Use a clean, modern design with a green checkmark next to the correct format and a red X next to an example of an incorrect format (e.g., \"ABC-123-DEF\").",
        "PLACEHOLDER-2": "A flowchart titled \"Diagnosing uniqueidentifier Conversion Failure\".\nStart Node: \"Conversion Failed Error\"\nDecision 1: \"Is the uniqueidentifier column explicitly provided a value?\" (Yes/No)\n    If No:\n        Decision 2: \"Does the column have `DEFAULT NEWID()`?\" (Yes/No)\n            If No: \"Add `DEFAULT NEWID()` or provide value\" (End Node)\n            If Yes: \"Proceed to next check\" (Connects to Decision 3)\n    If Yes: \"Proceed to next check\" (Connects to Decision 3)\nDecision 3: \"Is the GUID string in correct format (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)?\" (Yes/No)\n    If No: \"Correct GUID string format\" (End Node)\n    If Yes:\n        Decision 4: \"Using ORM (e.g., EF Core)?\" (Yes/No)\n            If Yes:\n                Decision 5: \"Is GUID parameter wrapped in single quotes in interpolated string?\" (Yes/No)\n                    If Yes: \"Remove single quotes around parameter\" (End Node)\n                    If No: \"Investigate other implicit conversion/trigger issues\" (End Node)\n            If No: \"Investigate other implicit conversion/trigger issues\" (End Node)\nUse distinct shapes for start/end, decisions, and processes. Use arrows for flow."
      },
      "titles": {
        "PLACEHOLDER-1": "Valid GUID Format",
        "PLACEHOLDER-2": "Diagnosis Flowchart"
      },
      "count": 2,
      "placeholder_list": [
        [
          "Valid GUID Format",
          "1"
        ],
        [
          "Diagnosis Flowchart",
          "2"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "cd06097d-1.webp",
        "title": "Valid GUID Format",
        "path": "staging/images/cd06097d-1.png"
      },
      {
        "placeholder": "PLACEHOLDER-2",
        "filename": "cd06097d-2.webp",
        "title": "Diagnosis Flowchart",
        "path": "staging/images/cd06097d-2.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20940350.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T23:07:07.575202",
    "word_count": 1675,
    "code_blocks": 34
  }
}