{
  "metadata": {
    "title": "Understanding CSS Selector: a[href*=#]:not([href=#])",
    "slug": "understanding-css-selector-a-href-not-href",
    "uniqueId": "be4e7844",
    "category": "web-frontend",
    "subcategory": "css",
    "description": "Demystify the CSS selector a[href*=#]:not([href=#]) to target anchor links that point to specific page sections, excluding generic '#' links.",
    "tags": [
      "css",
      "css-selectors",
      "html",
      "attribute-selectors",
      "web-development"
    ],
    "difficulty": "beginner",
    "readTime": 5,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20947529",
    "votes": 28
  },
  "content": "# Understanding CSS Selector: `a[href*=#]:not([href=#])`\n\n## Quick Answer\n\nThe CSS selector `a[href*=#]:not([href=#])` targets all `<a>` (anchor) elements whose `href` attribute contains the `#` character, but specifically excludes those where the `href` attribute is *exactly* `#`. This is commonly used to select internal page links (like `#section1` or `page.html#section2`) while ignoring generic \"scroll to top\" or placeholder links (`href=\"#\"`).\n\n## Concept Explanation\n\nThis selector combines two powerful CSS attribute selectors and a pseudo-class:\n\n1.  **`a`**: This is the basic type selector, targeting all `<a>` elements.\n2.  **`[href*=#]`**: This is an attribute selector.\n    *   `href` specifies the attribute to check.\n    *   `*=` is the \"contains\" operator. It means \"the attribute value contains this substring.\"\n    *   `#` is the substring being looked for.\n    *   So, `a[href*=#]` selects all `<a>` elements where the `href` attribute's value contains `#` anywhere within it.\n3.  **`:not([href=#])`**: This is a negation pseudo-class combined with another attribute selector.\n    *   `:not()` excludes elements that match the selector inside its parentheses.\n    *   `[href=#]` is an attribute selector that means \"the `href` attribute's value is *exactly* `#`.\"\n    *   Therefore, `:not([href=#])` excludes any `<a>` element whose `href` attribute is precisely `#`.\n\nWhen combined, the selector `a[href*=#]:not([href=#])` effectively targets links that point to a specific fragment identifier (a section on the page) but are not just a generic, non-functional hash link.\n\n![CSS Selector Breakdown](/images/be4e7844-1.webp)\n\n## Real-World Examples\n\nThis selector is particularly useful for styling or applying JavaScript behavior to \"jump links\" or \"smooth scroll\" links, without affecting placeholder links that might be used for other purposes (e.g., in navigation menus where a parent item might have `href=\"#\"` to prevent navigation).\n\n### Example 1: Styling Internal Page Links\n\nYou might want to give a distinct style to links that navigate within the current page.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Selector Example</title>\n    <style>\n        body { font-family: sans-serif; }\n        .container { margin: 20px; }\n        section {\n            height: 300px;\n            border: 1px solid #ccc;\n            margin-bottom: 10px;\n            padding: 20px;\n            background-color: #f9f9f9;\n        }\n        /* The selector in action */\n        a[href*=\"#\"]:not([href=\"#\"]) {\n            color: #007bff; /* Blue color */\n            font-weight: bold;\n            text-decoration: underline wavy;\n        }\n        /* Generic links */\n        a {\n            color: #333;\n            text-decoration: none;\n            margin-right: 15px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Understanding `a[href*=#]:not([href=#])`</h1>\n        <nav>\n            <p>Navigation:</p>\n            <a href=\"#section1\">Go to Section 1</a>\n            <a href=\"#section2\">Go to Section 2</a>\n            <a href=\"#section3\">Go to Section 3</a>\n            <a href=\"#\">Generic Placeholder Link</a>\n            <a href=\"https://example.com\">External Link</a>\n            <a href=\"another-page.html#top\">Link to another page section</a>\n        </nav>\n\n        <section id=\"section1\">\n            <h2>Section 1</h2>\n            <p>Content for section 1.</p>\n        </section>\n        <section id=\"section2\">\n            <h2>Section 2</h2>\n            <p>Content for section 2.</p>\n        </section>\n        <section id=\"section3\">\n            <h2>Section 3</h2>\n            <p>Content for section 3.</p>\n        </section>\n    </div>\n</body>\n</html>\n```\n\nIn this example, \"Go to Section 1\", \"Go to Section 2\", \"Go to Section 3\", and \"Link to another page section\" will be styled with blue, bold, wavy underlined text, while \"Generic Placeholder Link\" and \"External Link\" will retain the default `<a>` styling.\n\n### Example 2: Applying Smooth Scrolling with JavaScript\n\nThis selector is frequently used in JavaScript to target specific links for smooth scrolling behavior.\n\n```javascript\ndocument.querySelectorAll('a[href*=\"#\"]:not([href=\"#\"])').forEach(anchor => {\n    anchor.addEventListener('click', function (e) {\n        e.preventDefault(); // Prevent default jump behavior\n\n        const targetId = this.getAttribute('href').substring(1);\n        const targetElement = document.getElementById(targetId);\n\n        if (targetElement) {\n            targetElement.scrollIntoView({\n                behavior: 'smooth'\n            });\n        }\n    });\n});\n```\n\nThis JavaScript snippet would apply smooth scrolling to all the internal page links, but would ignore any `href=\"#\"` links, preventing unintended behavior.\n\n## Common Problems & Solutions\n\n### Issue 1: jQuery Compatibility (Older Versions)\n\nIn older versions of jQuery (specifically 2.2.4 onwards), the unquoted `#` in attribute selectors could cause issues.\n\n**Problematic Selector (Older jQuery):**\n`a[href*=#]:not([href=#])`\n\n**Solution:**\nAlways quote the hash character within attribute selectors, especially when using jQuery. This is also good practice for standard CSS.\n\n```css\na[href*=\"#\"]:not([href=\"#\"])\n```\n\nOr, if escaping for specific contexts (less common in modern CSS/JS):\n\n```css\na[href*=\\\\#]:not([href=\\\\#])\n```\n\n### Issue 2: Excluding More Specific Hashes\n\nSometimes you might have a specific `href=\"#\"` link that you *do* want to target, or other hash links you want to exclude (e.g., for a carousel).\n\n**Solution:**\nExtend the `:not()` pseudo-class or use more specific selectors.\n\nTo exclude `href=\"#myCarousel\"` in addition to `href=\"#\"`:\n\n```css\na[href*=\"#\"]:not([href=\"#\"]):not([href=\"#myCarousel\"])\n```\n\nOr, for jQuery:\n\n```javascript\n$('a[href*=\"#\"]:not([href=\"#\"],[href=\"#myCarousel\"])').click(...)\n```\n\n### Issue 3: Misunderstanding `*=` vs `=`\n\nIt's crucial to understand the difference between `*=` (contains) and `=` (exactly equals).\n\n*   `[href*=\"#\"]`: Matches `href=\"#section\"`, `href=\"page.html#section\"`, `href=\"something#else\"`.\n*   `[href=\"#\"]`: Matches *only* `href=\"#\"`.\n\nThe combination `a[href*=\"#\"]:not([href=\"#\"])` ensures you get links that point to *something specific* after the hash, not just the generic hash itself.\n\n## Related: Other CSS Attribute Selectors\n\nUnderstanding this selector opens the door to other powerful attribute selectors:\n\n*   **`[attribute]`**: Selects elements with the specified attribute.\n    *   Example: `a[href]` (selects all `<a>` elements with an `href` attribute)\n*   **`[attribute=value]`**: Selects elements where the attribute's value is *exactly* `value`.\n    *   Example: `input[type=\"text\"]`\n*   **`[attribute~=value]`**: Selects elements where the attribute's value is a space-separated list of words, one of which is *exactly* `value`.\n    *   Example: `img[alt~=\"logo\"]` (matches `alt=\"company logo\"` but not `alt=\"logotype\"`)\n*   **`[attribute|=value]`**: Selects elements where the attribute's value begins with `value` *followed immediately by a hyphen* (`-`) or is *exactly* `value`.\n    *   Example: `[lang|=\"en\"]` (matches `lang=\"en\"` or `lang=\"en-US\"`)\n*   **`[attribute^=value]`**: Selects elements where the attribute's value *begins with* `value`.\n    *   Example: `a[href^=\"https://\"]` (selects secure external links)\n*   **`[attribute$=value]`**: Selects elements where the attribute's value *ends with* `value`.\n    *   Example: `a[href$=\".pdf\"]` (selects links to PDF files)\n\n![CSS Attribute Selectors Cheatsheet](/images/be4e7844-2.webp)\n\n## Summary\n\nThe CSS selector `a[href*=#]:not([href=#])` is a precise tool for targeting anchor links that navigate to specific sections within a page or document, while deliberately excluding generic placeholder links. It leverages the \"contains\" attribute selector (`*=`) and the negation pseudo-class (`:not()`) to achieve this specificity. Understanding this pattern is key for fine-grained control over link styling and behavior in web development.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A clear, modern infographic breaking down the CSS selector `a[href*=#]:not([href=#])`. Use a clean, minimalist design with distinct sections for each part of the selector.\n- **Section 1: `a`**: Show a simple `<a>` tag icon or text, with an arrow pointing to \"Selects all anchor elements\".\n- **Section 2: `[href*=#]`**: Show an `<a>` tag with `href=\"page.html#section\"` and `href=\"#top\"`. Highlight the `*=` operator and `#` symbol. Text: \"Selects `<a>` elements where `href` attribute *contains* `#`.\"\n- **Section 3: `:not([href=#])`**: Show an `<a>` tag with `href=\"#\"`. Highlight `:not()` and the `=` operator. Text: \"Excludes `<a>` elements where `href` attribute is *exactly* `#`.\"\n- **Combined Result**: Show examples of matched links (`<a href=\"#section1\">`, `<a href=\"page.html#section2\">`) and unmatched links (`<a href=\"#\">`, `<a href=\"https://example.com\">`). Use checkmarks for matched, crosses for unmatched.\n- Overall style: Flat design, clear typography, use blue/green for positive matches, red for exclusions.\n\n**PLACEHOLDER-2:** A cheatsheet-style infographic for common CSS attribute selectors.\n- Title: \"CSS Attribute Selectors Cheatsheet\"\n- Each selector should have its own box/card with:\n    - **Selector:** e.g., `[attribute]`\n    - **Description:** e.g., \"Elements with the specified attribute\"\n    - **Example:** e.g., `a[href]`\n    - **Matches:** e.g., `<a href=\"...\">`\n- Include the following selectors:\n    - `[attribute]`\n    - `[attribute=value]`\n    - `[attribute~=value]`\n    - `[attribute|=value]`\n    - `[attribute^=value]`\n    - `[attribute$=value]`\n    - `[attribute*=value]`\n- Use distinct icons or colors for each selector type. Keep it visually clean and easy to read.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A clear, modern infographic breaking down the CSS selector `a[href*=#]:not([href=#])`. Use a clean, minimalist design with distinct sections for each part of the selector.\n- **Section 1: `a`**: Show a simple `<a>` tag icon or text, with an arrow pointing to \"Selects all anchor elements\".\n- **Section 2: `[href*=#]`**: Show an `<a>` tag with `href=\"page.html#section\"` and `href=\"#top\"`. Highlight the `*=` operator and `#` symbol. Text: \"Selects `<a>` elements where `href` attribute *contains* `#`.\"\n- **Section 3: `:not([href=#])`**: Show an `<a>` tag with `href=\"#\"`. Highlight `:not()` and the `=` operator. Text: \"Excludes `<a>` elements where `href` attribute is *exactly* `#`.\"\n- **Combined Result**: Show examples of matched links (`<a href=\"#section1\">`, `<a href=\"page.html#section2\">`) and unmatched links (`<a href=\"#\">`, `<a href=\"https://example.com\">`). Use checkmarks for matched, crosses for unmatched.\n- Overall style: Flat design, clear typography, use blue/green for positive matches, red for exclusions.",
        "PLACEHOLDER-2": "A cheatsheet-style infographic for common CSS attribute selectors.\n- Title: \"CSS Attribute Selectors Cheatsheet\"\n- Each selector should have its own box/card with:\n    - **Selector:** e.g., `[attribute]`\n    - **Description:** e.g., \"Elements with the specified attribute\"\n    - **Example:** e.g., `a[href]`\n    - **Matches:** e.g., `<a href=\"...\">`\n- Include the following selectors:\n    - `[attribute]`\n    - `[attribute=value]`\n    - `[attribute~=value]`\n    - `[attribute|=value]`\n    - `[attribute^=value]`\n    - `[attribute$=value]`\n    - `[attribute*=value]`\n- Use distinct icons or colors for each selector type. Keep it visually clean and easy to read."
      },
      "titles": {
        "PLACEHOLDER-1": "CSS Selector Breakdown",
        "PLACEHOLDER-2": "CSS Attribute Selectors Cheatsheet"
      },
      "count": 2,
      "placeholder_list": [
        [
          "CSS Selector Breakdown",
          "1"
        ],
        [
          "CSS Attribute Selectors Cheatsheet",
          "2"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "be4e7844-1.webp",
        "title": "CSS Selector Breakdown",
        "path": "staging/images/be4e7844-1.png"
      },
      {
        "placeholder": "PLACEHOLDER-2",
        "filename": "be4e7844-2.webp",
        "title": "CSS Attribute Selectors Cheatsheet",
        "path": "staging/images/be4e7844-2.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20947529.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T23:14:40.075128",
    "word_count": 1174,
    "code_blocks": 12
  }
}