{
  "metadata": {
    "title": "Create Density-Colored Scatter Plots in Matplotlib",
    "slug": "matplotlib-density-colored-scatter-plot",
    "uniqueId": "5f9d3ce3",
    "category": "programming-languages",
    "subcategory": "python",
    "description": "Learn various methods to create scatter plots colored by point density in Matplotlib, including KDE, histogram-based, and optimized approaches.",
    "tags": [
      "python",
      "matplotlib",
      "data-visualization",
      "density-plot",
      "kernel-density",
      "scipy"
    ],
    "difficulty": "intermediate",
    "readTime": 10,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20105364",
    "votes": 140
  },
  "content": "# How to Make a Scatter Plot Colored by Density in Matplotlib\n\nCreating a scatter plot where the color of each point reflects the local density of other points is a powerful visualization technique. It helps in identifying clusters and high-density regions in your data, especially when dealing with a large number of overlapping points. This guide explores several methods to achieve this in Python using Matplotlib, ranging from Kernel Density Estimation (KDE) to histogram-based approaches and optimized libraries.\n\n## Quick Answer\n\nThe most direct way to color a scatter plot by density is using `scipy.stats.gaussian_kde` to estimate point density and then mapping these density values to the `c` (color) argument of `plt.scatter`.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\n\n# Generate fake data\nx = np.random.normal(size=1000)\ny = x * 3 + np.random.normal(size=1000)\n\n# Calculate the point density\nxy = np.vstack([x, y])\nz = gaussian_kde(xy)(xy)\n\n# Sort points by density to ensure denser points are drawn on top\nidx = z.argsort()\nx, y, z = x[idx], y[idx], z[idx]\n\nfig, ax = plt.subplots()\nax.scatter(x, y, c=z, s=50, cmap='viridis') # Use a colormap like 'viridis'\nplt.colorbar(label='Density')\nplt.title('Scatter Plot Colored by Gaussian KDE Density')\nplt.show()\n```\n\n## Choose Your Method\n\nSelecting the right method depends on your dataset size, desired accuracy, and performance requirements.\n\n```mermaid\ngraph TD\n    A[Start] --> B{Dataset Size?};\n    B -- Small (<10k points) --> C[Gaussian KDE (scipy.stats.gaussian_kde)];\n    B -- Medium (10k-100k points) --> D[Histogram-based (np.histogram2d + scipy.interpolate.interpn)];\n    B -- Large (>100k points) --> E{Performance Critical?};\n    E -- Yes --> F[Optimized Libraries (mpl-scatter-density, datashader)];\n    E -- No --> D;\n    C --> G[Good visual quality, accurate density];\n    D --> H[Faster than KDE for larger data, good approximation];\n    F --> I[Excellent performance for very large datasets, good visual quality];\n    G --> J[End];\n    H --> J;\n    I --> J;\n```\n![Decision Tree for Density Plot Methods](/images/5f9d3ce3-1.webp)\n\n## Table of Contents\n1.  [Quick Answer](#quick-answer)\n2.  [Choose Your Method](#choose-your-method)\n3.  [Method 1: Gaussian Kernel Density Estimation (KDE)](#method-1-gaussian-kernel-density-estimation-kde)\n4.  [Method 2: Histogram-based Interpolation](#method-2-histogram-based-interpolation)\n5.  [Method 3: Optimized Libraries for Large Datasets](#method-3-optimized-libraries-for-large-datasets)\n    *   [mpl-scatter-density](#mpl-scatter-density)\n    *   [Datashader](#datashader)\n6.  [Method 4: Basic 2D Histogram (`plt.hist2d`)](#method-4-basic-2d-histogram-plt.hist2d)\n7.  [Performance Comparison](#performance-comparison)\n8.  [Common Problems & Solutions](#common-problems-solutions)\n9.  [Summary](#summary)\n\n## Method 1: Gaussian Kernel Density Estimation (KDE)\n\nThis method uses `scipy.stats.gaussian_kde` to estimate the probability density function (PDF) of your data points. Each point is then colored according to its estimated density. Sorting the points by density before plotting ensures that denser points are drawn on top, preventing them from being obscured by sparser points.\n\n**Pros:**\n*   Provides a smooth, continuous density estimate.\n*   Visually appealing for smaller datasets.\n\n**Cons:**\n*   Can be computationally expensive and slow for very large datasets (e.g., >10,000 points).\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\n\n# 1. Generate sample data\nnp.random.seed(42)\nx = np.random.normal(loc=0, scale=1, size=5000)\ny = x * 2 + np.random.normal(loc=0, scale=0.5, size=5000)\n\n# Add a second cluster for more interesting density\nx = np.concatenate([x, np.random.normal(loc=3, scale=0.8, size=2000)])\ny = np.concatenate([y, np.random.normal(loc=-2, scale=0.8, size=2000)])\n\n# 2. Calculate the point density\n# Stack x and y to create a 2D array for gaussian_kde\nxy = np.vstack([x, y])\nz = gaussian_kde(xy)(xy)\n\n# 3. Sort the points by density\n# This ensures that denser points are plotted on top, making them more visible.\nidx = z.argsort()\nx, y, z = x[idx], y[idx], z[idx]\n\n# 4. Create the scatter plot\nfig, ax = plt.subplots(figsize=(8, 6))\nscatter = ax.scatter(x, y, c=z, s=50, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# 5. Add a color bar\ncbar = fig.colorbar(scatter, ax=ax, label='Density (KDE)')\nax.set_title('Scatter Plot Colored by Gaussian KDE Density')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.show()\n```\n![Gaussian KDE Density Plot](PLACEHOLDER-2)\n\n**Explanation:**\n1.  `np.vstack([x, y])` combines the x and y coordinates into a 2D array suitable for `gaussian_kde`.\n2.  `gaussian_kde(xy)` creates a KDE object. Calling `(xy)` on this object evaluates the density at each original point.\n3.  `z.argsort()` returns the indices that would sort the `z` array. We use these indices to reorder `x`, `y`, and `z` so that points with higher density values are at the end of the arrays and thus drawn last (on top).\n4.  `ax.scatter(x, y, c=z, ...)` uses the calculated `z` values directly for coloring. `cmap='viridis'` sets the colormap, and `edgecolor='none'` removes borders around points for a cleaner look.\n\n## Method 2: Histogram-based Interpolation\n\nThis method first creates a 2D histogram of the data to get a grid-based density estimate. Then, it interpolates these grid densities back to the original point locations. This approach can be significantly faster than KDE for larger datasets while still providing a good visual representation of density.\n\n**Pros:**\n*   Faster than KDE for large datasets.\n*   Good balance between performance and visual quality.\n*   Allows control over the granularity of the density estimation via `bins`.\n\n**Cons:**\n*   The choice of `bins` can influence the smoothness and accuracy of the density estimate.\n*   Less \"smooth\" than pure KDE if `bins` are too coarse.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize\nfrom scipy.interpolate import interpn\n\ndef density_scatter(x, y, ax=None, sort=True, bins=20, **kwargs):\n    \"\"\"\n    Scatter plot colored by 2D histogram density.\n    \"\"\"\n    if ax is None:\n        fig, ax = plt.subplots()\n\n    # 1. Create a 2D histogram\n    # data: 2D array of counts, x_e/y_e: bin edges\n    data, x_e, y_e = np.histogram2d(x, y, bins=bins, density=True)\n\n    # 2. Interpolate density values back to original points\n    # interpn interpolates values from a grid (data) to specific points (np.vstack([x,y]).T)\n    z = interpn(\n        (0.5 * (x_e[1:] + x_e[:-1]), 0.5 * (y_e[1:] + y_e[:-1])), # Midpoints of bins\n        data,\n        np.vstack([x, y]).T,\n        method=\"splinef2d\", # Use spline interpolation for smoothness\n        bounds_error=False\n    )\n\n    # Handle NaN values (points outside histogram range)\n    z[np.where(np.isnan(z))] = 0.0\n\n    # 3. Sort points by density for better visualization\n    if sort:\n        idx = z.argsort()\n        x, y, z = x[idx], y[idx], z[idx]\n\n    # 4. Create the scatter plot\n    scatter = ax.scatter(x, y, c=z, **kwargs)\n\n    # 5. Add a color bar\n    norm = Normalize(vmin=np.min(z), vmax=np.max(z))\n    cbar = plt.colorbar(cm.ScalarMappable(norm=norm, cmap=kwargs.get('cmap', 'viridis')), ax=ax)\n    cbar.ax.set_ylabel('Density (Interpolated Histogram)')\n\n    return ax\n\nif __name__ == '__main__':\n    np.random.seed(42)\n    x = np.random.normal(loc=0, scale=1, size=100000)\n    y = x * 3 + np.random.normal(loc=0, scale=0.5, size=100000)\n\n    fig, ax = plt.subplots(figsize=(8, 6))\n    density_scatter(x, y, ax=ax, bins=[50, 50], s=10, cmap='plasma', edgecolor='none', alpha=0.8)\n    ax.set_title('Scatter Plot Colored by Interpolated Histogram Density')\n    ax.set_xlabel('X-axis')\n    ax.set_ylabel('Y-axis')\n    plt.grid(True, linestyle='--', alpha=0.6)\n    plt.show()\n```\n![Histogram Interpolation Density Plot](/images/5f9d3ce3-3.webp)\n\n**Explanation:**\n1.  `np.histogram2d` calculates the 2D histogram, returning the counts (`data`) and the bin edges (`x_e`, `y_e`). `density=True` normalizes the counts to form a probability density.\n2.  `interpn` is used to interpolate the density values from the histogram grid back to the exact coordinates of each original `(x, y)` point. `method=\"splinef2d\"` provides a smooth interpolation.\n3.  NaN values, which can occur if points fall outside the defined histogram bins, are set to 0.0.\n4.  Similar to KDE, points are sorted by their interpolated density `z` before plotting.\n5.  A `Normalize` object is used with `cm.ScalarMappable` to correctly map `z` values to the colormap for the colorbar.\n\n## Method 3: Optimized Libraries for Large Datasets\n\nFor very large datasets (hundreds of thousands to millions of points), the previous methods can become too slow. Specialized libraries like `mpl-scatter-density` and `datashader` are designed for high-performance density plotting.\n\n### mpl-scatter-density\n\nThis library provides a custom Matplotlib projection that efficiently computes and renders density plots using a 2D histogram approach, optimized for speed.\n\n**Installation:**\n```bash\npip install mpl-scatter-density\n```\n\n**Pros:**\n*   Very fast for large datasets.\n*   Integrates seamlessly with Matplotlib's API.\n*   Handles zooming efficiently.\n\n**Cons:**\n*   Requires an additional library installation.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport mpl_scatter_density # adds projection='scatter_density'\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Generate fake data (100,000 points)\nnp.random.seed(42)\nx = np.random.normal(loc=0, scale=1, size=100000)\ny = x * 3 + np.random.normal(loc=0, scale=0.5, size=100000)\n\n# Define a custom colormap (optional, 'viridis' or others work too)\nwhite_viridis = LinearSegmentedColormap.from_list(\n    'white_viridis',\n    [(0, '#ffffff'), (1e-20, '#440053'), (0.2, '#404388'), (0.4, '#2a788e'),\n     (0.6, '#21a784'), (0.8, '#78d151'), (1, '#fde624')], N=256\n)\n\nfig = plt.figure(figsize=(8, 6))\n# Use the 'scatter_density' projection\nax = fig.add_subplot(1, 1, 1, projection='scatter_density')\ndensity = ax.scatter_density(x, y, cmap=white_viridis) # or just cmap='viridis'\nfig.colorbar(density, label='Number of points per pixel')\n\nax.set_title('Scatter Plot Colored by Density (mpl-scatter-density)')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.show()\n```\n![mpl-scatter-density Plot](/images/5f9d3ce3-4.webp)\n\n**Explanation:**\n1.  Import `mpl_scatter_density`. This automatically registers the `scatter_density` projection.\n2.  When creating the subplot, specify `projection='scatter_density'`.\n3.  Call `ax.scatter_density(x, y, ...)` which is an optimized method provided by the projection. It internally handles the density calculation and plotting.\n\n### Datashader\n\nDatashader is a powerful library for rendering large datasets. It rasterizes data into a fixed-size image, making it extremely fast for millions or even billions of points. It can integrate with Matplotlib via `datashader.mpl_ext.dsshow`.\n\n**Installation:**\n```bash\npip install datashader pandas\n```\n\n**Pros:**\n*   Unmatched performance for extremely large datasets.\n*   Produces high-quality, anti-aliased images.\n*   Supports various aggregation methods beyond simple counts.\n\n**Cons:**\n*   Requires additional libraries (`datashader`, `pandas`).\n*   Can be a bit more complex to set up compared to direct Matplotlib.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datashader as ds\nfrom datashader.mpl_ext import dsshow\nimport pandas as pd\n\n# Generate fake data (100,000 points)\nnp.random.seed(42)\nx = np.random.normal(loc=0, scale=1, size=100000)\ny = x * 3 + np.random.normal(loc=0, scale=0.5, size=100000)\n\n# Create a Pandas DataFrame, which Datashader often uses\ndf = pd.DataFrame(dict(x=x, y=y))\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Use dsshow to render the datashader plot on a Matplotlib axis\ndsartist = dsshow(\n    df,\n    ds.Point(\"x\", \"y\"), # Specify the x and y columns\n    ds.count(),         # Aggregate by counting points in each pixel\n    vmin=0,             # Minimum density value for colormap\n    vmax=35,            # Maximum density value for colormap (adjust as needed)\n    norm=\"linear\",\n    aspect=\"auto\",\n    ax=ax,\n    cmap='fire'         # Colormap for the density\n)\n\nplt.colorbar(dsartist, label='Number of points per pixel (Datashader)')\nax.set_title('Scatter Plot Colored by Density (Datashader)')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.show()\n```\n![Datashader Density Plot](/images/5f9d3ce3-5.webp)\n\n**Explanation:**\n1.  Data is converted to a Pandas DataFrame, a common input for Datashader.\n2.  `dsshow` is the key function for Matplotlib integration.\n3.  `ds.Point(\"x\", \"y\")` specifies the columns to use for the scatter plot.\n4.  `ds.count()` defines the aggregation method – in this case, counting the number of points that fall into each pixel. Other aggregations like `ds.mean()` or `ds.sum()` can be used if you have a third variable.\n5.  `vmin` and `vmax` help control the colormap scaling.\n\n## Method 4: Basic 2D Histogram (`plt.hist2d`)\n\nWhile not strictly a \"scatter plot colored by density\" in the sense of individual points, `plt.hist2d` creates a heatmap-like representation of density by dividing the plot area into bins and coloring each bin based on the number of points it contains. It's a quick and simple way to visualize density.\n\n**Pros:**\n*   Very simple to implement.\n*   Fast for all dataset sizes.\n*   Good for quickly identifying high-density regions.\n\n**Cons:**\n*   Does not show individual points, but rather aggregated bins.\n*   The choice of `bins` significantly affects the appearance.\n*   Zooming in might reveal blockiness if `bins` are too coarse.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm # Optional: for better visualization of skewed data\n\n# Generate fake data\nnp.random.seed(42)\nx = np.random.normal(loc=0, scale=1, size=10000)\ny = x * 3 + np.random.normal(loc=0, scale=0.5, size=10000)\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Create the 2D histogram\n# bins: number of bins in x and y direction\n# cmap: colormap to use\n# cmin: minimum count for a bin to be plotted (useful to hide empty bins)\nhist = ax.hist2d(x, y, bins=(50, 50), cmap='hot_r', cmin=1) # hot_r is reversed hot colormap\n# hist = ax.hist2d(x, y, bins=(50, 50), cmap='hot_r', cmin=1, norm=LogNorm()) # Use LogNorm for skewed data\n\nfig.colorbar(hist[3], ax=ax, label='Number of points in bin')\nax.set_title('2D Histogram (Density Map)')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.show()\n```\n![Basic 2D Histogram](/images/5f9d3ce3-6.webp)\n\n**Explanation:**\n1.  `ax.hist2d(x, y, bins=(50, 50), ...)` directly computes and plots the 2D histogram.\n2.  `bins` can be an integer (for equal bins in x and y) or a tuple `(nx, ny)` for different bin counts.\n3.  `cmin=1` is a useful trick to only plot bins that contain at least one point, making the plot look more like a scatter plot by hiding empty regions.\n4.  `LogNorm()` from `matplotlib.colors` can be used with `norm=LogNorm()` to apply a logarithmic scaling to the color mapping, which is often beneficial when density values span a wide range.\n\n## Performance Comparison\n\nHere's a general comparison of the methods based on typical performance for different dataset sizes.\n\n| Method                                  | Small Data (<10k points) | Medium Data (10k-100k points) | Large Data (>100k points) | Visual Quality | Ease of Use |\n| :-------------------------------------- | :----------------------- | :---------------------------- | :------------------------ | :------------- | :---------- |\n| **Gaussian KDE** (`gaussian_kde`)       | Excellent                | Slow                          | Very Slow                 | High (smooth)  | Medium      |\n| **Histogram Interpolation**             | Good                     | Good                          | Moderate                  | Medium-High    | Medium      |\n| **`mpl-scatter-density`**               | Good                     | Excellent                     | Excellent                 | High           | Easy        |\n| **`Datashader`**                        | Good                     | Excellent                     | Excellent                 | High (raster)  | Medium      |\n| **Basic 2D Histogram** (`plt.hist2d`)   | Excellent                | Excellent                     | Excellent                 | Medium (binned)| Easy        |\n\n![Performance Comparison Chart](/images/5f9d3ce3-7.webp)\n\n## Common Problems & Solutions\n\n*   **Slow performance with KDE for large datasets:**\n    *   **Problem:** `gaussian_kde` becomes very slow for datasets with more than ~10,000 points.\n    *   **Solution:** Switch to `mpl-scatter-density`, `datashader`, or the histogram-based interpolation method.\n*   **Points obscuring each other:**\n    *   **Problem:** In dense regions, points with lower density might be drawn on top of higher-density points, hiding the true density.\n    *   **Solution:** Sort the points by their calculated density (`z.argsort()`) and plot them in ascending order of density. This ensures denser points are drawn last and are visible.\n*   **No colorbar or incorrect colorbar:**\n    *   **Problem:** The colorbar doesn't appear or doesn't correctly reflect the density values.\n    *   **Solution:** Ensure you pass the scatter plot object to `plt.colorbar()` or `fig.colorbar()`. For custom density calculations, you might need to explicitly create a `ScalarMappable` with a `Normalize` object, as shown in the histogram interpolation example.\n*   **`ValueError: Expected 2-dimensional array, got 1` with `gaussian_kde`:**\n    *   **Problem:** This can occur in older Matplotlib versions if `edgecolor=''` is used.\n    *   **Solution:** Change `edgecolor=''` to `edgecolor=None`.\n*   **Blocky appearance with `plt.hist2d`:**\n    *   **Problem:** The 2D histogram looks blocky, especially when zoomed in.\n    *   **Solution:** Increase the number of `bins`. For a smoother appearance, consider `mpl-scatter-density` or the histogram-based interpolation. Using `LogNorm` can also improve visual range.\n\n## Summary\n\nColoring scatter plots by density is a crucial technique for visualizing large datasets and identifying patterns.\n\n*   For **smaller datasets**, `scipy.stats.gaussian_kde` offers a smooth and accurate density estimate. Remember to sort points by density for optimal visualization.\n*   For **medium to large datasets**, the histogram-based interpolation method provides a good balance of performance and visual quality.\n*   For **very large datasets**, specialized libraries like `mpl-scatter-density` and `datashader` are highly recommended for their efficiency and advanced rendering capabilities.\n*   `plt.hist2d` offers a quick and simple heatmap-like density visualization, though it doesn't show individual points.\n\nChoose the method that best fits your data size, performance needs, and desired level of detail.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A decision tree flowchart. The root node is \"Dataset Size?\". Branches lead to \"Small (<10k points)\", \"Medium (10k-100k points)\", and \"Large (>100k points)\". \"Small\" leads to \"Gaussian KDE\". \"Medium\" leads to \"Histogram-based Interpolation\". \"Large\" branches into \"Performance Critical?\". \"Performance Critical? Yes\" leads to \"Optimized Libraries (mpl-scatter-density, datashader)\". \"Performance Critical? No\" leads back to \"Histogram-based Interpolation\". Each method node should have a brief description of its pros/cons. Use a clean, modern flowchart style with clear arrows.\n\n**PLACEHHER-2:** A Matplotlib scatter plot. The plot shows two clusters of points. Points are colored by density using a 'viridis' colormap, with denser areas appearing yellow/green and sparser areas appearing purple/blue. A colorbar on the right is labeled \"Density (KDE)\". The title is \"Scatter Plot Colored by Gaussian KDE Density\". Axes are labeled \"X-axis\" and \"Y-axis\".\n\n**PLACEHOLDER-3:** A Matplotlib scatter plot, similar to PLACEHOLDER-2 but with a 'plasma' colormap. The plot shows two clusters of points, colored by density derived from interpolated histogram values. Denser areas are yellow/white, sparser areas are dark purple. A colorbar on the right is labeled \"Density (Interpolated Histogram)\". The title is \"Scatter Plot Colored by Interpolated Histogram Density\". Axes are labeled \"X-axis\" and \"Y-axis\".\n\n**PLACEHOLDER-4:** A Matplotlib scatter plot generated using `mpl-scatter-density`. The plot shows two clusters of points, colored by density using a custom colormap (similar to 'white_viridis' described in the code, starting white and transitioning to dark blue, then green, then yellow). A colorbar on the right is labeled \"Number of points per pixel\". The title is \"Scatter Plot Colored by Density (mpl-scatter-density)\". Axes are labeled \"X-axis\" and \"Y-axis\".\n\n**PLACEHOLDER-5:** A Matplotlib plot generated using `datashader`. The plot shows two clusters of points, rendered as a density heatmap using a 'fire' colormap. Denser areas are bright yellow/white, fading to red and then black in sparser regions. A colorbar on the right is labeled \"Number of points per pixel (Datashader)\". The title is \"Scatter Plot Colored by Density (Datashader)\". Axes are labeled \"X-axis\" and \"Y-axis\".\n\n**PLACEHOLDER-6:** A Matplotlib 2D histogram plot (heatmap). The plot shows two clusters of points, represented by colored bins using a 'hot_r' colormap. Denser bins are bright yellow/white, fading to red and then black. A colorbar on the right is labeled \"Number of points in bin\". The title is \"2D Histogram (Density Map)\". Axes are labeled \"X-axis\" and \"Y-axis\". The bins should be visible but not overly blocky, suggesting a reasonable bin count.\n\n**PLACEHOLDER-7:** A bar chart comparing the performance of different density plotting methods. The X-axis lists the methods: \"Gaussian KDE\", \"Histogram Interpolation\", \"mpl-scatter-density\", \"Datashader\", \"Basic 2D Histogram\". The Y-axis represents \"Relative Performance (Higher is Faster)\". Bars should be colored differently. \"Gaussian KDE\" should have a low bar. \"Histogram Interpolation\" a medium bar. \"mpl-scatter-density\" and \"Datashader\" should have high bars. \"Basic 2D Histogram\" should have a very high bar. Include a small legend indicating what each bar color represents (e.g., \"Small Data\", \"Medium Data\", \"Large Data\" - though the chart should primarily show relative speed).",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A decision tree flowchart. The root node is \"Dataset Size?\". Branches lead to \"Small (<10k points)\", \"Medium (10k-100k points)\", and \"Large (>100k points)\". \"Small\" leads to \"Gaussian KDE\". \"Medium\" leads to \"Histogram-based Interpolation\". \"Large\" branches into \"Performance Critical?\". \"Performance Critical? Yes\" leads to \"Optimized Libraries (mpl-scatter-density, datashader)\". \"Performance Critical? No\" leads back to \"Histogram-based Interpolation\". Each method node should have a brief description of its pros/cons. Use a clean, modern flowchart style with clear arrows.\n\n**PLACEHHER-2:** A Matplotlib scatter plot. The plot shows two clusters of points. Points are colored by density using a 'viridis' colormap, with denser areas appearing yellow/green and sparser areas appearing purple/blue. A colorbar on the right is labeled \"Density (KDE)\". The title is \"Scatter Plot Colored by Gaussian KDE Density\". Axes are labeled \"X-axis\" and \"Y-axis\".",
        "PLACEHOLDER-3": "A Matplotlib scatter plot, similar to PLACEHOLDER-2 but with a 'plasma' colormap. The plot shows two clusters of points, colored by density derived from interpolated histogram values. Denser areas are yellow/white, sparser areas are dark purple. A colorbar on the right is labeled \"Density (Interpolated Histogram)\". The title is \"Scatter Plot Colored by Interpolated Histogram Density\". Axes are labeled \"X-axis\" and \"Y-axis\".",
        "PLACEHOLDER-4": "A Matplotlib scatter plot generated using `mpl-scatter-density`. The plot shows two clusters of points, colored by density using a custom colormap (similar to 'white_viridis' described in the code, starting white and transitioning to dark blue, then green, then yellow). A colorbar on the right is labeled \"Number of points per pixel\". The title is \"Scatter Plot Colored by Density (mpl-scatter-density)\". Axes are labeled \"X-axis\" and \"Y-axis\".",
        "PLACEHOLDER-5": "A Matplotlib plot generated using `datashader`. The plot shows two clusters of points, rendered as a density heatmap using a 'fire' colormap. Denser areas are bright yellow/white, fading to red and then black in sparser regions. A colorbar on the right is labeled \"Number of points per pixel (Datashader)\". The title is \"Scatter Plot Colored by Density (Datashader)\". Axes are labeled \"X-axis\" and \"Y-axis\".",
        "PLACEHOLDER-6": "A Matplotlib 2D histogram plot (heatmap). The plot shows two clusters of points, represented by colored bins using a 'hot_r' colormap. Denser bins are bright yellow/white, fading to red and then black. A colorbar on the right is labeled \"Number of points in bin\". The title is \"2D Histogram (Density Map)\". Axes are labeled \"X-axis\" and \"Y-axis\". The bins should be visible but not overly blocky, suggesting a reasonable bin count.",
        "PLACEHOLDER-7": "A bar chart comparing the performance of different density plotting methods. The X-axis lists the methods: \"Gaussian KDE\", \"Histogram Interpolation\", \"mpl-scatter-density\", \"Datashader\", \"Basic 2D Histogram\". The Y-axis represents \"Relative Performance (Higher is Faster)\". Bars should be colored differently. \"Gaussian KDE\" should have a low bar. \"Histogram Interpolation\" a medium bar. \"mpl-scatter-density\" and \"Datashader\" should have high bars. \"Basic 2D Histogram\" should have a very high bar. Include a small legend indicating what each bar color represents (e.g., \"Small Data\", \"Medium Data\", \"Large Data\" - though the chart should primarily show relative speed)."
      },
      "titles": {
        "PLACEHOLDER-1": "Decision Tree for Density Plot Methods",
        "PLACEHOLDER-2": "Gaussian KDE Density Plot",
        "PLACEHOLDER-3": "Histogram Interpolation Density Plot",
        "PLACEHOLDER-4": "mpl-scatter-density Plot",
        "PLACEHOLDER-5": "Datashader Density Plot",
        "PLACEHOLDER-6": "Basic 2D Histogram",
        "PLACEHOLDER-7": "Performance Comparison Chart"
      },
      "count": 6,
      "placeholder_list": [
        [
          "Decision Tree for Density Plot Methods",
          "1"
        ],
        [
          "Gaussian KDE Density Plot",
          "2"
        ],
        [
          "Histogram Interpolation Density Plot",
          "3"
        ],
        [
          "mpl-scatter-density Plot",
          "4"
        ],
        [
          "Datashader Density Plot",
          "5"
        ],
        [
          "Basic 2D Histogram",
          "6"
        ],
        [
          "Performance Comparison Chart",
          "7"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "5f9d3ce3-1.webp",
        "title": "Decision Tree for Density Plot Methods",
        "path": "staging/images/5f9d3ce3-1.png"
      },
      {
        "placeholder": "PLACEHOLDER-3",
        "filename": "5f9d3ce3-3.webp",
        "title": "Histogram Interpolation Density Plot",
        "path": "staging/images/5f9d3ce3-3.png"
      },
      {
        "placeholder": "PLACEHOLDER-4",
        "filename": "5f9d3ce3-4.webp",
        "title": "mpl-scatter-density Plot",
        "path": "staging/images/5f9d3ce3-4.png"
      },
      {
        "placeholder": "PLACEHOLDER-5",
        "filename": "5f9d3ce3-5.webp",
        "title": "Datashader Density Plot",
        "path": "staging/images/5f9d3ce3-5.png"
      },
      {
        "placeholder": "PLACEHOLDER-6",
        "filename": "5f9d3ce3-6.webp",
        "title": "Basic 2D Histogram",
        "path": "staging/images/5f9d3ce3-6.png"
      },
      {
        "placeholder": "PLACEHOLDER-7",
        "filename": "5f9d3ce3-7.webp",
        "title": "Performance Comparison Chart",
        "path": "staging/images/5f9d3ce3-7.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20105364.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:46:35.952584",
    "word_count": 2999,
    "code_blocks": 18
  }
}