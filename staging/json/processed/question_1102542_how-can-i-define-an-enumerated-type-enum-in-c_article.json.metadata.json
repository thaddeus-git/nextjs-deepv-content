{
  "metadata": {
    "title": "How can I define an enumerated type (enum) in C?: 0 Methods + Performance Guide",
    "slug": "how-can-i-define-an-enumerated-type-enum-in-c",
    "uniqueId": "ac4eb985",
    "category": "programming-languages",
    "subcategory": "c",
    "description": "To define an enumerated type (enum) in C, you typically declare the enum type first, then declare variables of that type. The most common and robust way is t...",
    "tags": [
      "c",
      "enums"
    ],
    "difficulty": "intermediate",
    "readTime": 31,
    "publishedAt": "2025-09-19",
    "featured": false,
    "technology": "C",
    "votes": 288,
    "answersCount": 0,
    "sourceStackOverflowId": "1102542",
    "generatedAt": "2025-09-19T10:34:01.297603",
    "workflowVersion": "deepv_stackoverflow_v1.0",
    "qualityMetrics": {
      "wordCount": 6132,
      "codeBlocks": 56,
      "sections": 61,
      "personaIntegration": 37,
      "practicalFocusScore": 100
    }
  },
  "content": "# How can I define an enumerated type (enum) in C?: 0 Methods + Performance Guide\n\n## Quick Answer\n\nTo define an enumerated type (enum) in C, you typically declare the `enum` type first, then declare variables of that type. The most common and robust way is to use a `typedef` to create an alias for the `enum` type, making variable declarations cleaner.\n\n```c\n// Define the enum type using typedef for cleaner syntax\ntypedef enum {\n    RANDOM,\n    IMMEDIATE,\n    SEARCH\n} Strategy; // 'Strategy' is now a new type\n\n// Declare a variable of the new enum type\nStrategy currentStrategy = IMMEDIATE;\n\n// Example of using the enum\n#include <stdio.h>\n\nint main() {\n    Strategy myStrategy = SEARCH;\n\n    if (myStrategy == SEARCH) {\n        printf(\"Current strategy is SEARCH.\\n\");\n    } else if (myStrategy == IMMEDIATE) {\n        printf(\"Current strategy is IMMEDIATE.\\n\");\n    } else {\n        printf(\"Current strategy is RANDOM.\\n\");\n    }\n\n    // Enums are essentially integer types\n    printf(\"RANDOM value: %d\\n\", RANDOM);\n    printf(\"IMMEDIATE value: %d\\n\", IMMEDIATE);\n    printf(\"SEARCH value: %d\\n\", SEARCH);\n\n    return 0;\n}\n```\n\nThis approach addresses the common error of conflicting types by properly separating the type definition from the variable declaration, ensuring clarity and correctness.\n\n## Choose Your Method\n\nDeciding how to define and use enums in C depends on your project's needs, C standard version, and desired level of type safety and readability. This decision tree will guide you to the most suitable approach.\n\n```mermaid\ngraph TD\n    A[Start: Define an Enum in C?] --> B{Need a named enum type?};\n\n    B -- Yes --> C{Want cleaner variable declarations?};\n    B -- No --> D{Just need a set of named integer constants?};\n\n    C -- Yes (Modern C, Readability) --> E[Use `typedef enum { ... } EnumName;`];\n    E --> F[Example: `typedef enum { RED, GREEN } Color; Color myColor = RED;`];\n    F --> G[Benefits: Type safety, clear intent, concise variable declarations.];\n    G --> H[Personas: 📚 Learning Explorer, 🏗️ Architecture Builder, 🚀 Speed Seeker];\n\n    C -- No (Explicit `enum` keyword) --> I[Use `enum EnumName { ... };` then `enum EnumName var;`];\n    I --> J[Example: `enum Color { RED, GREEN }; enum Color myColor = RED;`];\n    J --> K[Benefits: Explicitly states it's an enum type.];\n    K --> L[Personas: ⚡ Legacy Maintainer, 📚 Learning Explorer];\n\n    D -- Yes (Simple constants) --> M[Use `#define` for simple constants];\n    M --> N[Example: `#define RED 0`, `#define GREEN 1`];\n    N --> O[Benefits: Preprocessor substitution, no type checking.];\n    O --> P[Drawbacks: No type safety, potential for name collisions, debugging harder.];\n    P --> Q[Personas: 🚀 Speed Seeker (for very simple cases), ⚡ Legacy Maintainer (if unavoidable)];\n\n    E --> R[Considerations: Enum values default to 0, 1, 2... unless specified.];\n    I --> R;\n    R --> S{Need to assign specific values?};\n    S -- Yes --> T[Assign values: `enum { A=1, B=5, C }`];\n    T --> U[Benefits: Control underlying integer values.];\n    U --> V[Personas: 🔧 Problem Solver, 🏗️ Architecture Builder];\n\n    S -- No --> W[Default values are fine.];\n    W --> X[Benefits: Simplicity.];\n    X --> Y[Personas: 🚀 Speed Seeker, 📚 Learning Explorer];\n\n    G --> Z[End];\n    K --> Z;\n    P --> Z;\n    U --> Z;\n    Y --> Z;\n```\n\n## Table of Contents\n- [Quick Answer](#quick-answer)\n- [Choose Your Method](#choose-your-method)\n- [Table of Contents](#table-of-contents)\n- [Ready-to-Use Code](#ready-to-use-code)\n- [Method 1: Basic Enum Declaration](#method-1-basic-enum-declaration)\n- [Method 2: Enum with `typedef` for Cleaner Syntax](#method-2-enum-with-typedef-for-cleaner-syntax)\n- [Method 3: Assigning Custom Values to Enum Members](#method-3-assigning-custom-values-to-enum-members)\n- [Method 4: Enums in Function Parameters and Return Types](#method-4-enums-in-function-parameters-and-return-types)\n- [Method 5: Iterating Through Enum Members (Workaround)](#method-5-iterating-through-enum-members-workaround)\n- [Method 6: Enums and `switch` Statements](#method-6-enums-and-switch-statements)\n- [Method 7: Enums in Structures and Unions](#method-7-enums-in-structures-and-unions)\n- [Method 8: Forward Declaring Enums (Limited Use)](#method-8-forward-declaring-enums-limited-use)\n- [Method 9: Using Enums for Bit Flags](#method-9-using-enums-for-bit-flags)\n- [Method 10: Enums and Type Casting](#method-10-enums-and-type-casting)\n- [Performance Comparison](#performance-comparison)\n- [C Version Support](#c-version-support)\n- [Common Problems & Solutions](#common-problems--solutions)\n- [Real-World Use Cases](#real-world-use-cases)\n- [Related: Other C Operations](#related-other-c-operations)\n- [Summary](#summary)\n- [Frequently Asked Questions](#frequently-asked-questions)\n- [Tools & Resources](#tools--resources)\n\n## Ready-to-Use Code\n\nHere are the most common and robust ways to define and use enums in C, ready for immediate integration into your projects.\n\n### 1. Standard Enum Declaration with `typedef` (Recommended for most cases)\n\nThis is the most widely accepted and readable method for defining enums. It creates a new type name, `Strategy`, which can then be used directly without the `enum` keyword.\n\n```c\n// Define the enum type\ntypedef enum {\n    RANDOM_STRATEGY,\n    IMMEDIATE_STRATEGY,\n    SEARCH_STRATEGY,\n    NUM_STRATEGIES // Often used to get the count of enum members\n} Strategy;\n\n// Declare and initialize a variable of type Strategy\nStrategy currentStrategy = IMMEDIATE_STRATEGY;\n\n// Example usage\n#include <stdio.h>\n\nvoid executeStrategy(Strategy s) {\n    switch (s) {\n        case RANDOM_STRATEGY:\n            printf(\"Executing random strategy.\\n\");\n            break;\n        case IMMEDIATE_STRATEGY:\n            printf(\"Executing immediate strategy.\\n\");\n            break;\n        case SEARCH_STRATEGY:\n            printf(\"Executing search strategy.\\n\");\n            break;\n        default:\n            printf(\"Unknown strategy.\\n\");\n            break;\n    }\n}\n\nint main() {\n    executeStrategy(currentStrategy);\n    executeStrategy(SEARCH_STRATEGY);\n\n    printf(\"Number of strategies defined: %d\\n\", NUM_STRATEGIES);\n\n    return 0;\n}\n```\n\n### 2. Enum with Explicit Values (When specific integer mapping is needed)\n\nUse this when you need your enum members to correspond to specific integer values, for example, when interacting with hardware registers or file formats.\n\n```c\n// Define an enum where members have specific underlying integer values\ntypedef enum {\n    SUCCESS = 0,\n    ERROR_FILE_NOT_FOUND = 100,\n    ERROR_PERMISSION_DENIED = 101,\n    ERROR_NETWORK_FAILURE = 200\n} StatusCode;\n\n// Declare and initialize a variable\nStatusCode lastStatus = ERROR_PERMISSION_DENIED;\n\n// Example usage\n#include <stdio.h>\n\nvoid printStatus(StatusCode code) {\n    printf(\"Status Code: %d - \", code);\n    switch (code) {\n        case SUCCESS:\n            printf(\"Operation successful.\\n\");\n            break;\n        case ERROR_FILE_NOT_FOUND:\n            printf(\"Error: File not found.\\n\");\n            break;\n        case ERROR_PERMISSION_DENIED:\n            printf(\"Error: Permission denied.\\n\");\n            break;\n        case ERROR_NETWORK_FAILURE:\n            printf(\"Error: Network failure.\\n\");\n            break;\n        default:\n            printf(\"Unknown status code.\\n\");\n            break;\n    }\n}\n\nint main() {\n    printStatus(SUCCESS);\n    printStatus(lastStatus);\n    printStatus(ERROR_NETWORK_FAILURE);\n\n    // You can also cast integers to enum types, but be careful\n    printStatus((StatusCode)100); // This will print \"Error: File not found.\"\n\n    return 0;\n}\n```\n\n## Method 1: Basic Enum Declaration\n\n**Personas:** 📚 Learning Explorer, ⚡ Legacy Maintainer\n\nThe most fundamental way to define an enumerated type in C involves using the `enum` keyword followed by an optional tag (name for the enum type) and a list of enumerators (the named constants).\n\n### Syntax\n\n```c\nenum tag_name {\n    enumerator1,\n    enumerator2 = value, // Optional: assign a specific integer value\n    enumerator3,\n    // ...\n};\n```\n\nAfter defining the enum type, you declare variables of that type using the `enum tag_name` syntax.\n\n### How it Works\n\nWhen you declare an `enum`, the compiler assigns integer values to the enumerators. By default, the first enumerator is assigned `0`, the second `1`, and so on. If you explicitly assign a value to an enumerator, the subsequent enumerators will increment from that assigned value.\n\nThe original problem statement's code:\n```c\nenum\n{\nRANDOM, IMMEDIATE, SEARCH} strategy;\nstrategy = IMMEDIATE;\n```\nThis code attempts to define an *unnamed* enum type and immediately declare a variable `strategy` of that type. The issue arises if `strategy` was already declared elsewhere (e.g., as a global variable or in an outer scope) with a different type. The error \"conflicting types for 'strategy'\" indicates that the compiler sees `strategy` being declared twice with incompatible types.\n\nThe correct way to use an unnamed enum to declare a variable *at the point of definition* is:\n\n```c\n// Corrected original example: Unnamed enum with variable declaration\nenum {\n    RANDOM,\n    IMMEDIATE,\n    SEARCH\n} strategy; // 'strategy' is a variable of this anonymous enum type\n\n// Now you can assign values\nstrategy = IMMEDIATE;\n\n#include <stdio.h>\n\nint main() {\n    printf(\"RANDOM: %d\\n\", RANDOM);\n    printf(\"IMMEDIATE: %d\\n\", IMMEDIATE);\n    printf(\"SEARCH: %d\\n\", SEARCH);\n    printf(\"Current strategy: %d\\n\", strategy); // Will print 1\n\n    return 0;\n}\n```\n\nWhile this works, it's generally less flexible because you cannot declare other variables of the *same* unnamed enum type later in your code without redefining the enum.\n\n### Example: Named Enum Type\n\nFor better reusability and clarity, it's best to give your enum a name (a tag).\n\n```c\n// 1. Define the enum type with a tag 'OperationType'\nenum OperationType {\n    ADD,      // Defaults to 0\n    SUBTRACT, // Defaults to 1\n    MULTIPLY, // Defaults to 2\n    DIVIDE    // Defaults to 3\n};\n\n// 2. Declare variables of this enum type\nenum OperationType currentOp;\nenum OperationType nextOp = MULTIPLY;\n\n#include <stdio.h>\n\nint main() {\n    currentOp = ADD;\n\n    printf(\"Current operation: %d\\n\", currentOp); // Output: 0\n    printf(\"Next operation: %d\\n\", nextOp);       // Output: 2\n\n    if (currentOp == ADD) {\n        printf(\"Performing addition.\\n\");\n    }\n\n    return 0;\n}\n```\n\n### Advantages:\n*   **Fundamental:** This is the basic C syntax for enums.\n*   **Explicit:** Clearly states `enum` when declaring variables.\n\n### Disadvantages:\n*   **Verbosity:** Requires `enum TagName` every time you declare a variable, which can be cumbersome.\n*   **Limited Reusability (Unnamed):** If you use an unnamed enum to declare a variable, you can't easily declare other variables of that exact type later.\n\n### When to Use:\n*   When you are learning the basics of C enums.\n*   In legacy codebases where `typedef` might not be as prevalent.\n*   For very simple, one-off sets of constants where you don't need to declare multiple variables of that specific enum type.\n\n## Method 2: Enum with `typedef` for Cleaner Syntax\n\n**Personas:** 🚀 Speed Seeker, 📚 Learning Explorer, 🏗️ Architecture Builder, 🔧 Problem Solver\n\nThis is the most common and recommended way to define enums in modern C programming. It combines the `enum` definition with a `typedef` to create a new type alias, making variable declarations much cleaner and more akin to built-in types like `int` or `char`.\n\n### Syntax\n\n```c\ntypedef enum tag_name {\n    enumerator1,\n    enumerator2,\n    // ...\n} TypeAliasName; // This is the new type name\n```\n\nOr, more commonly, for an anonymous enum:\n\n```c\ntypedef enum {\n    enumerator1,\n    enumerator2,\n    // ...\n} TypeAliasName; // This is the new type name\n```\n\n### How it Works\n\nThe `typedef` keyword creates an alias (a new name) for an existing type. When used with `enum`, it allows you to refer to your enumerated type directly by `TypeAliasName` instead of `enum tag_name`. This significantly improves readability and reduces typing.\n\n```c\n// Define the enum type using typedef\ntypedef enum {\n    MONDAY,    // 0\n    TUESDAY,   // 1\n    WEDNESDAY, // 2\n    THURSDAY,  // 3\n    FRIDAY,    // 4\n    SATURDAY,  // 5\n    SUNDAY     // 6\n} DayOfWeek; // 'DayOfWeek' is now a new type\n\n// Declare variables using the new type alias\nDayOfWeek today = WEDNESDAY;\nDayOfWeek holiday = SATURDAY;\n\n#include <stdio.h>\n\nint main() {\n    printf(\"Today is day number: %d\\n\", today);     // Output: 2\n    printf(\"Holiday is day number: %d\\n\", holiday); // Output: 5\n\n    if (today == WEDNESDAY) {\n        printf(\"It's hump day!\\n\");\n    }\n\n    return 0;\n}\n```\n\n### Example: Using `typedef` with a Named Enum\n\nYou can still give the `enum` itself a tag name even when using `typedef`. This is useful if you need to refer to the `enum` type by its tag name in some specific contexts (e.g., forward declarations, though less common for enums).\n\n```c\n// Define the enum type with a tag AND a typedef alias\ntypedef enum TrafficLightState {\n    RED_LIGHT,\n    YELLOW_LIGHT,\n    GREEN_LIGHT\n} TrafficLight; // 'TrafficLight' is the alias, 'TrafficLightState' is the tag\n\nTrafficLight currentLight = RED_LIGHT;\n\n#include <stdio.h>\n\nvoid changeLight(TrafficLight *light) {\n    switch (*light) {\n        case RED_LIGHT:\n            *light = GREEN_LIGHT;\n            break;\n        case YELLOW_LIGHT:\n            *light = RED_LIGHT;\n            break;\n        case GREEN_LIGHT:\n            *light = YELLOW_LIGHT;\n            break;\n    }\n}\n\nint main() {\n    printf(\"Initial light: %d\\n\", currentLight); // Output: 0 (RED_LIGHT)\n    changeLight(&currentLight);\n    printf(\"After change: %d\\n\", currentLight);  // Output: 2 (GREEN_LIGHT)\n\n    return 0;\n}\n```\n\n### Advantages:\n*   **Readability:** Variable declarations are much cleaner (e.g., `DayOfWeek today;` vs. `enum DayOfWeek today;`).\n*   **Conciseness:** Reduces boilerplate code.\n*   **Standard Practice:** Widely adopted in C programming for defining custom types.\n*   **Type Safety:** Provides compile-time checking for assignments, preventing accidental use of arbitrary integers where an enum is expected (though implicit conversion from `int` to enum is allowed, it often triggers warnings).\n\n### Disadvantages:\n*   None significant for general use. Some might argue it hides the `enum` keyword, but this is generally considered a benefit for readability.\n\n### When to Use:\n*   **Almost always:** This is the preferred method for defining enums in C.\n*   When you want to create clear, readable, and maintainable code.\n*   For defining custom types that represent a fixed set of named integer values.\n\n## Method 3: Assigning Custom Values to Enum Members\n\n**Personas:** 🔧 Problem Solver, 🏗️ Architecture Builder, ⚡ Legacy Maintainer\n\nBy default, enum members are assigned integer values starting from `0` and incrementing by `1`. However, you often need to assign specific, custom integer values to your enum members. This is particularly useful when the enum values correspond to external data (e.g., error codes, protocol messages, hardware register bits) or when you need to control the underlying integer representation.\n\n### Syntax\n\nYou can explicitly assign an integer value to any enumerator using the `=` operator.\n\n```c\ntypedef enum {\n    ENUMERATOR_A = 10,\n    ENUMERATOR_B,      // Will be 11 (10 + 1)\n    ENUMERATOR_C = 20,\n    ENUMERATOR_D       // Will be 21 (20 + 1)\n} CustomEnum;\n```\n\n### How it Works\n\nWhen an enumerator is assigned a value, all subsequent enumerators (unless they are also explicitly assigned) will increment from that value.\n\n```c\n// Example: Error codes\ntypedef enum {\n    STATUS_OK = 0,\n    ERROR_GENERIC = 1,\n    ERROR_FILE_NOT_FOUND = 100,\n    ERROR_PERMISSION_DENIED, // This will be 101\n    ERROR_INVALID_ARGUMENT = 200,\n    ERROR_OUT_OF_MEMORY      // This will be 201\n} SystemErrorCode;\n\nSystemErrorCode lastError = ERROR_PERMISSION_DENIED;\n\n#include <stdio.h>\n\nint main() {\n    printf(\"STATUS_OK: %d\\n\", STATUS_OK);\n    printf(\"ERROR_GENERIC: %d\\n\", ERROR_GENERIC);\n    printf(\"ERROR_FILE_NOT_FOUND: %d\\n\", ERROR_FILE_NOT_FOUND);\n    printf(\"ERROR_PERMISSION_DENIED: %d\\n\", ERROR_PERMISSION_DENIED);\n    printf(\"ERROR_INVALID_ARGUMENT: %d\\n\", ERROR_INVALID_ARGUMENT);\n    printf(\"ERROR_OUT_OF_MEMORY: %d\\n\", ERROR_OUT_OF_MEMORY);\n\n    printf(\"Last error encountered: %d\\n\", lastError);\n\n    return 0;\n}\n```\n\n**Output:**\n```\nSTATUS_OK: 0\nERROR_GENERIC: 1\nERROR_FILE_NOT_FOUND: 100\nERROR_PERMISSION_DENIED: 101\nERROR_INVALID_ARGUMENT: 200\nERROR_OUT_OF_MEMORY: 201\nLast error encountered: 101\n```\n\n### Example: Using Negative Values\n\nEnum members can also be assigned negative values.\n\n```c\ntypedef enum {\n    RESULT_SUCCESS = 0,\n    RESULT_FAILURE = -1,\n    RESULT_TIMEOUT = -2\n} FunctionResult;\n\nFunctionResult opResult = RESULT_TIMEOUT;\n\n#include <stdio.h>\n\nint main() {\n    printf(\"Result success: %d\\n\", RESULT_SUCCESS);\n    printf(\"Result failure: %d\\n\", RESULT_FAILURE);\n    printf(\"Result timeout: %d\\n\", RESULT_TIMEOUT);\n    printf(\"Operation result: %d\\n\", opResult);\n\n    return 0;\n}\n```\n\n### Example: Overlapping Values (Use with Caution)\n\nWhile possible, assigning the same value to different enum members can lead to ambiguity and is generally discouraged unless you have a very specific reason (e.g., aliasing for backward compatibility).\n\n```c\ntypedef enum {\n    STATE_OFF = 0,\n    STATE_DISABLED = 0, // Same value as STATE_OFF\n    STATE_ON = 1,\n    STATE_ACTIVE = 1    // Same value as STATE_ON\n} DeviceState;\n\nDeviceState currentDeviceState = STATE_OFF;\n\n#include <stdio.h>\n\nint main() {\n    printf(\"STATE_OFF: %d\\n\", STATE_OFF);\n    printf(\"STATE_DISABLED: %d\\n\", STATE_DISABLED);\n    printf(\"STATE_ON: %d\\n\", STATE_ON);\n    printf(\"STATE_ACTIVE: %d\\n\", STATE_ACTIVE);\n\n    // This comparison will be true\n    if (currentDeviceState == STATE_DISABLED) {\n        printf(\"Device is either OFF or DISABLED.\\n\");\n    }\n\n    return 0;\n}\n```\n**Caution:** While the compiler allows this, it can make code harder to read and debug, as `STATE_OFF` and `STATE_DISABLED` are indistinguishable at runtime.\n\n### Advantages:\n*   **Control:** Allows precise mapping of enum members to specific integer values.\n*   **Interoperability:** Essential when interfacing with external systems, hardware, or file formats that expect specific integer codes.\n*   **Flexibility:** Can create gaps in sequences or use non-sequential values.\n\n### Disadvantages:\n*   **Maintenance:** If external requirements change, you might need to update enum values, which could impact code relying on those specific values.\n*   **Potential for Errors:** Careless assignment can lead to duplicate values or unexpected sequences if not managed properly.\n\n### When to Use:\n*   When enum values need to correspond to specific, predefined integer constants (e.g., API error codes, network protocol messages, hardware register values).\n*   When you need to use enums as bit flags (see Method 9).\n*   When migrating from a system that uses specific integer codes for states or types.\n\n## Method 4: Enums in Function Parameters and Return Types\n\n**Personas:** 🏗️ Architecture Builder, 📚 Learning Explorer, 🔧 Problem Solver\n\nUsing enums in function signatures (parameters and return types) is a powerful way to improve code clarity, type safety, and maintainability. Instead of passing or returning raw integers that could represent anything, enums provide meaningful names for a fixed set of choices, making your API more expressive and less prone to errors.\n\n### How it Works\n\nWhen you define a function, you can specify an enum type for its parameters or its return value. The compiler will then enforce that only values of that enum type (or integers that can be implicitly converted to it) are passed or returned.\n\n```c\n#include <stdio.h>\n#include <stdbool.h> // For bool type\n\n// Define an enum for different logging levels\ntypedef enum {\n    LOG_LEVEL_DEBUG,\n    LOG_LEVEL_INFO,\n    LOG_LEVEL_WARN,\n    LOG_LEVEL_ERROR,\n    LOG_LEVEL_FATAL\n} LogLevel;\n\n// Define an enum for operation status\ntypedef enum {\n    OP_SUCCESS,\n    OP_FAILURE_INVALID_INPUT,\n    OP_FAILURE_NETWORK_ERROR,\n    OP_FAILURE_PERMISSION_DENIED\n} OperationStatus;\n\n// Function that takes an enum as a parameter\nvoid logMessage(LogLevel level, const char *message) {\n    switch (level) {\n        case LOG_LEVEL_DEBUG: printf(\"[DEBUG] \"); break;\n        case LOG_LEVEL_INFO:  printf(\"[INFO] \");  break;\n        case LOG_LEVEL_WARN:  printf(\"[WARN] \");  break;\n        case LOG_LEVEL_ERROR: printf(\"[ERROR] \"); break;\n        case LOG_LEVEL_FATAL: printf(\"[FATAL] \"); break;\n        default:              printf(\"[UNKNOWN] \"); break;\n    }\n    printf(\"%s\\n\", message);\n}\n\n// Function that returns an enum\nOperationStatus performDatabaseOperation(const char *query, bool adminAccess) {\n    if (query == NULL || strlen(query) == 0) {\n        return OP_FAILURE_INVALID_INPUT;\n    }\n    if (!adminAccess) {\n        return OP_FAILURE_PERMISSION_DENIED;\n    }\n    // Simulate network error sometimes\n    if (rand() % 3 == 0) { // 1 in 3 chance of network error\n        return OP_FAILURE_NETWORK_ERROR;\n    }\n    // Simulate success\n    return OP_SUCCESS;\n}\n\nint main() {\n    // Seed for rand()\n    srand(time(NULL));\n\n    logMessage(LOG_LEVEL_INFO, \"Application started.\");\n    logMessage(LOG_LEVEL_DEBUG, \"Processing user request.\");\n\n    OperationStatus status = performDatabaseOperation(\"SELECT * FROM users\", true);\n\n    if (status == OP_SUCCESS) {\n        logMessage(LOG_LEVEL_INFO, \"Database operation successful.\");\n    } else {\n        logMessage(LOG_LEVEL_ERROR, \"Database operation failed.\");\n        switch (status) {\n            case OP_FAILURE_INVALID_INPUT:\n                logMessage(LOG_LEVEL_ERROR, \"Reason: Invalid input provided.\");\n                break;\n            case OP_FAILURE_NETWORK_ERROR:\n                logMessage(LOG_LEVEL_ERROR, \"Reason: Network communication failed.\");\n                break;\n            case OP_FAILURE_PERMISSION_DENIED:\n                logMessage(LOG_LEVEL_ERROR, \"Reason: Insufficient permissions.\");\n                break;\n            default:\n                logMessage(LOG_LEVEL_ERROR, \"Reason: Unknown failure.\");\n                break;\n        }\n    }\n\n    logMessage(LOG_LEVEL_WARN, \"Disk space running low.\");\n    logMessage(LOG_LEVEL_FATAL, \"Critical system error, shutting down.\");\n\n    return 0;\n}\n```\n\n### Advantages:\n*   **Clarity and Readability:** Function signatures become self-documenting. `void process(int type);` is vague, but `void process(MessageType type);` is clear.\n*   **Type Safety:** The compiler can catch errors if an invalid integer is passed where an enum is expected (though implicit conversion from `int` to enum is allowed, it often triggers warnings).\n*   **Maintainability:** If the set of valid options changes, updating the enum definition automatically updates all code that uses it, reducing the chance of errors compared to magic numbers.\n*   **Self-Documentation:** Enums serve as a form of documentation for the valid inputs and outputs of a function.\n\n### Disadvantages:\n*   **Implicit Conversion:** C allows implicit conversion from `int` to enum, which can sometimes mask errors if an invalid integer value is accidentally passed. Modern compilers often warn about this.\n\n### When to Use:\n*   **Always** when a function expects one of a fixed set of discrete values.\n*   For defining API interfaces where clarity and type safety are paramount.\n*   When a function's return value indicates a specific outcome (e.g., success/failure, specific error codes).\n*   For configuration functions that accept predefined options.\n\n## Method 5: Iterating Through Enum Members (Workaround)\n\n**Personas:** 🔧 Problem Solver, 📚 Learning Explorer, 🎨 Output Focused\n\nUnlike some other languages, C enums are not collections and do not inherently support iteration. They are simply a set of named integer constants. However, there are common workarounds to simulate iteration, primarily by defining a \"count\" enumerator or by using an array of strings to represent the enum names.\n\n### Workaround 1: Using a \"Count\" Enumerator\n\nThis is the most common and simplest way to get the number of enum members and iterate through their integer values.\n\n```c\n#include <stdio.h>\n\ntypedef enum {\n    COLOR_RED,\n    COLOR_GREEN,\n    COLOR_BLUE,\n    COLOR_YELLOW,\n    NUM_COLORS // This enumerator is used to count the total number of colors\n} Color;\n\n// Array to store string representations of the enum members\n// The order MUST match the enum definition\nconst char* ColorNames[] = {\n    \"Red\",\n    \"Green\",\n    \"Blue\",\n    \"Yellow\"\n};\n\nint main() {\n    printf(\"--- Iterating through enum integer values ---\\n\");\n    for (int i = 0; i < NUM_COLORS; ++i) {\n        printf(\"Color %d: %d\\n\", i, (Color)i);\n    }\n\n    printf(\"\\n--- Iterating through enum names and values ---\\n\");\n    // Ensure the array size matches NUM_COLORS\n    if (sizeof(ColorNames) / sizeof(ColorNames[0]) == NUM_COLORS) {\n        for (int i = 0; i < NUM_COLORS; ++i) {\n            printf(\"Color %s has value %d\\n\", ColorNames[i], (Color)i);\n        }\n    } else {\n        fprintf(stderr, \"Error: ColorNames array size mismatch with NUM_COLORS!\\n\");\n    }\n\n    // Example of using a specific color\n    Color myColor = COLOR_GREEN;\n    printf(\"\\nMy chosen color is %s (value %d).\\n\", ColorNames[myColor], myColor);\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  `NUM_COLORS` automatically gets the value `4` (since `COLOR_YELLOW` is `3`).\n2.  The loop runs from `0` to `NUM_COLORS - 1`, covering all valid enum integer values.\n3.  We cast `i` to `Color` for type consistency, though it's not strictly necessary for printing.\n4.  The `ColorNames` array provides string representations. It's crucial to keep this array synchronized with the enum definition.\n\n### Workaround 2: Using a Sentinel Value (Less common for iteration)\n\nSimilar to the \"count\" enumerator, but the last value might be a specific sentinel rather than just a count.\n\n```c\n#include <stdio.h>\n\ntypedef enum {\n    COMMAND_NONE = -1, // Sentinel for no command\n    COMMAND_START,     // 0\n    COMMAND_STOP,      // 1\n    COMMAND_PAUSE,     // 2\n    COMMAND_RESET,     // 3\n    COMMAND_MAX        // 4 (used as upper bound for iteration)\n} SystemCommand;\n\nconst char* CommandStrings[] = {\n    \"Start\",\n    \"Stop\",\n    \"Pause\",\n    \"Reset\"\n};\n\nint main() {\n    printf(\"--- System Commands ---\\n\");\n    for (int i = 0; i < COMMAND_MAX; ++i) {\n        printf(\"Command %s has value %d\\n\", CommandStrings[i], (SystemCommand)i);\n    }\n\n    SystemCommand currentCommand = COMMAND_START;\n    printf(\"\\nCurrent command: %s (value %d)\\n\", CommandStrings[currentCommand], currentCommand);\n\n    return 0;\n}\n```\n\n### Advantages:\n*   **Provides String Representation:** Allows you to print meaningful names for enum values, which is great for logging, debugging, and user interfaces.\n*   **Simulated Iteration:** Enables looping through all defined enum values.\n*   **Flexibility:** You can define the string array separately, allowing for localization or different display formats.\n\n### Disadvantages:\n*   **Manual Synchronization:** The string array (e.g., `ColorNames`) must be manually kept in sync with the enum definition. If you add, remove, or reorder enum members, you *must* update the array, or you'll introduce bugs (e.g., out-of-bounds access, incorrect string mapping).\n*   **Boilerplate:** Requires extra code (the string array and the loop logic).\n*   **No Direct Language Support:** This is a pattern, not a built-in language feature.\n\n### When to Use:\n*   When you need to display the human-readable names of enum members (e.g., in UI, log messages, error reports).\n*   When you need to iterate through all possible enum values for testing, initialization, or processing.\n*   For debugging purposes, to easily see the meaning of an enum variable's value.\n*   **Caution:** Always use the `NUM_...` or `..._MAX` enumerator to define the loop bounds, and ensure your string array is correctly sized and ordered.\n\n## Method 6: Enums and `switch` Statements\n\n**Personas:** 🔧 Problem Solver, 📚 Learning Explorer, 🎨 Output Focused\n\nEnums are a natural fit for `switch` statements. They provide a clear, readable, and type-safe way to execute different blocks of code based on the value of an enumerated type. This combination is fundamental for implementing state machines, handling different command types, or processing various event types.\n\n### How it Works\n\nA `switch` statement evaluates an expression (in this case, an enum variable) and compares its value against a series of `case` labels. Each `case` label corresponds to an enum member.\n\n```c\n#include <stdio.h>\n#include <string.h> // For strcmp\n\n// Define an enum for different command types\ntypedef enum {\n    CMD_UNKNOWN,\n    CMD_START,\n    CMD_STOP,\n    CMD_PAUSE,\n    CMD_RESET,\n    CMD_STATUS\n} CommandType;\n\n// Function to parse a string into a CommandType enum\nCommandType parseCommand(const char *cmdStr) {\n    if (strcmp(cmdStr, \"start\") == 0) return CMD_START;\n    if (strcmp(cmdStr, \"stop\") == 0) return CMD_STOP;\n    if (strcmp(cmdStr, \"pause\") == 0) return CMD_PAUSE;\n    if (strcmp(cmdStr, \"reset\") == 0) return CMD_RESET;\n    if (strcmp(cmdStr, \"status\") == 0) return CMD_STATUS;\n    return CMD_UNKNOWN;\n}\n\n// Function to execute a command based on its enum type\nvoid executeCommand(CommandType cmd) {\n    switch (cmd) {\n        case CMD_START:\n            printf(\"Executing START command: Initializing system...\\n\");\n            break;\n        case CMD_STOP:\n            printf(\"Executing STOP command: Shutting down system...\\n\");\n            break;\n        case CMD_PAUSE:\n            printf(\"Executing PAUSE command: Halting operations...\\n\");\n            break;\n        case CMD_RESET:\n            printf(\"Executing RESET command: Reinitializing all modules...\\n\");\n            break;\n        case CMD_STATUS:\n            printf(\"Executing STATUS command: Checking system health...\\n\");\n            break;\n        case CMD_UNKNOWN: // Handle unknown commands explicitly\n        default:          // Default case for any unhandled enum values (good practice)\n            printf(\"Unknown or unhandled command received.\\n\");\n            break;\n    }\n}\n\nint main() {\n    executeCommand(CMD_START);\n    executeCommand(CMD_PAUSE);\n    executeCommand(parseCommand(\"status\"));\n    executeCommand(parseCommand(\"invalid_command\"));\n    executeCommand(CMD_STOP);\n\n    return 0;\n}\n```\n\n### Advantages:\n*   **Readability:** Clearly maps specific enum values to specific actions.\n*   **Maintainability:** If you add a new enum member, the compiler will often warn you if you don't add a corresponding `case` to a `switch` statement (especially if you don't have a `default` case, or if you use `-Werror=switch-enum` with GCC/Clang). This helps prevent unhandled states.\n*   **Efficiency:** `switch` statements are often optimized by compilers into jump tables, which can be very efficient for many cases.\n*   **Type Safety:** Ensures that you are handling specific, named states rather than arbitrary integers.\n\n### Disadvantages:\n*   **Boilerplate:** Can become lengthy if there are many enum members, leading to many `case` blocks.\n*   **Synchronization:** If enum members are added or removed, all `switch` statements using that enum need to be reviewed and updated. The compiler warnings (mentioned above) help mitigate this.\n\n### Best Practices with `switch` and Enums:\n1.  **Always include a `default` case:** This handles unexpected or future enum values gracefully.\n2.  **Consider omitting `default` with compiler warnings:** If you want the compiler to warn you about unhandled enum members, you can omit the `default` case and compile with flags like `-Wall -Werror=switch-enum` (GCC/Clang). This forces you to explicitly handle every enum member, which is excellent for robustness.\n3.  **Group related cases:** If multiple enum members should trigger the same action, you can stack `case` labels.\n\n    ```c\n    typedef enum {\n        EVENT_KEY_PRESS,\n        EVENT_MOUSE_CLICK,\n        EVENT_TOUCH_TAP,\n        EVENT_NETWORK_ERROR,\n        EVENT_DISK_FULL\n    } EventType;\n\n    void handleEvent(EventType event) {\n        switch (event) {\n            case EVENT_KEY_PRESS:\n            case EVENT_MOUSE_CLICK:\n            case EVENT_TOUCH_TAP:\n                printf(\"User input event detected.\\n\");\n                break;\n            case EVENT_NETWORK_ERROR:\n            case EVENT_DISK_FULL:\n                printf(\"System error event detected.\\n\");\n                break;\n            default:\n                printf(\"Unhandled event.\\n\");\n                break;\n        }\n    }\n    ```\n\n### When to Use:\n*   When implementing state machines where different states require different logic.\n*   For command dispatchers or event handlers.\n*   When processing different types of messages or data packets.\n*   Anytime you need to perform distinct actions based on a fixed set of named choices.\n\n## Method 7: Enums in Structures and Unions\n\n**Personas:** 🏗️ Architecture Builder, 📚 Learning Explorer, 🔧 Problem Solver\n\nEnums are frequently used as members within `struct` and `union` types. This allows you to define data structures that encapsulate both data and its associated state or type, leading to more organized and type-safe code.\n\n### Enums in Structures\n\nUsing an enum within a `struct` is common for representing the state, type, or configuration of the structure's data.\n\n```c\n#include <stdio.h>\n#include <string.h> // For strcpy\n\n// Define an enum for different message types\ntypedef enum {\n    MSG_TYPE_TEXT,\n    MSG_TYPE_IMAGE,\n    MSG_TYPE_AUDIO\n} MessageType;\n\n// Define a structure to represent a message\ntypedef struct {\n    MessageType type;\n    int id;\n    char timestamp[32]; // Example: \"2025-01-15 10:30:00\"\n    union {\n        char textContent[256];\n        char imageUrl[256];\n        char audioFileName[256];\n    } content; // Union to hold type-specific content\n} Message;\n\n// Function to print message details\nvoid printMessage(const Message *msg) {\n    printf(\"Message ID: %d\\n\", msg->id);\n    printf(\"Timestamp: %s\\n\", msg->timestamp);\n    printf(\"Type: \");\n    switch (msg->type) {\n        case MSG_TYPE_TEXT:\n            printf(\"TEXT\\n\");\n            printf(\"Content: \\\"%s\\\"\\n\", msg->content.textContent);\n            break;\n        case MSG_TYPE_IMAGE:\n            printf(\"IMAGE\\n\");\n            printf(\"URL: \\\"%s\\\"\\n\", msg->content.imageUrl);\n            break;\n        case MSG_TYPE_AUDIO:\n            printf(\"AUDIO\\n\");\n            printf(\"File: \\\"%s\\\"\\n\", msg->content.audioFileName);\n            break;\n        default:\n            printf(\"UNKNOWN\\n\");\n            break;\n    }\n    printf(\"--------------------\\n\");\n}\n\nint main() {\n    // Create a text message\n    Message textMsg;\n    textMsg.type = MSG_TYPE_TEXT;\n    textMsg.id = 101;\n    strcpy(textMsg.timestamp, \"2025-03-10 14:00:00\");\n    strcpy(textMsg.content.textContent, \"Hello, this is a text message.\");\n\n    // Create an image message\n    Message imageMsg;\n    imageMsg.type = MSG_TYPE_IMAGE;\n    imageMsg.id = 102;\n    strcpy(imageMsg.timestamp, \"2025-03-10 14:05:30\");\n    strcpy(imageMsg.content.imageUrl, \"https://example.com/image.jpg\");\n\n    // Create an audio message\n    Message audioMsg;\n    audioMsg.type = MSG_TYPE_AUDIO;\n    audioMsg.id = 103;\n    strcpy(audioMsg.timestamp, \"2025-03-10 14:10:15\");\n    strcpy(audioMsg.content.audioFileName, \"audio_clip.mp3\");\n\n    printMessage(&textMsg);\n    printMessage(&imageMsg);\n    printMessage(&audioMsg);\n\n    return 0;\n}\n```\n\nIn this example, `MessageType` acts as a **discriminator** for the `union` within the `Message` struct. The `type` enum member tells us which member of the `content` union is currently valid.\n\n### Enums in Unions (Less Common Directly)\n\nWhile an enum can be a member of a union, it's less common for an enum *itself* to be the primary element of a union. More often, an enum is used *with* a union, as shown above, to indicate which member of the union is active.\n\nA union's purpose is to store different types of data in the *same memory location*. If you put an enum directly into a union, it just means that memory location can hold either the enum's underlying integer value or some other type.\n\n```c\n#include <stdio.h>\n\ntypedef enum {\n    UNIT_METERS,\n    UNIT_FEET,\n    UNIT_KILOGRAMS,\n    UNIT_POUNDS\n} UnitType;\n\ntypedef union {\n    UnitType type; // The enum itself\n    int raw_value; // The underlying integer value\n    float float_value;\n} MeasurementData;\n\nint main() {\n    MeasurementData data;\n\n    data.type = UNIT_METERS;\n    printf(\"Unit type (enum): %d\\n\", data.type); // Access as enum\n    printf(\"Unit type (raw int): %d\\n\", data.raw_value); // Access as int (same memory)\n\n    data.float_value = 10.5f;\n    printf(\"Float value: %.2f\\n\", data.float_value);\n    // WARNING: Accessing data.type or data.raw_value now is undefined behavior\n    // because float_value was the last one written.\n    // This demonstrates why enums are usually *with* unions, not the primary union member.\n\n    return 0;\n}\n```\nThis example highlights why using an enum *as a member* of a union is generally not the primary use case. The enum's value would be overwritten if another union member is assigned. The previous `Message` struct example, where the enum *discriminates* the union, is the more practical and common pattern.\n\n### Advantages:\n*   **Data Cohesion:** Groups related data and its state/type together in a single, logical unit.\n*   **Type Safety:** Ensures that the state or type information is represented by a predefined set of named constants.\n*   **Readability:** Makes code easier to understand by clearly indicating the purpose of a structure member.\n*   **Discriminator Pattern:** Essential for implementing tagged unions (or variant types) where an enum indicates which member of a union is currently active, preventing misinterpretation of data.\n\n### Disadvantages:\n*   None significant when used appropriately. Misusing enums with unions (as shown in the second example) can lead to undefined behavior if not careful.\n\n### When to Use:\n*   **Always** when a structure needs to represent different states or types of an object.\n*   When creating flexible data structures that can hold different kinds of data, where an enum acts as a tag to indicate the active data type (e.g., AST nodes, message packets, event objects).\n*   For configuration structures where certain fields are only relevant for specific modes or types.\n\n## Method 8: Forward Declaring Enums (Limited Use)\n\n**Personas:** 🏗️ Architecture Builder, ⚡ Legacy Maintainer\n\nForward declarations allow you to declare the existence of a type without providing its full definition. This is crucial for resolving circular dependencies between structures. For enums, forward declarations are less common and have specific limitations, primarily because the compiler needs to know the underlying size of the enum type, which is determined by its enumerators.\n\n### C Standard Behavior\n\nIn C, an `enum` type's underlying type is an integer type large enough to hold all its enumerator values. The C standard (C99 onwards) allows for an *incomplete* enum type declaration, but it's very restricted.\n\nYou can forward declare an enum *tag* like this:\n\n```c\nenum MyEnum; // This declares 'enum MyEnum' as an incomplete type\n```\n\nHowever, you **cannot** declare a variable of an incomplete enum type, nor can you use it as a function parameter or return type, or as a member of a struct, until its full definition is available. The compiler needs to know its size.\n\n```c\n// In header.h\nenum MyEnum; // Incomplete declaration\n\n// In source.c (or later in header.h)\nenum MyEnum {\n    VALUE_A,\n    VALUE_B\n};\n\n// This is valid after the full definition\nenum MyEnum myVar;\n```\n\n### The Primary Use Case: Pointers to Incomplete Enum Types (Rare)\n\nThe only real scenario where an incomplete enum type might be useful is if you want to declare a *pointer* to an enum type before its full definition. This is extremely rare because enums are typically passed by value, and their size is usually small (like `int`).\n\n```c\n// In header.h\nenum MyEnum; // Incomplete type declaration\n\n// Function prototype using a pointer to the incomplete enum type\nvoid processEnumPointer(enum MyEnum *ptr);\n\n// In source.c\n#include \"header.h\"\n#include <stdio.h>\n\n// Full definition of the enum\nenum MyEnum {\n    ENUM_ONE,\n    ENUM_TWO\n};\n\nvoid processEnumPointer(enum MyEnum *ptr) {\n    if (ptr != NULL) {\n        printf(\"Processing enum value: %d\\n\", *ptr);\n    } else {\n        printf(\"Null enum pointer.\\n\");\n    }\n}\n\nint main() {\n    enum MyEnum val = ENUM_ONE;\n    processEnumPointer(&val);\n\n    enum MyEnum *null_ptr = NULL;\n    processEnumPointer(null_ptr);\n\n    return 0;\n}\n```\n\nEven in this case, it's often simpler and clearer to just include the full enum definition in the header file where it's needed, as enums are typically small and don't cause circular dependency issues like structures often do.\n\n### Why it's not common for enums:\n*   **Size Requirement:** The compiler needs to know the size of the enum to allocate memory for variables, function parameters, or struct members. This size is determined by the range of its enumerators.\n*   **No Circular Dependencies:** Unlike structs, enums rarely create circular dependency problems that necessitate forward declarations.\n*   **`typedef` Impact:** If you use `typedef enum { ... } MyEnum;`, the `MyEnum` becomes a complete type immediately, and forward declaring `enum MyEnum;` then `typedef enum MyEnum { ... } MyEnum;` can lead to issues or be redundant.\n\n### Advantages:\n*   **Theoretical:** Allows for declaring pointers to enum types before their full definition, potentially breaking rare circular dependencies (though more common for structs).\n\n### Disadvantages:\n*   **Limited Utility:** Very few practical scenarios where it's genuinely needed for enums.\n*   **Confusion:** Can be confusing for developers unfamiliar with its specific limitations.\n*   **Compiler Dependence:** Behavior might vary slightly with older C standards or compilers regarding incomplete enum types.\n\n### When to Use:\n*   **Almost never** for typical enum usage.\n*   Only in extremely rare and advanced scenarios where you need to declare a pointer to an enum type before its full definition, and you cannot simply include the full definition. This is far more common for `struct` types.\n*   For `typedef`'d enums, a forward declaration of the `enum` tag itself is usually not necessary or helpful.\n\n## Method 9: Using Enums for Bit Flags\n\n**Personas:** 🔧 Problem Solver, 🏗️ Architecture Builder, ⚡ Legacy Maintainer\n\nEnums are excellent for defining bit flags, which are individual bits within an integer that represent distinct, independent options or states. This technique is highly efficient for storing multiple boolean-like properties in a single variable and is common in system programming, device drivers, and configuration settings.\n\n### How it Works\n\nEach enum member is assigned a power of 2 (1, 2, 4, 8, 16, etc.), which corresponds to a unique bit position. Bitwise operators (`|` for OR, `&` for AND, `~` for NOT, `^` for XOR) are then used to manipulate these flags.\n\n```c\n#include <stdio.h>\n\n// Define an enum for file access permissions using bit flags\ntypedef enum {\n    PERMISSION_NONE  = 0,      // 0000 0000\n    PERMISSION_READ  = 1 << 0, // 0000 0001 (1)\n    PERMISSION_WRITE = 1 << 1, // 0000 0010 (2)\n    PERMISSION_EXEC  = 1 << 2, // 0000 0100 (4)\n    PERMISSION_DELETE = 1 << 3 // 0000 1000 (8)\n} FilePermissions;\n\n// Function to check and print permissions\nvoid checkPermissions(FilePermissions currentPermissions) {\n    printf(\"Current Permissions (decimal): %d\\n\", currentPermissions);\n    printf(\"Current Permissions (binary): \");\n    for (int i = 7; i >= 0; --i) { // Print 8 bits for demonstration\n        printf(\"%d\", (currentPermissions >> i) & 1);\n    }\n    printf(\"\\n\");\n\n    if (currentPermissions & PERMISSION_READ) {\n        printf(\"  - Read access granted.\\n\");\n    }\n    if (currentPermissions & PERMISSION_WRITE) {\n        printf(\"  - Write access granted.\\n\");\n    }\n    if (currentPermissions & PERMISSION_EXEC) {\n        printf(\"  - Execute access granted.\\n\");\n    }\n    if (currentPermissions & PERMISSION_DELETE) {\n        printf(\"  - Delete access granted.\\n\");\n    }\n    if (currentPermissions == PERMISSION_NONE) {\n        printf(\"  - No permissions granted.\\n\");\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    FilePermissions userPermissions = PERMISSION_NONE;\n\n    printf(\"--- Initial State ---\\n\");\n    checkPermissions(userPermissions);\n\n    // Grant read and write permissions\n    userPermissions |= PERMISSION_READ;\n    userPermissions |= PERMISSION_WRITE;\n    printf(\"--- After granting Read and Write ---\\n\");\n    checkPermissions(userPermissions);\n\n    // Check if write permission is present\n    if (userPermissions & PERMISSION_WRITE) {\n        printf(\"User has write permission.\\n\\n\");\n    }\n\n    // Grant execute permission\n    userPermissions |= PERMISSION_EXEC;\n    printf(\"--- After granting Execute ---\\n\");\n    checkPermissions(userPermissions);\n\n    // Revoke write permission\n    userPermissions &= ~PERMISSION_WRITE;\n    printf(\"--- After revoking Write ---\\n\");\n    checkPermissions(userPermissions);\n\n    // Grant all permissions\n    userPermissions = PERMISSION_READ | PERMISSION_WRITE | PERMISSION_EXEC | PERMISSION_DELETE;\n    printf(\"--- After granting ALL permissions ---\\n\");\n    checkPermissions(userPermissions);\n\n    // Clear all permissions\n    userPermissions = PERMISSION_NONE;\n    printf(\"--- After clearing all permissions ---\\n\");\n    checkPermissions(userPermissions);\n\n    return 0;\n}\n```\n\n### Key Bitwise Operations:\n*   **Setting a flag:** `flags |= FLAG_NAME;` (OR with the flag)\n*   **Clearing a flag:** `flags &= ~FLAG_NAME;` (AND with the bitwise NOT of the flag)\n*   **Toggling a flag:** `flags ^= FLAG_NAME;` (XOR with the flag)\n*   **Checking if a flag is set:** `if (flags & FLAG_NAME) { ... }` (AND with the flag)\n*   **Checking if multiple flags are set:** `if ((flags & (FLAG1 | FLAG2)) == (FLAG1 | FLAG2)) { ... }`\n*   **Checking if ANY of multiple flags are set:** `if (",
  "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/question_1102542_how-can-i-define-an-enumerated-type-enum-in-c.json",
  "generation_stats": {},
  "workflow_version": "deepv_stackoverflow_v1.0"
}