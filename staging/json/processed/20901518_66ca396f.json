{
  "metadata": {
    "title": "How to Set Global nofile Limits to Prevent 'Too Many Open Files' Errors",
    "slug": "how-to-set-global-nofile-limit-linux",
    "uniqueId": "66ca396f",
    "category": "system-devops",
    "subcategory": "linux",
    "description": "Learn how to configure global nofile limits in Linux to resolve 'Too Many Open Files' errors, especially with process managers like Supervisor or systemd.",
    "tags": [
      "linux",
      "ubuntu",
      "nofile",
      "ulimit",
      "sysctl",
      "supervisor",
      "systemd"
    ],
    "difficulty": "intermediate",
    "readTime": 8,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20901518",
    "votes": 32
  },
  "content": "# How to Set Global nofile Limits to Prevent \"Too Many Open Files\" Errors\n\nWhen running high-concurrency applications like websocket services on Linux, you might encounter a \"Too Many Open Files\" error, even after seemingly configuring system-wide limits. This often happens because process managers (like Supervisor or systemd) or the system's initialization process (like Upstart in older Ubuntu versions) might not inherit the expected `nofile` limits. This guide will walk you through various methods to correctly set global `nofile` limits and troubleshoot common pitfalls.\n\n## Quick Answer\n\nTo set a global `nofile` limit, you typically need to configure `/etc/security/limits.conf` or files in `/etc/security/limits.d/` for user-specific limits, and `/etc/sysctl.conf` for system-wide file descriptor limits. Crucially, ensure that process managers like `supervisord` or `systemd` are aware of these new limits, often requiring a restart of the service or the manager itself.\n\nFor a quick system-wide file descriptor limit (not `nofile` for processes, but total system files):\n\n```bash\n# Edit /etc/sysctl.conf\nsudo nano /etc/sysctl.conf\n```\nAdd or modify the line:\n```config\nfs.file-max = 100000\n```\nApply changes:\n```bash\nsudo sysctl -p\n```\n\nFor process-specific `nofile` limits (which is what \"too many open files\" usually refers to):\n\n```bash\n# Edit /etc/security/limits.conf or create a file in /etc/security/limits.d/\nsudo nano /etc/security/limits.d/custom.conf\n```\nAdd these lines (replace `*` with a specific user if needed):\n```config\n*    soft    nofile    65536\n*    hard    nofile    65536\n```\n**Reboot the system** for these changes to take full effect, especially for services started at boot.\n\n## Choose Your Method\n\nThe best approach depends on your Linux distribution, initialization system (systemd, Upstart), and whether you're dealing with a specific user, a process manager, or a global system limit.\n\n```mermaid\ngraph TD\n    A[Start: Encounter \"Too Many Open Files\" error] --> B{Is the issue with a specific service/user or system-wide?};\n    B -- Specific Service/User --> C{Is the service managed by systemd?};\n    C -- Yes --> D[Use LimitNOFILE in systemd service file];\n    C -- No, e.g., Supervisor --> E{Is the process manager inheriting limits?};\n    E -- No --> F[Restart process manager (e.g., supervisord) or configure minfds];\n    B -- System-wide --> G{Are you on an older Ubuntu/Upstart system?};\n    G -- Yes --> H[Check /etc/security/limits.conf and Upstart scripts];\n    G -- No, modern Linux --> I[Configure /etc/security/limits.conf or limits.d/];\n    I --> J[Also set fs.file-max in /etc/sysctl.conf for total system files];\n    D --> K[Reboot or restart service];\n    F --> K;\n    H --> K;\n    J --> K;\n    K --> L[Verify limits with ulimit -n and /proc/<pid>/limits];\n    L --> M[End: Problem Solved];\n```\n\n## Table of Contents\n1.  Quick Answer\n2.  Choose Your Method\n3.  Configuring `nofile` Limits via `/etc/security/limits.conf`\n4.  Setting System-wide File Descriptor Limits with `sysctl`\n5.  Addressing Supervisor-Managed Services\n6.  Configuring `systemd` Services\n7.  Temporary `ulimit` Changes\n8.  Common Problems & Solutions\n9.  Verifying Current Limits\n10. Summary\n\n## Configuring `nofile` Limits via `/etc/security/limits.conf`\n\nThis is the most common way to set `nofile` limits for users and groups. These limits are applied at login time for interactive sessions. For services started at boot, the behavior can be more complex.\n\n1.  **Edit `limits.conf` or create a new file in `limits.d/`**:\n    It's often recommended to create a new file in `/etc/security/limits.d/` (e.g., `custom.conf`) to avoid conflicts with other packages and make your changes easier to manage.\n\n    ```bash\n    sudo nano /etc/security/limits.d/custom.conf\n    ```\n\n2.  **Add `nofile` entries**:\n    The `*` wildcard applies to all users. You can replace `*` with a specific username or group name (e.g., `@mygroup`). `soft` is the current limit, `hard` is the maximum a user can set their `soft` limit to.\n\n    ```config\n    # /etc/security/limits.d/custom.conf\n    *    soft    nofile    65536\n    *    hard    nofile    65536\n    ```\n    A common value is 65536, but you can go higher (e.g., 550000 as suggested in one answer).\n\n    **Important Note**: If `supervisord` or other services run as `root`, and you're on a system where `*` doesn't apply to `root` (like some Ubuntu versions), you might need to explicitly add `root` entries:\n    ```config\n    root soft nofile 65536\n    root hard nofile 65536\n    ```\n\n3.  **Reboot the server**:\n    For these changes to be fully effective, especially for services started at boot, a system reboot is often necessary. Simply logging out and back in will apply them to your shell session.\n\n    ```bash\n    sudo reboot\n    ```\n\n## Setting System-wide File Descriptor Limits with `sysctl`\n\nWhile `limits.conf` controls the maximum number of open files *per process*, `fs.file-max` in `sysctl.conf` controls the *total number of file handles the kernel can allocate across all processes*. This is a crucial global limit.\n\n1.  **Edit `/etc/sysctl.conf`**:\n\n    ```bash\n    sudo nano /etc/sysctl.conf\n    ```\n\n2.  **Add or modify `fs.file-max`**:\n    Set this to a value higher than the sum of all `hard nofile` limits you expect across your system.\n\n    ```config\n    # /etc/sysctl.conf\n    fs.file-max = 1000000 # Example: 1 million total file descriptors\n    ```\n\n3.  **Apply changes**:\n    You can apply the changes immediately without rebooting.\n\n    ```bash\n    sudo sysctl -p\n    ```\n    To verify the change:\n    ```bash\n    cat /proc/sys/fs/file-max\n    ```\n\n## Addressing Supervisor-Managed Services\n\nSupervisor often inherits the `nofile` limits of the `supervisord` process itself. If `supervisord` was started with low limits (e.g., at boot before `limits.conf` was fully applied), its child processes will also have those low limits.\n\n1.  **Restart `supervisord`**:\n    After making changes to `limits.conf` or `sysctl.conf`, the most reliable way to ensure Supervisor picks up the new limits is to restart the `supervisord` daemon itself.\n\n    ```bash\n    sudo systemctl restart supervisord # For systemd-based systems\n    # Or for older systems:\n    sudo service supervisord restart\n    ```\n    Then, restart your managed services:\n    ```bash\n    sudo supervisorctl restart all\n    ```\n\n2.  **Configure `minfds` in Supervisor**:\n    Supervisor has a specific setting, `minfds`, that can directly control the file descriptor limit for `supervisord` and its children. This is often the most robust solution for Supervisor.\n\n    Edit your `supervisord.conf` (e.g., `/etc/supervisor/supervisord.conf`):\n\n    ```config\n    # /etc/supervisor/supervisord.conf\n    [supervisord]\n    minfds = 65536 # Set your desired limit here\n    ```\n    After changing this, restart `supervisord`.\n\n## Configuring `systemd` Services\n\nFor services managed by `systemd`, you can set `nofile` limits directly within the service unit file. This is the recommended approach for modern Linux distributions.\n\n1.  **Edit the service unit file**:\n    Locate your service file (e.g., `/etc/systemd/system/your-service.service`).\n\n    ```bash\n    sudo systemctl edit --full your-service.service\n    ```\n\n2.  **Add `LimitNOFILE`**:\n    Under the `[Service]` section, add `LimitNOFILE`.\n\n    ```config\n    # /etc/systemd/system/your-service.service\n    [Service]\n    # ... other service configurations ...\n    LimitNOFILE=65536\n    ```\n\n3.  **Reload `systemd` and restart the service**:\n\n    ```bash\n    sudo systemctl daemon-reload\n    sudo systemctl restart your-service.service\n    ```\n\n## Temporary `ulimit` Changes\n\nYou can temporarily change the `nofile` limit for your current shell session using the `ulimit` command. This is useful for testing but will not persist across reboots or for services started by other means.\n\n```bash\nulimit -n 2048 # Sets soft and hard nofile limits to 2048 for the current shell\n```\nTo set only the soft limit:\n```bash\nulimit -Sn 2048\n```\nTo set only the hard limit:\n```bash\nulimit -Hn 2048\n```\nRemember, you cannot set a soft limit higher than the hard limit, and you cannot set a hard limit higher than what's allowed by `/etc/security/limits.conf` for your user.\n\n## Common Problems & Solutions\n\n*   **Changes not taking effect after reboot**:\n    *   **Check `limits.d/`**: Other files in `/etc/security/limits.d/` might be overriding your settings. Ensure your `custom.conf` has higher precedence or explicitly set limits for the user/group running the service.\n    *   **Root user**: If your service runs as `root`, ensure you've explicitly set `root` limits in `limits.conf` if `*` doesn't apply to `root` on your system.\n    *   **PAM configuration**: Ensure that `pam_limits.so` is correctly included in your PAM configuration (e.g., `/etc/pam.d/common-session` or `/etc/pam.d/login`). This is usually configured by default.\n    *   **Upstart (older Ubuntu)**: For older Ubuntu versions using Upstart, the `limits.conf` might not be applied to services started by Upstart. You might need to modify individual Upstart job files (e.g., `/etc/init/your-service.conf`) to include `limit nofile 65536 65536`.\n\n*   **Supervisor children still have low limits**:\n    *   **Restart `supervisord`**: As mentioned, restarting the `supervisord` daemon itself is critical.\n    *   **`minfds` setting**: Use the `minfds` setting in `supervisord.conf` for explicit control.\n\n*   **\"Too many open files\" still occurs after increasing `nofile`**:\n    *   **`fs.file-max`**: Ensure the system-wide `fs.file-max` is also sufficiently high.\n    *   **Actual culprit**: The error might be legitimate, and your application is simply leaking file descriptors. Use tools like `lsof -p <PID>` to inspect what files/sockets a process has open.\n    *   **Port range**: For network services, ensure `net.ipv4.ip_local_port_range` in `sysctl.conf` is set appropriately to allow enough ephemeral ports.\n\n## Verifying Current Limits\n\nIt's essential to verify that your changes have been applied correctly.\n\n1.  **Check current shell session `nofile` limits**:\n\n    ```bash\n    ulimit -n\n    ```\n\n2.  **Check a running process's `nofile` limits**:\n    Replace `<PID>` with the actual Process ID of your service.\n\n    ```bash\n    cat /proc/<PID>/limits\n    ```\n    Look for the \"Max open files\" line.\n\n3.  **Check system-wide file descriptor limit**:\n\n    ```bash\n    cat /proc/sys/fs/file-max\n    # Or\n    sysctl -a | grep file-max\n    ```\n\n![Verification Steps Diagram](/images/66ca396f-1.webp)\n\n## Summary\n\nResolving \"Too Many Open Files\" errors requires a multi-pronged approach, often involving both per-process `nofile` limits and system-wide file descriptor limits. The key steps include:\n\n*   **Configure `/etc/security/limits.conf` or `limits.d/`**: Set `soft` and `hard` `nofile` limits for the relevant users or globally.\n*   **Set `fs.file-max` in `/etc/sysctl.conf`**: Ensure the kernel can handle the total number of file descriptors.\n*   **Address process managers**: For `supervisord`, restart the daemon or use the `minfds` setting. For `systemd`, use `LimitNOFILE` in the service unit file.\n*   **Reboot or restart services**: Changes often require a full system reboot or at least a restart of the affected services and their managers.\n*   **Verify**: Always confirm your changes using `ulimit -n` and `cat /proc/<PID>/limits`.\n\nBy systematically applying these configurations, you can effectively prevent and resolve \"Too Many Open Files\" errors in your Linux environment.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A clear, step-by-step flowchart illustrating the verification process for `nofile` limits. Start with \"Start Verification\". Branch to \"Check current shell ulimit -n\". Then \"Find Service PID (e.g., ps aux | grep service)\". Then \"Check process limits (cat /proc/<PID>/limits)\". Then \"Check system-wide fs.file-max (cat /proc/sys/fs/file-max)\". End with \"Limits Verified\". Use distinct nodes for each step and clear arrows.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A clear, step-by-step flowchart illustrating the verification process for `nofile` limits. Start with \"Start Verification\". Branch to \"Check current shell ulimit -n\". Then \"Find Service PID (e.g., ps aux | grep service)\". Then \"Check process limits (cat /proc/<PID>/limits)\". Then \"Check system-wide fs.file-max (cat /proc/sys/fs/file-max)\". End with \"Limits Verified\". Use distinct nodes for each step and clear arrows."
      },
      "titles": {
        "PLACEHOLDER-1": "Verification Steps Diagram"
      },
      "count": 1,
      "placeholder_list": [
        [
          "Verification Steps Diagram",
          "1"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "66ca396f-1.webp",
        "title": "Verification Steps Diagram",
        "path": "staging/images/66ca396f-1.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20901518.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:59:09.522533",
    "word_count": 1654,
    "code_blocks": 52
  }
}