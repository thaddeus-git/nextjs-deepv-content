{
  "metadata": {
    "title": "Fix TypeError: unsupported operand type(s) for +: 'int' and 'str' in Python",
    "slug": "fix-typeerror-unsupported-operand-types-for-int-and-str-in-python",
    "uniqueId": "55c324dd",
    "category": "programming-languages",
    "subcategory": "python",
    "description": "Learn how to resolve the 'unsupported operand type(s) for +: 'int' and 'str'' TypeError in Python by correctly converting types or using string formatting.",
    "tags": [
      "python",
      "typeerror",
      "string-concatenation",
      "type-conversion",
      "python-3.x"
    ],
    "difficulty": "beginner",
    "readTime": 5,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20441035",
    "votes": 58
  },
  "content": "# Fix TypeError: unsupported operand type(s) for +: 'int' and 'str' in Python\n\nWhen working with Python, a common `TypeError` occurs when you try to combine (concatenate) an integer (`int`) directly with a string (`str`) using the `+` operator. Python's `+` operator is overloaded: it performs arithmetic addition for numbers and string concatenation for strings, but it cannot implicitly convert an integer to a string for concatenation.\n\n## Quick Answer\n\nTo fix the `TypeError: unsupported operand type(s) for +: 'int' and 'str'`, you need to explicitly convert the integer to a string before concatenating it. The most common ways are using `str()`, f-strings (Python 3.6+), or the `.format()` method.\n\n**Example:**\n\n```python\n# Original problematic code\n# print(numlist.pop(2) + \" has been removed\")\n\n# Solution 1: Explicitly convert int to str\nprint(str(numlist.pop(2)) + \" has been removed\")\n\n# Solution 2: Use f-string (Python 3.6+)\n# num_removed = numlist.pop(2)\n# print(f\"{num_removed} has been removed\")\n\n# Solution 3: Use .format() method\n# print(\"{} has been removed\".format(numlist.pop(2)))\n\n# Solution 4: Use comma for print (auto-converts to string and adds space)\n# print(numlist.pop(2), \"has been removed\")\n```\n\n## Common Issues & Solutions\n\nThe `TypeError: unsupported operand type(s) for +: 'int' and 'str'` typically arises when you attempt to use the `+` operator to join a number (like an `int` or `float`) with a string. Python requires both operands of the `+` operator to be of compatible types for concatenation (i.e., both strings).\n\nLet's break down the common scenarios and their solutions.\n\n### Scenario 1: Direct Concatenation with `+`\n\nThis is the most frequent cause, as seen in the original problem. You have an integer value and you want to embed it within a string message.\n\n**Problematic Code:**\n\n```python\nnum = 10\nmessage = \"The number is \" + num # This will raise a TypeError\n```\n\n**Solution 1: Explicit Type Conversion with `str()`**\n\nThe most straightforward fix is to convert the integer to a string using the `str()` function before concatenation.\n\n```python\nnum = 10\nmessage = \"The number is \" + str(num)\nprint(message)\n```\n\n**Solution 2: Using f-strings (Formatted String Literals - Python 3.6+)**\n\nF-strings provide a concise and readable way to embed expressions inside string literals. This is often the preferred method in modern Python.\n\n```python\nnum = 10\nmessage = f\"The number is {num}\"\nprint(message)\n```\n\n**Solution 3: Using the `.format()` Method**\n\nThe `str.format()` method allows you to build strings by replacing placeholders with values.\n\n```python\nnum = 10\nmessage = \"The number is {}\".format(num)\nprint(message)\n```\n\n**Solution 4: Using `print()` with Commas**\n\nThe `print()` function can take multiple arguments separated by commas. When you do this, `print()` automatically converts each argument to a string and separates them with a space by default. This is useful if you just want to print values, but not to create a single string variable.\n\n```python\nnum = 10\nprint(\"The number is\", num) # Output: The number is 10\n```\n\n### Scenario 2: Combining List Elements with Strings\n\nIn the original question, `numlist.pop(2)` returns an integer, which is then concatenated with a string.\n\n**Problematic Code from Question:**\n\n```python\nnum1 = int(input(\"What is your first number? \"))\nnum2 = int(input(\"What is your second number? \"))\nnum3 = int(input(\"What is your third number? \"))\nnumlist = [num1, num2, num3]\n\nprint(numlist.pop(2) + \" has been removed\") # TypeError here\n```\n\n**Solution 1: `str()` conversion**\n\n```python\nnum1 = int(input(\"What is your first number? \"))\nnum2 = int(input(\"What is your second number? \"))\nnum3 = int(input(\"What is your third number? \"))\nnumlist = [num1, num2, num3]\n\nprint(str(numlist.pop(2)) + \" has been removed\")\n# Example output: 3 has been removed\n```\n\n**Solution 2: f-string (Python 3.6+)**\n\n```python\nnum1 = int(input(\"What is your first number? \"))\nnum2 = int(input(\"What is your second number? \"))\nnum3 = int(input(\"What is your third number? \"))\nnumlist = [num1, num2, num3]\n\nremoved_num = numlist.pop(2)\nprint(f\"{removed_num} has been removed\")\n# Example output: 3 has been removed\n```\n\n**Solution 3: `.format()` method**\n\n```python\nnum1 = int(input(\"What is your first number? \"))\nnum2 = int(input(\"What is your second number? \"))\nnum3 = int(input(\"What is your third number? \"))\nnumlist = [num1, num2, num3]\n\nprint(\"{} has been removed\".format(numlist.pop(2)))\n# Example output: 3 has been removed\n```\n\n**Solution 4: `print()` with commas**\n\n```python\nnum1 = int(input(\"What is your first number? \"))\nnum2 = int(input(\"What is your second number? \"))\nnum3 = int(input(\"What is your third number? \"))\nnumlist = [num1, num2, num3]\n\nprint(numlist.pop(2), \"has been removed\")\n# Example output: 3 has been removed\n```\n\n### Scenario 3: Debugging and Identifying the Integer\n\nSometimes, you might not immediately see which part of your expression is an integer.\n\n**Debugging Tip:** Use `type()` to inspect the type of your variables.\n\n```python\nmy_int = 5\nmy_str = \"hello\"\nmixed_var = numlist.pop(2) # Assuming numlist is defined and pop returns an int\n\nprint(type(my_int))      # <class 'int'>\nprint(type(my_str))      # <class 'str'>\nprint(type(mixed_var))   # <class 'int'> (in the context of the question)\n```\n\nThis helps confirm that you are indeed trying to concatenate an `int` and a `str`.\n\n## Step-by-Step Diagnosis\n\nWhen encountering this `TypeError`, follow these steps to diagnose and fix it:\n\n1.  **Locate the `+` operator:** The error message `unsupported operand type(s) for +: 'int' and 'str'` points directly to an addition (`+`) operation. Find all `+` operators in the line indicated by the traceback.\n2.  **Identify the operands:** For each `+` operator, determine the data type of the value on its left and the value on its right.\n    *   If one is an `int` (or `float`) and the other is a `str`, you've found the problem.\n    *   If both are `int`s, it's arithmetic addition.\n    *   If both are `str`s, it's string concatenation.\n3.  **Choose a conversion method:**\n    *   If you need to create a new string variable, `f-strings` (Python 3.6+) or `.format()` are generally preferred for readability. `str()` conversion with `+` also works.\n    *   If you are just printing to the console, using `print()` with comma-separated arguments is often the simplest.\n4.  **Apply the fix:** Implement the chosen method to ensure all parts of your string concatenation are indeed strings.\n\n![TypeError Diagnosis Flowchart](/images/55c324dd-1.webp)\n\n## Working Examples\n\nHere's the complete corrected code from the original question, demonstrating the use of `str()` for explicit conversion and f-strings for the final output.\n\n```python\n# Get numerical inputs from the user\nnum1 = int(input(\"What is your first number? \"))\nnum2 = int(input(\"What is your second number? \"))\nnum3 = int(input(\"What is your third number? \"))\n\n# Create a list of these numbers\nnumlist = [num1, num2, num3]\n\n# Print the initial list\nprint(f\"Initial list: {numlist}\") # Using f-string for clear output\n\nprint(\"Now I will remove the 3rd number\")\n\n# Remove the 3rd number (index 2) and store it\nremoved_value = numlist.pop(2)\n\n# Print the removed value, explicitly converting it to a string\n# This fixes the TypeError\nprint(str(removed_value) + \" has been removed\")\n\n# Print the list after removal, using an f-string for readability\nprint(f\"The list now looks like {numlist}\")\n```\n\n**Example Run:**\n\n```console\nWhat is your first number? 10\nWhat is your second number? 20\nWhat is your third number? 30\nInitial list: [10, 20, 30]\nNow I will remove the 3rd number\n30 has been removed\nThe list now looks like [10, 20]\n```\n\n## Summary\n\nThe `TypeError: unsupported operand type(s) for +: 'int' and 'str'` is a fundamental Python error indicating an attempt to concatenate an integer (or other non-string type) with a string using the `+` operator. The solution is to ensure all parts of your string concatenation are explicitly strings.\n\nKey methods to resolve this include:\n*   **`str()` function:** Explicitly converts a non-string type to a string.\n*   **f-strings (Python 3.6+):** The most modern and readable way to embed expressions directly into string literals.\n*   **`.format()` method:** A flexible way to format strings using placeholders.\n*   **`print()` with commas:** Automatically converts arguments to strings and separates them with spaces when printing.\n\nBy understanding these methods, you can effectively prevent and resolve this common `TypeError` in your Python programs.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A flowchart titled \"TypeError Diagnosis: int and str Concatenation\". Start with a \"Start\" node. Next, a diamond \"Encountered `TypeError: unsupported operand type(s) for +: 'int' and 'str'`?\". If Yes, proceed to \"Locate `+` operator in traceback\". Then, \"Identify types of operands around `+`\". Next, a diamond \"Are operands `int` and `str`?\". If Yes, proceed to \"Choose a solution: `str()`, f-string, `.format()`, or `print()` with commas\". Then, \"Apply chosen solution\". Finally, \"End\" node. Include a No path from \"Are operands `int` and `str`?\" leading to \"Review code for other `+` operations or logic errors\". Use a clean, modern flowchart style with clear labels.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A flowchart titled \"TypeError Diagnosis: int and str Concatenation\". Start with a \"Start\" node. Next, a diamond \"Encountered `TypeError: unsupported operand type(s) for +: 'int' and 'str'`?\". If Yes, proceed to \"Locate `+` operator in traceback\". Then, \"Identify types of operands around `+`\". Next, a diamond \"Are operands `int` and `str`?\". If Yes, proceed to \"Choose a solution: `str()`, f-string, `.format()`, or `print()` with commas\". Then, \"Apply chosen solution\". Finally, \"End\" node. Include a No path from \"Are operands `int` and `str`?\" leading to \"Review code for other `+` operations or logic errors\". Use a clean, modern flowchart style with clear labels."
      },
      "titles": {
        "PLACEHOLDER-1": "TypeError Diagnosis Flowchart"
      },
      "count": 1,
      "placeholder_list": [
        [
          "TypeError Diagnosis Flowchart",
          "1"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "55c324dd-1.webp",
        "title": "TypeError Diagnosis Flowchart",
        "path": "staging/images/55c324dd-1.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20441035.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:45:41.308483",
    "word_count": 1431,
    "code_blocks": 28
  }
}