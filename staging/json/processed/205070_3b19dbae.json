{
  "metadata": {
    "title": "Understanding Real, Effective, and Saved UIDs in Unix/Linux",
    "slug": "understanding-real-effective-saved-uids-unix-linux",
    "uniqueId": "3b19dbae",
    "category": "system-devops",
    "subcategory": "linux",
    "description": "Explore the purpose of Real, Effective, and Saved User IDs (UIDs) in Unix/Linux processes, crucial for understanding security and privilege management.",
    "tags": [
      "linux",
      "security",
      "unix",
      "uid",
      "privileges",
      "setuid"
    ],
    "difficulty": "intermediate",
    "readTime": 8,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "205070",
    "votes": 41
  },
  "content": "# Understanding Real, Effective, and Saved UIDs in Unix/Linux\n\nIn Unix-like operating systems, processes operate under specific user identities, which dictate their permissions and access rights. Beyond a single \"user ID,\" processes can have multiple UIDs, each serving a distinct security purpose. Understanding these different UIDs—Real UID, Effective UID, and Saved UID—is fundamental to comprehending how privilege escalation and security mechanisms work in Linux and Unix.\n\n## Quick Answer\n\nA process in Unix/Linux typically has three primary UIDs:\n\n*   **Real UID (RUID):** Identifies the actual user who started the process. It's primarily for accounting and auditing.\n*   **Effective UID (EUID):** Determines the process's current privileges and resource access. This is the UID checked for permissions.\n*   **Saved UID (SUID):** Stores the EUID that a process had when it started, especially for `setuid` executables, allowing it to temporarily drop privileges and then regain them.\n\nThese UIDs work together to manage process permissions, particularly when dealing with `setuid` programs that need elevated privileges for specific tasks but should otherwise run with the user's normal permissions.\n\n## Concept Explanation\n\nEach process on a Unix-like system is associated with a set of user identifiers that govern its permissions. These UIDs are crucial for the operating system's security model, ensuring that processes can only access resources they are authorized to.\n\n### Real UID (RUID)\n\nThe Real UID represents the actual user who initiated the process. It remains constant throughout the process's lifetime, unless explicitly changed by a privileged process (EUID=0). Its primary roles are:\n\n*   **Identification:** It tells the system *who* started the process.\n*   **Auditing:** Used for logging and tracking which user is responsible for a process's actions.\n*   **Signal Handling:** Signals are often sent based on the RUID.\n\n### Effective UID (EUID)\n\nThe Effective UID is the most important UID for privilege checking. When a process attempts to access a file, execute a command, or perform any privileged operation, the operating system checks the EUID to determine if the process has the necessary permissions.\n\n*   **Privilege Evaluation:** This is the UID that the kernel uses to decide if a process can perform an action (e.g., read a file, write to a directory).\n*   **Dynamic Changes:** The EUID can change during a process's execution, especially with `setuid` programs.\n\n### Saved UID (SUID)\n\nThe Saved UID is a special UID that comes into play primarily with `setuid` executables. When a `setuid` program starts, its EUID is set to the owner of the executable file (e.g., root for `passwd`), while its RUID remains the user who ran it. The original EUID (which was the owner of the executable) is stored in the Saved UID.\n\n*   **Privilege Management:** It allows a `setuid` process to temporarily drop its elevated privileges (by setting EUID to RUID) and then later regain them (by setting EUID back to SUID) without needing to be root again. This is a critical security feature, as it allows programs to perform privileged operations only when necessary, reducing the window of vulnerability.\n*   **Security Context:** If the `setuid` bit is not set on an executable, the SUID will typically be the same as the RUID.\n\n![UIDs in a Process](/images/3b19dbae-1.webp)\n\n### Audit UID (AUID)\n\nSome Unix systems with auditing enabled also feature an Audit UID (AUID). This UID identifies the user who originally logged in and started the session, and it remains constant for all processes within that session, even if `setuid` or `sudo` changes other UIDs. Its purpose is purely for auditing, ensuring that audit logs always trace actions back to the original user, regardless of privilege changes.\n\n## How UIDs Interact with `setuid` Programs\n\nThe interaction between these UIDs is best understood in the context of `setuid` programs. A `setuid` program is an executable file that has a special permission bit set, causing it to run with the privileges of the file's owner, rather than the user who executes it. A classic example is the `passwd` command, which needs root privileges to write to `/etc/shadow` (where passwords are stored) but is run by ordinary users.\n\nHere's a typical flow for a `setuid` program:\n\n1.  **User executes `passwd`:**\n    *   RUID = User's UID (e.g., 1000)\n    *   EUID = Root's UID (0) (because `passwd` is `setuid` root)\n    *   SUID = Root's UID (0) (the EUID at program start)\n\n2.  **`passwd` performs privileged operation (e.g., reads `/etc/shadow`):** It uses its EUID (0) to gain root access.\n\n3.  **`passwd` drops privileges:** For security, it might temporarily change its EUID to the RUID (1000) while interacting with user input or performing non-privileged tasks.\n    *   RUID = 1000\n    *   EUID = 1000\n    *   SUID = 0 (still holds the original root privilege)\n\n4.  **`passwd` regains privileges:** When it needs to write to `/etc/shadow` again, it can change its EUID back to the SUID (0) to regain root privileges.\n    *   RUID = 1000\n    *   EUID = 0\n    *   SUID = 0\n\nThis mechanism allows `setuid` programs to operate securely by only holding elevated privileges for the shortest possible time.\n\n## Changing UIDs with System Calls\n\nUnix-like systems provide system calls to manipulate these UIDs:\n\n*   **`setuid(uid_t uid)`:** This call attempts to set the RUID, EUID, and SUID to `uid`.\n    *   If the calling process has EUID=0 (root), all three UIDs are set to `uid`.\n    *   If the calling process is not root:\n        *   It can set its EUID to its RUID or SUID.\n        *   It can set its RUID to its RUID (no change).\n        *   It cannot change its RUID or SUID to arbitrary values.\n*   **`seteuid(uid_t euid)`:** This call specifically sets the Effective UID to `euid`.\n    *   If the calling process has EUID=0, it can set EUID to any `euid`.\n    *   If not root, it can only set EUID to its RUID or SUID. This is often preferred over `setuid()` for temporarily dropping/regaining privileges because it doesn't affect RUID or SUID, preserving the ability to switch back.\n*   **`setresuid(uid_t ruid, uid_t euid, uid_t suid)`:** This call allows setting all three UIDs (Real, Effective, and Saved) independently.\n    *   If EUID=0, any of the three can be set to any value.\n    *   If not root, `ruid`, `euid`, and `suid` can only be set to the current RUID, EUID, or SUID.\n\n## Common Problems & Solutions\n\nUnderstanding these UIDs helps in debugging permission issues and writing secure applications.\n\n*   **Problem:** A `setuid` program fails to perform a privileged action.\n    *   **Solution:** Check if the program correctly switched its EUID to the privileged SUID before attempting the action. Ensure it's not running with the RUID when it needs elevated permissions.\n*   **Problem:** A process needs to temporarily drop privileges and then regain them, but `setuid()` makes it a one-way street.\n    *   **Solution:** Use `seteuid()` to change only the Effective UID. This preserves the SUID, allowing the process to switch back to its original elevated privileges.\n*   **Problem:** Auditing shows actions performed by `root`, but you need to know which user initiated the `sudo` or `setuid` process.\n    *   **Solution:** Check the Audit UID (AUID) if your system supports it and auditing is enabled. This UID is designed to remain constant for the original user.\n\n## Summary\n\nThe Real, Effective, and Saved UIDs are fundamental components of the Unix/Linux security model. The RUID identifies the user, the EUID dictates current permissions, and the SUID provides a mechanism for `setuid` programs to safely drop and regain privileges. Mastering these concepts is essential for anyone working with system security, privilege management, and understanding how applications interact with the operating system's access controls.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A clear, simple diagram illustrating the three UIDs (Real UID, Effective UID, Saved UID) associated with a process. Show arrows indicating how they relate to the \"User\" and \"Executable File Owner\" and how the EUID is used for \"Permission Checks\". Use distinct colors for each UID.\n**Visual Style:** Clean, modern, infographic style with clear labels.\n**Elements:**\n- A box labeled \"Process\" in the center.\n- Three smaller boxes inside the \"Process\" box, labeled \"Real UID\", \"Effective UID\", \"Saved UID\".\n- An arrow from \"User\" (outside the process box) pointing to \"Real UID\".\n- An arrow from \"Executable File Owner\" (outside the process box) pointing to \"Effective UID\" (with a note \"on setuid exec\").\n- An arrow from \"Effective UID\" pointing to \"Saved UID\" (with a note \"on setuid exec\").\n- An arrow from \"Effective UID\" pointing to a box labeled \"Permission Checks (Kernel)\".\n- A bidirectional arrow between \"Effective UID\" and \"Real UID\" (labeled \"drop privileges\").\n- A bidirectional arrow between \"Effective UID\" and \"Saved UID\" (labeled \"regain privileges\").",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A clear, simple diagram illustrating the three UIDs (Real UID, Effective UID, Saved UID) associated with a process. Show arrows indicating how they relate to the \"User\" and \"Executable File Owner\" and how the EUID is used for \"Permission Checks\". Use distinct colors for each UID.\n**Visual Style:** Clean, modern, infographic style with clear labels.\n**Elements:**\n- A box labeled \"Process\" in the center.\n- Three smaller boxes inside the \"Process\" box, labeled \"Real UID\", \"Effective UID\", \"Saved UID\".\n- An arrow from \"User\" (outside the process box) pointing to \"Real UID\".\n- An arrow from \"Executable File Owner\" (outside the process box) pointing to \"Effective UID\" (with a note \"on setuid exec\").\n- An arrow from \"Effective UID\" pointing to \"Saved UID\" (with a note \"on setuid exec\").\n- An arrow from \"Effective UID\" pointing to a box labeled \"Permission Checks (Kernel)\".\n- A bidirectional arrow between \"Effective UID\" and \"Real UID\" (labeled \"drop privileges\").\n- A bidirectional arrow between \"Effective UID\" and \"Saved UID\" (labeled \"regain privileges\")."
      },
      "titles": {
        "PLACEHOLDER-1": "UIDs in a Process"
      },
      "count": 1,
      "placeholder_list": [
        [
          "UIDs in a Process",
          "1"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "3b19dbae-1.webp",
        "title": "UIDs in a Process",
        "path": "staging/images/3b19dbae-1.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/205070.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:33:53.796666",
    "word_count": 1418,
    "code_blocks": 0
  }
}