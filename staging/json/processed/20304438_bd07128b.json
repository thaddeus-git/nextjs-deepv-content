{
  "metadata": {
    "title": "Create a Bitmap from 2D List using Python PIL",
    "slug": "create-bitmap-from-2d-list-python-pil",
    "uniqueId": "bd07128b",
    "category": "programming-languages",
    "subcategory": "python",
    "description": "Learn how to generate a grayscale bitmap image from a 2D Python list using the Pillow (PIL) library, addressing common pixel manipulation errors.",
    "tags": [
      "python",
      "pillow",
      "pil",
      "image-processing",
      "bitmap",
      "2d-list"
    ],
    "difficulty": "beginner",
    "readTime": 5,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20304438",
    "votes": 16
  },
  "content": "# Create a Bitmap from 2D List using Python PIL\n\nWhen working with image processing in Python, the Pillow library (a friendly fork of PIL) is a powerful tool. This guide will show you how to create a bitmap image from a 2D list of data, specifically focusing on generating a grayscale image where each pixel's intensity corresponds to a value in your list.\n\n## Quick Answer\n\nTo create a grayscale bitmap from a 2D list using Pillow, initialize an image in 'L' mode (8-bit pixels, grayscale), then use `img.putpixel()` or `img.load()` to set pixel values. Remember that 'L' mode expects a single integer (0-255) for pixel values, not an RGB tuple.\n\n```python\nfrom PIL import Image\n\ndef create_grayscale_bitmap(data_2d, filename=\"output.bmp\"):\n    height = len(data_2d)\n    width = len(data_2d[0]) if height > 0 else 0\n\n    if not (height > 0 and width > 0):\n        print(\"Input 2D list is empty or malformed.\")\n        return\n\n    # Create a new grayscale image ('L' mode)\n    img = Image.new('L', (width, height), color=0) # Start with black background\n\n    # Load pixels for efficient manipulation\n    pixels = img.load()\n\n    # Iterate through the 2D data and set pixel values\n    for y in range(height):\n        for x in range(width):\n            # Ensure value is within 0-255 range for grayscale\n            pixel_value = int(max(0, min(255, data_2d[y][x])))\n            pixels[x, y] = pixel_value\n\n    img.save(filename)\n    print(f\"Bitmap saved as {filename}\")\n\n# Example 2D list (e.g., representing a gradient)\nexample_data = [\n    [i * 16 + j * 16 for j in range(16)] for i in range(16)\n]\n\ncreate_grayscale_bitmap(example_data, \"grayscale_example.bmp\")\n```\n\n## Working Code Examples\n\nThis section provides a complete example of how to convert a 2D list into a grayscale bitmap using Pillow. We'll cover initializing the image, iterating through your data, and saving the result.\n\n### 1. Basic Grayscale Bitmap from 2D List\n\nThis example demonstrates the core process of mapping a 2D list of numerical values (0-255) to a grayscale image.\n\n```python\nfrom PIL import Image\n\ndef generate_grayscale_image_from_2d_list(data_matrix, output_filename=\"output_grayscale.bmp\"):\n    \"\"\"\n    Generates a grayscale bitmap image from a 2D list of numerical data.\n\n    Args:\n        data_matrix (list of list of int/float): The 2D list where each inner\n                                                 list is a row of pixel values.\n                                                 Values should ideally be 0-255.\n        output_filename (str): The name of the output bitmap file.\n    \"\"\"\n    if not data_matrix or not data_matrix[0]:\n        print(\"Error: Input data_matrix is empty.\")\n        return\n\n    height = len(data_matrix)\n    width = len(data_matrix[0])\n\n    # Create a new image in 'L' mode (8-bit pixels, black and white)\n    # 'L' mode expects a single integer value (0-255) for each pixel.\n    img = Image.new('L', (width, height))\n\n    # Use img.load() for efficient pixel access\n    pixels = img.load()\n\n    for y in range(height):\n        for x in range(width):\n            # Get the value from the 2D list\n            raw_value = data_matrix[y][x]\n\n            # Ensure the value is an integer and within the 0-255 range\n            # for grayscale. Clamp values if they exceed this range.\n            pixel_intensity = int(max(0, min(255, raw_value)))\n\n            # Set the pixel. For 'L' mode, pixels[x, y] expects an integer.\n            pixels[x, y] = pixel_intensity\n\n    img.save(output_filename)\n    print(f\"Grayscale bitmap '{output_filename}' created successfully.\")\n\n# --- Example Usage ---\n# Create a sample 2D list (e.g., a simple gradient)\nsample_data = []\nfor i in range(100): # 100 rows\n    row = []\n    for j in range(150): # 150 columns\n        # Create a gradient from top-left to bottom-right\n        value = int((i / 99.0 * 127) + (j / 149.0 * 127)) # Scale to 0-255\n        row.append(value)\n    sample_data.append(row)\n\ngenerate_grayscale_image_from_2d_list(sample_data, \"gradient_grayscale.bmp\")\n\n# Another example: a checkerboard pattern\ncheckerboard_data = []\nfor i in range(50):\n    row = []\n    for j in range(50):\n        if (i // 10 + j // 10) % 2 == 0:\n            row.append(255) # White\n        else:\n            row.append(0)   # Black\n    checkerboard_data.append(row)\n\ngenerate_grayscale_image_from_2d_list(checkerboard_data, \"checkerboard.bmp\")\n```\n![Grayscale Bitmap Example](/images/bd07128b-1.webp)\n\n### 2. Creating an RGB Bitmap from 2D List (if data contains color channels)\n\nIf your 2D list actually contains tuples representing RGB values (e.g., `[(R,G,B), (R,G,B), ...]`), you would use the 'RGB' mode.\n\n```python\nfrom PIL import Image\n\ndef generate_rgb_image_from_2d_list(data_matrix_rgb, output_filename=\"output_rgb.bmp\"):\n    \"\"\"\n    Generates an RGB bitmap image from a 2D list where each element is an RGB tuple.\n\n    Args:\n        data_matrix_rgb (list of list of tuple): The 2D list where each element\n                                                 is an (R, G, B) tuple (0-255).\n        output_filename (str): The name of the output bitmap file.\n    \"\"\"\n    if not data_matrix_rgb or not data_matrix_rgb[0]:\n        print(\"Error: Input data_matrix_rgb is empty.\")\n        return\n\n    height = len(data_matrix_rgb)\n    width = len(data_matrix_rgb[0])\n\n    # Create a new image in 'RGB' mode\n    img = Image.new('RGB', (width, height))\n    pixels = img.load()\n\n    for y in range(height):\n        for x in range(width):\n            # Get the RGB tuple from the 2D list\n            r, g, b = data_matrix_rgb[y][x]\n\n            # Ensure values are integers and within 0-255 range\n            r = int(max(0, min(255, r)))\n            g = int(max(0, min(255, g)))\n            b = int(max(0, min(255, b)))\n\n            pixels[x, y] = (r, g, b)\n\n    img.save(output_filename)\n    print(f\"RGB bitmap '{output_filename}' created successfully.\")\n\n# --- Example Usage ---\n# Create a sample 2D list of RGB tuples\nrgb_data = []\nfor i in range(50):\n    row = []\n    for j in range(range(50)):\n        r = int(255 * (i / 49.0))\n        g = int(255 * (j / 49.0))\n        b = int(255 * (1 - (i + j) / 98.0))\n        row.append((r, g, b))\n    rgb_data.append(row)\n\ngenerate_rgb_image_from_2d_list(rgb_data, \"rgb_gradient.bmp\")\n```\n![RGB Bitmap Example](/images/bd07128b-2.webp)\n\n## Common Problems & Solutions\n\nWhen working with Pillow and pixel manipulation, especially from raw data, you might encounter a few common issues.\n\n### 1. `TypeError: an integer is required` with `putpixel()`\n\n**Problem:** The original question's code snippet had this error:\n```python\nimg.putpixel((i,j), (255,255,255)) # Error here\n```\nThis happens because the image was created in `'L'` mode: `img = Image.new('L', (100,100), 'white')`.\nThe `'L'` mode (Luminance) expects a single integer value (0-255) for each pixel, representing its grayscale intensity. You were passing an RGB tuple `(255,255,255)`.\n\n**Solution:**\nIf your image is in `'L'` mode, pass a single integer for the pixel value:\n```python\n# For 'L' mode, use a single integer (0-255)\nimg.putpixel((i, j), 255) # Sets pixel to white (max intensity)\n```\nIf you intend to use RGB colors, create the image in `'RGB'` mode:\n```python\nimg = Image.new('RGB', (100, 100), 'white') # 'white' here is a string, PIL converts it to (255,255,255)\nimg.putpixel((i, j), (255, 0, 0)) # Sets pixel to red\n```\n\n### 2. Performance Issues with `putpixel()` in Loops\n\n**Problem:** While `putpixel()` works, it can be very slow for large images when called inside nested loops.\n\n**Solution:** For better performance, especially with larger images, use `img.load()` to get a pixel access object. This object allows direct pixel manipulation, which is significantly faster.\n\n```python\nfrom PIL import Image\n\n# ... (image creation)\nimg = Image.new('L', (width, height))\npixels = img.load() # Get the pixel access object\n\nfor y in range(height):\n    for x in range(width):\n        # Set pixel directly using the pixel access object\n        pixels[x, y] = your_grayscale_value # your_grayscale_value is an int 0-255\n```\nThe `img.load()` method returns a pixel access object that behaves like a 2D array, allowing you to set `pixels[x, y]` directly. This bypasses the overhead of repeated function calls.\n\n### 3. Incorrect Image Dimensions or Data Mapping\n\n**Problem:** The generated image looks stretched, squashed, or doesn't match the input data.\n\n**Solution:**\n*   **Verify Dimensions:** Ensure that `width` and `height` used in `Image.new((width, height))` correctly correspond to the dimensions of your 2D list (`len(data_matrix[0])` for width, `len(data_matrix)` for height).\n*   **Correct Indexing:** Remember that Pillow's `putpixel((x, y), ...)` and `pixels[x, y]` use `(column, row)` order, while your 2D list `data_matrix[row][column]` uses `(row, column)` order. Be careful with `x` and `y` indices in your loops.\n    ```python\n    # Correct mapping: data_matrix[y][x] corresponds to pixels[x, y]\n    for y in range(height): # Iterate rows of data_matrix\n        for x in range(width): # Iterate columns of data_matrix\n            pixels[x, y] = data_matrix[y][x]\n    ```\n\n### 4. Values Out of Range (0-255)\n\n**Problem:** Your 2D list contains values outside the 0-255 range, leading to unexpected colors or errors.\n\n**Solution:** Always clamp your pixel values to the valid range before assigning them.\n\n```python\n# Assuming 'value' is from your 2D list\nclamped_value = int(max(0, min(255, value)))\npixels[x, y] = clamped_value\n```\nThis ensures that any value less than 0 becomes 0 (black) and any value greater than 255 becomes 255 (white for grayscale, or max intensity for a color channel).\n\n## Related: Other Pillow Operations\n\nOnce you have your image, Pillow offers many other operations:\n\n*   **Resizing:** `img.resize((new_width, new_height))`\n*   **Cropping:** `img.crop((left, upper, right, lower))`\n*   **Applying Filters:** `from PIL import ImageFilter; img.filter(ImageFilter.BLUR)`\n*   **Drawing Shapes/Text:** Use `ImageDraw` module: `from PIL import ImageDraw; draw = ImageDraw.Draw(img); draw.line(...)`\n*   **Converting Modes:** `img.convert('RGB')` or `img.convert('L')` to change between color modes.\n\nThese operations can be chained or applied after you've generated your initial bitmap from data.\n\n## Summary\n\nCreating a bitmap image from a 2D list in Python using Pillow is a straightforward process, primarily involving:\n\n1.  **Initializing the Image:** Use `Image.new()` with the correct mode (`'L'` for grayscale, `'RGB'` for color) and dimensions.\n2.  **Accessing Pixels:** For efficiency, use `img.load()` to get a pixel access object.\n3.  **Mapping Data:** Iterate through your 2D list and assign the corresponding (clamped) pixel values to `pixels[x, y]`. Remember the `(x, y)` vs `(row, column)` indexing.\n4.  **Saving the Image:** Use `img.save()` to write the image to a file.\n\nBy understanding the image modes and efficient pixel manipulation techniques, you can effectively visualize your 2D data as bitmaps.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A visual representation of a grayscale gradient bitmap image. The image should be 150x100 pixels. It should show a smooth gradient from dark (top-left) to light (bottom-right), illustrating the `gradient_grayscale.bmp` example. Below it, show a 50x50 pixel checkerboard pattern with alternating black and white squares, representing the `checkerboard.bmp` example. The style should be clean and technical.\n\n**PLACEHOLDER-2:** A visual representation of an RGB gradient bitmap image. The image should be 50x50 pixels. It should display a smooth color gradient where red increases from left to right, green increases from top to bottom, and blue decreases from top-left to bottom-right, creating a blend of colors. The style should be clean and technical, similar to a color test pattern.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A visual representation of a grayscale gradient bitmap image. The image should be 150x100 pixels. It should show a smooth gradient from dark (top-left) to light (bottom-right), illustrating the `gradient_grayscale.bmp` example. Below it, show a 50x50 pixel checkerboard pattern with alternating black and white squares, representing the `checkerboard.bmp` example. The style should be clean and technical.",
        "PLACEHOLDER-2": "A visual representation of an RGB gradient bitmap image. The image should be 50x50 pixels. It should display a smooth color gradient where red increases from left to right, green increases from top to bottom, and blue decreases from top-left to bottom-right, creating a blend of colors. The style should be clean and technical, similar to a color test pattern."
      },
      "titles": {
        "PLACEHOLDER-1": "Grayscale Bitmap Example",
        "PLACEHOLDER-2": "RGB Bitmap Example"
      },
      "count": 2,
      "placeholder_list": [
        [
          "Grayscale Bitmap Example",
          "1"
        ],
        [
          "RGB Bitmap Example",
          "2"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "bd07128b-1.webp",
        "title": "Grayscale Bitmap Example",
        "path": "staging/images/bd07128b-1.png"
      },
      {
        "placeholder": "PLACEHOLDER-2",
        "filename": "bd07128b-2.webp",
        "title": "RGB Bitmap Example",
        "path": "staging/images/bd07128b-2.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20304438.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:58:32.386279",
    "word_count": 1649,
    "code_blocks": 18
  }
}