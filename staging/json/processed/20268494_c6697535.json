{
  "metadata": {
    "title": "Linux: List All Users and Their UIDs with `awk`, `cut`, and `grep`",
    "slug": "linux-list-users-uids-awk-cut-grep",
    "uniqueId": "c6697535",
    "category": "system-devops",
    "subcategory": "linux",
    "description": "Learn how to list all users and their User IDs (UIDs) on Linux using various command-line tools like awk, cut, and grep, with practical examples.",
    "tags": [
      "linux",
      "awk",
      "grep",
      "cut",
      "uid",
      "bash",
      "command-line"
    ],
    "difficulty": "beginner",
    "readTime": 6,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20268494",
    "votes": 12
  },
  "content": "# Linux: List All Users and Their UIDs with `awk`, `cut`, and `grep`\n\n## Quick Answer\n\nTo quickly list all users and their UIDs from `/etc/passwd` in a `User uid=UID` format, the most efficient method is using `awk`:\n\n```bash\nawk -F: '{print $1 \" uid=\" $3}' /etc/passwd\n```\n\nThis command uses the colon (`:`) as a field separator and prints the first field (username) and the third field (UID) for each line in `/etc/passwd`.\n\n## Choose Your Method\n\nThe best method for listing users and their UIDs depends on your specific needs, such as desired output format, filtering requirements, and tool preference.\n\n```mermaid\ngraph TD\n    A[Start] --> B{Need specific format (e.g., \"User uid=UID\")?};\n    B -- Yes --> C{Prefer `awk` for flexibility?};\n    C -- Yes --> D[Use `awk -F: '{print $1 \" uid=\" $3}' /etc/passwd`];\n    C -- No --> E{Need to filter by shell (e.g., login users)?};\n    E -- Yes --> F[Use `grep /bin/bash /etc/passwd | awk -F: '{print $1 \" uid=\" $3}'`];\n    E -- No --> G[Consider `cut` for simple extraction, then format manually];\n    B -- No --> H{Just need usernames or UIDs separately?};\n    H -- Usernames --> I[Use `cut -d: -f1 /etc/passwd`];\n    H -- UIDs --> J[Use `cut -d: -f3 /etc/passwd`];\n    D --> K[End];\n    F --> K;\n    G --> K;\n    I --> K;\n    J --> K;\n```\n![Decision Tree for Listing Users and UIDs](/images/c6697535-1.webp)\n\n## Ready-to-Use Code\n\nHere are some common and effective solutions for listing users and their UIDs.\n\n### Using `awk` for Formatted Output\n\nThis is the most direct way to get the output in the requested `User uid=UID` format.\n\n```bash\nawk -F: '{print $1 \" uid=\" $3}' /etc/passwd\n```\n\n### Using `cut` for Basic Extraction\n\nIf you just need the usernames or UIDs without specific formatting, `cut` is a good choice.\n\n```bash\n# To list only usernames\ncut -d: -f1 /etc/passwd\n\n# To list only UIDs\ncut -d: -f3 /etc/passwd\n```\n\n### Using `grep` and `cut` to Filter Login Users\n\nTo list only users with a specific shell (e.g., `/bin/bash`), you can combine `grep` with `cut`.\n\n```bash\ngrep \"/bin/bash\" /etc/passwd | cut -d':' -f1\n```\n\n## Method 1: Using `awk` for Flexible Formatting\n\nThe `awk` command is a powerful text processing tool that excels at parsing structured data like `/etc/passwd`. The `/etc/passwd` file stores user account information, with each field separated by a colon (`:`). The format is typically:\n\n`username:password_hash:UID:GID:GECOS:home_directory:shell`\n\nTo extract the username (1st field) and UID (3rd field), `awk` is ideal.\n\n```bash\nawk -F: '{print $1 \" uid=\" $3}' /etc/passwd\n```\n\n-   `-F:`: Specifies that the field separator is a colon.\n-   `{print $1 \" uid=\" $3}`: For each line, this action prints the first field (`$1`), followed by the literal string \" uid=\", and then the third field (`$3`).\n\n**Example Output:**\n\n```output\nroot uid=0\ndaemon uid=1\nbin uid=2\nsys uid=3\n...\nyouruser uid=1000\n```\n\n## Method 2: Using `cut` for Simple Field Extraction\n\nThe `cut` command is designed to extract sections from each line of files. It's simpler than `awk` for basic field extraction but requires additional steps if you need custom formatting.\n\n```bash\n# Extract usernames\ncut -d: -f1 /etc/passwd\n\n# Extract UIDs\ncut -d: -f3 /etc/passwd\n```\n\n-   `-d:`: Specifies the delimiter as a colon.\n-   `-f1`: Extracts the first field.\n-   `-f3`: Extracts the third field.\n\nTo achieve the desired `User uid=UID` format using `cut`, you would typically need to combine it with other tools like `paste` or a `while` loop, which makes `awk` a more direct solution for this specific output.\n\n## Method 3: Filtering Users with `grep`\n\n`grep` is used for searching plain-text data sets for lines that match a regular expression. While `grep` alone can't format the output as requested, it's excellent for filtering users based on criteria like their assigned shell.\n\nFor instance, to list only users who have `/bin/bash` as their login shell (often indicating interactive users):\n\n```bash\ngrep \"/bin/bash\" /etc/passwd\n```\n\nThis will output the full lines from `/etc/passwd` for users with `/bin/bash`. To get just their usernames, you can pipe the output to `cut`:\n\n```bash\ngrep \"/bin/bash\" /etc/passwd | cut -d':' -f1\n```\n\nTo get the username and UID in the desired format for these filtered users, you can pipe to `awk`:\n\n```bash\ngrep \"/bin/bash\" /etc/passwd | awk -F: '{print $1 \" uid=\" $3}'\n```\n![Filtering Users with Grep and Awk](/images/c6697535-2.webp)\n\n## Method 4: Filtering for Regular Users (UID >= 1000)\n\nSystem users typically have UIDs below 1000. To list only regular, non-system users, you can add a condition to `awk`.\n\n```bash\nawk -F':' '$3>=1000 {print $1 \" uid=\" $3}' /etc/passwd\n```\n\n-   `$3>=1000`: This is a condition that tells `awk` to only process lines where the third field (UID) is greater than or equal to 1000.\n\nYou can further refine this by excluding specific users like `nobody` and formatting the output neatly using `column -t`:\n\n```bash\nawk -F':' '$3>=1000 {print $1 \" uid: \" $3}' /etc/passwd | column -t | grep -v nobody\n```\n\n-   `column -t`: Formats the output into neat columns.\n-   `grep -v nobody`: Excludes any lines containing the word \"nobody\".\n\n## Common Problems & Solutions\n\n### Problem: Output includes system users\n**Solution:** Use `awk` with a UID condition to filter out system users (typically UIDs below 1000).\n\n```bash\nawk -F: '$3 >= 1000 {print $1 \" uid=\" $3}' /etc/passwd\n```\n\n### Problem: Need to exclude specific users (e.g., `nobody`)\n**Solution:** Pipe the output to `grep -v` to exclude lines containing a specific pattern.\n\n```bash\nawk -F: '{print $1 \" uid=\" $3}' /etc/passwd | grep -v \"nobody\"\n```\n\n### Problem: Output is not neatly aligned\n**Solution:** Use `column -t` to format the output into aligned columns. This is especially useful when printing multiple fields.\n\n```bash\nawk -F: '{print $1, $3}' /etc/passwd | column -t\n```\n\n## Summary\n\nListing users and their UIDs on Linux is a common administrative task. The `/etc/passwd` file is the primary source for this information.\n\n-   **`awk`** is the most versatile and recommended tool for this task, especially when custom output formatting is required. It allows for easy field extraction and conditional processing.\n-   **`cut`** is excellent for simple, direct extraction of specific fields but requires additional commands for complex formatting.\n-   **`grep`** is invaluable for filtering lines based on patterns, such as a user's login shell, and can be combined with `awk` or `cut` for more targeted results.\n\nBy understanding these tools, you can efficiently retrieve and format user information according to your specific needs.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A decision tree flowchart. The start node is \"Start\". It branches to \"Need specific format (e.g., 'User uid=UID')?\". If yes, it goes to \"Prefer `awk` for flexibility?\". If yes, it goes to a node with the command `awk -F: '{print $1 \" uid=\" $3}' /etc/passwd`. If no, it goes to \"Need to filter by shell (e.g., login users)?\". If yes, it goes to a node with `grep /bin/bash /etc/passwd | awk -F: '{print $1 \" uid=\" $3}'`. If no, it goes to \"Consider `cut` for simple extraction, then format manually\". If the initial \"Need specific format?\" is no, it branches to \"Just need usernames or UIDs separately?\". If \"Usernames\", it goes to `cut -d: -f1 /etc/passwd`. If \"UIDs\", it goes to `cut -d: -f3 /etc/passwd`. All final command nodes lead to an \"End\" node. Use a clean, modern flowchart style with distinct colors for decision nodes and command nodes.\n\n**PLACEHOLDER-2:** A visual representation of a Linux command pipeline. Show three distinct blocks: \"grep '/bin/bash' /etc/passwd\", an arrow pointing to a pipe symbol \"|\", then \"awk -F: '{print $1 \\\" uid=\\\" $3}'\". Below the `grep` block, show a snippet of `/etc/passwd` content with multiple lines, some containing `/bin/bash` and some not. Below the `awk` block, show the filtered and formatted output, e.g., \"user1 uid=1000\", \"user2 uid=1001\". Use a clean, technical diagram style with clear labels for each command and the data flow.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A decision tree flowchart. The start node is \"Start\". It branches to \"Need specific format (e.g., 'User uid=UID')?\". If yes, it goes to \"Prefer `awk` for flexibility?\". If yes, it goes to a node with the command `awk -F: '{print $1 \" uid=\" $3}' /etc/passwd`. If no, it goes to \"Need to filter by shell (e.g., login users)?\". If yes, it goes to a node with `grep /bin/bash /etc/passwd | awk -F: '{print $1 \" uid=\" $3}'`. If no, it goes to \"Consider `cut` for simple extraction, then format manually\". If the initial \"Need specific format?\" is no, it branches to \"Just need usernames or UIDs separately?\". If \"Usernames\", it goes to `cut -d: -f1 /etc/passwd`. If \"UIDs\", it goes to `cut -d: -f3 /etc/passwd`. All final command nodes lead to an \"End\" node. Use a clean, modern flowchart style with distinct colors for decision nodes and command nodes.",
        "PLACEHOLDER-2": "A visual representation of a Linux command pipeline. Show three distinct blocks: \"grep '/bin/bash' /etc/passwd\", an arrow pointing to a pipe symbol \"|\", then \"awk -F: '{print $1 \\\" uid=\\\" $3}'\". Below the `grep` block, show a snippet of `/etc/passwd` content with multiple lines, some containing `/bin/bash` and some not. Below the `awk` block, show the filtered and formatted output, e.g., \"user1 uid=1000\", \"user2 uid=1001\". Use a clean, technical diagram style with clear labels for each command and the data flow."
      },
      "titles": {
        "PLACEHOLDER-1": "Decision Tree for Listing Users and UIDs",
        "PLACEHOLDER-2": "Filtering Users with Grep and Awk"
      },
      "count": 2,
      "placeholder_list": [
        [
          "Decision Tree for Listing Users and UIDs",
          "1"
        ],
        [
          "Filtering Users with Grep and Awk",
          "2"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "c6697535-1.webp",
        "title": "Decision Tree for Listing Users and UIDs",
        "path": "staging/images/c6697535-1.png"
      },
      {
        "placeholder": "PLACEHOLDER-2",
        "filename": "c6697535-2.webp",
        "title": "Filtering Users with Grep and Awk",
        "path": "staging/images/c6697535-2.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20268494.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:57:47.145158",
    "word_count": 1308,
    "code_blocks": 32
  }
}