{
  "metadata": {
    "title": "How to Rename a Git Repository: Local, Remote, and Display Names",
    "slug": "how-to-rename-git-repository",
    "uniqueId": "9ba622a6",
    "category": "system-devops",
    "subcategory": "version-control",
    "description": "Learn the different ways to rename a Git repository, covering local directory names, remote repository names on platforms like GitHub, and the displayed name in Gitweb.",
    "tags": [
      "git",
      "repository",
      "rename",
      "github",
      "gitlab",
      "remote"
    ],
    "difficulty": "intermediate",
    "readTime": 10,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "2041993",
    "votes": 638
  },
  "content": "# How to Rename a Git Repository: Local, Remote, and Display Names\n\nRenaming a Git repository isn't a single command, as \"repository name\" can refer to several different things: the local directory name, the displayed name in tools like Gitweb, or the name of the remote repository on platforms like GitHub or GitLab. This guide covers each scenario and its implications.\n\n## Quick Answer\n\nRenaming a Git repository depends on what you mean by \"repository name\":\n\n*   **Local Directory Name**: Simply rename the folder using your operating system's file manager or `mv` command. Git itself doesn't typically care about the directory name, but be aware of implications for worktrees and submodules.\n*   **Displayed Name (e.g., Gitweb)**: Edit the `.git/description` file within your repository.\n*   **Remote Repository Name (e.g., GitHub/GitLab)**: Rename it via the web interface of your hosting provider, then update your local repository's remote URL using `git remote set-url origin <new-url>`.\n\n## Choose Your Method\n\nThe best way to rename your Git repository depends on what aspect you want to change and your specific setup.\n\n```mermaid\ngraph TD\n    A[Start: What do you want to rename?] --> B{Local Directory Name?};\n    B -- Yes --> C[Rename folder using OS commands (mv, Explorer, Finder)];\n    B -- No --> D{Displayed Name (e.g., Gitweb)?};\n    D -- Yes --> E[Edit .git/description file];\n    D -- No --> F{Remote Repository Name (e.g., GitHub, GitLab)?};\n    F -- Yes --> G[Rename on hosting platform (GitHub/GitLab settings)];\n    G --> H[Update local remote URL: git remote set-url origin <new-url>];\n    C --> I[Consider worktrees/submodules: update paths if necessary];\n    E --> J[Save .git/description];\n    H --> K[Done];\n    I --> K;\n    J --> K;\n```\n\n## Table of Contents\n1.  Quick Answer\n2.  Choose Your Method\n3.  Renaming the Local Repository Directory\n4.  Renaming the Displayed Name (.git/description)\n5.  Renaming a Remote Repository (GitHub, GitLab, AWS CodeCommit)\n6.  Handling Worktrees and Submodules After Renaming\n7.  Common Problems and Solutions\n8.  Real-World Use Cases\n9.  Summary\n\n## Renaming the Local Repository Directory\n\nFor most basic Git repositories, the \"name\" is simply the name of the directory containing the `.git` folder. Git itself doesn't store a \"name\" property for the repository in its configuration that corresponds to the directory name.\n\nTo rename your local repository directory:\n\n1.  **Navigate to the parent directory**: Open your terminal or file explorer and go to the directory that *contains* your Git repository folder.\n    ```bash\n    cd ..\n    # Assuming your repo is in 'old-repo-name'\n    ```\n2.  **Rename the directory**: Use your operating system's rename command or file manager.\n    ```bash\n    mv old-repo-name new-repo-name\n    ```\n    *   **Windows**: Right-click the folder and select \"Rename,\" or press `F2`.\n    *   **macOS/Linux**: Use the `mv` command in the terminal or rename via the Finder/file manager.\n\n**Important Considerations**:\n*   If you have any scripts or IDE configurations that reference the old path, you'll need to update them.\n*   This change *does not* affect the remote repository's name or URL. Your local repository will still push/pull from the same remote URL.\n*   Special cases like worktrees and submodules require additional steps (see section 6).\n\n## Renaming the Displayed Name (.git/description)\n\nSome Git tools, particularly older ones like Gitweb, use the content of the `.git/description` file to display a human-readable name for the repository. This is purely for display purposes and does not affect the repository's functionality or its remote URL.\n\nTo rename the displayed name:\n\n1.  **Navigate to your repository's root directory**:\n    ```bash\n    cd your-repo-name\n    ```\n2.  **Edit the `.git/description` file**: Open this file with a text editor.\n    ```bash\n    nano .git/description\n    # or your preferred editor\n    ```\n3.  **Enter the new name**: The file usually contains a default like \"Unnamed repository; edit this file 'description' to name the repository.\" Replace this text with your desired repository name.\n    ```text\n    My New Repository Name for Gitweb\n    ```\n4.  **Save and close the file**.\n\nThis change is local to your repository and will only be visible to tools that read this specific file. It will not affect how GitHub, GitLab, or other hosting services display your repository.\n\n## Renaming a Remote Repository (GitHub, GitLab, AWS CodeCommit)\n\nRenaming a remote repository involves two main steps: changing the name on the hosting platform and then updating your local repository to point to the new remote URL.\n\n### 1. Rename on the Hosting Platform\n\nThe exact steps vary slightly by provider, but generally involve going to the repository's settings page.\n\n#### GitHub\n1.  Go to your repository on GitHub (e.g., `https://github.com/User/old-project`).\n2.  Click on the **Settings** tab.\n3.  Under the \"General\" section, you'll find the \"Repository name\" field.\n4.  Change the name to your desired new name (e.g., `new-project`).\n5.  Click the **Rename** button.\n\n**Note**: GitHub automatically redirects requests from the old URL to the new one, which is a very convenient feature. However, it's still best practice to update your local configuration.\n\n#### GitLab\n1.  Go to your project on GitLab.\n2.  Navigate to **Settings > General**.\n3.  Expand the **Advanced** section.\n4.  Under \"Change path,\" you can modify the repository path.\n5.  Click **Rename project**.\n\n#### AWS CodeCommit\nFor AWS CodeCommit, you can use the AWS CLI:\n```bash\naws codecommit update-repository-name --old-name MyOldRepo --new-name MyNewRepo\n```\n\n### 2. Update Local Remote URL\n\nAfter renaming the remote repository on the hosting platform, your local repository still has the old remote URL configured. You need to update it.\n\n1.  **Navigate to your local repository's root directory**:\n    ```bash\n    cd your-local-repo\n    ```\n2.  **Determine the new remote URL**: This will typically follow the pattern of your hosting provider (e.g., `https://github.com/User/new-project.git` or `git@github.com:User/new-project.git`).\n3.  **Update the remote URL**: Use the `git remote set-url` command. If your remote is named `origin` (which is the default), use:\n    ```bash\n    git remote set-url origin https://github.com/User/new-project.git\n    # Or for SSH:\n    # git remote set-url origin git@github.com:User/new-project.git\n    ```\n    To verify the change, you can run:\n    ```bash\n    git remote -v\n    ```\n    This should show the new URL for `origin`.\n\n![Remote Repository Rename Flow](/images/9ba622a6-1.webp)\n\n## Handling Worktrees and Submodules After Renaming\n\nRenaming a repository that contains Git worktrees or submodules requires extra care, as these features often store absolute paths.\n\n### Moving a Repository with Worktrees\n\nIf you move the parent repository (the main repository that has worktrees associated with it), the worktrees' `.git` files will still point to the old absolute path of the parent.\n\n1.  **Identify worktrees**: Each worktree directory will contain a `.git` file (not a `.git` directory) with a `gitdir` entry.\n    ```text\n    gitdir: {full-path-to-old-parent-repository}/.git/worktrees/{worktree-name}\n    ```\n2.  **Update `gitdir` path**: For each worktree, you must manually edit its `.git` file to reflect the new absolute path of the parent repository.\n    ```text\n    gitdir: {full-path-to-new-parent-repository}/.git/worktrees/{worktree-name}\n    ```\n\n### Moving a Worktree Itself\n\nIf you only move a worktree directory (not the parent repository), use the `git worktree move` command from the parent repository:\n```bash\ngit worktree move <old-path-to-worktree> <new-path-to-worktree>\n```\n\n### Moving a Repository with Submodules\n\nSimilar to worktrees, submodules can store absolute paths. If you rename the parent repository, you might need to update paths.\n\n1.  **Submodule's `.git` file**: The submodule directory itself has a `.git` file pointing to its parent.\n2.  **Parent's `.git/modules/{submodule}/config`**: The parent repository also has a configuration file for the submodule that might contain absolute paths. You may need to edit this file to update any `url` or `path` entries.\n\n### Renaming a Submodule\n\nIf you want to rename a submodule *within* a parent repository, you should use `git mv`:\n```bash\ngit mv old-submodule-path new-submodule-path\n```\nThis will update the `.gitmodules` file and stage the changes. Commit these changes.\n\n## Common Problems and Solutions\n\n*   **\"fatal: Could not read from remote repository.\"**: This usually means your local repository is still trying to connect to the old remote URL.\n    *   **Solution**: Update your remote URL using `git remote set-url origin <new-url>` as described in section 5.\n*   **Submodules break after renaming parent directory**: If you simply rename the parent directory, submodules might lose their connection.\n    *   **Solution**: Manually update the `gitdir` paths in the submodule's `.git` file and potentially the `url` in the parent's `.git/modules/{submodule}/config` file.\n*   **Old links to GitHub/GitLab repository are broken**: While GitHub often redirects, other platforms might not.\n    *   **Solution**: Communicate the new URL to collaborators and update any external links (documentation, CI/CD pipelines, etc.).\n*   **Eclipse/IDE integration issues**: Some IDEs might cache repository paths.\n    *   **Solution**: In Eclipse (EGit), you might need to close/delete the project (without deleting content), rename the folder, and then re-import the project.\n\n## Real-World Use Cases\n\n*   **Project Rebranding**: A project changes its name, and the repository name needs to reflect this.\n*   **Organizational Restructuring**: A repository moves from one team's namespace to another (e.g., `github.com/old-org/project` to `github.com/new-org/project`).\n*   **Local Development Setup**: A developer wants to organize their local workspace by renaming project folders without affecting the remote.\n*   **Consolidating Repositories**: Two projects merge, and one repository is renamed to become part of the other's structure (e.g., as a submodule).\n\n## Summary\n\nRenaming a Git repository is not a single, universal command but rather a set of distinct operations depending on whether you're targeting the local directory, the displayed name, or the remote host's name. For local directories, a simple OS rename usually suffices, but worktrees and submodules introduce complexities. For remote repositories, the process involves using the hosting platform's web interface followed by updating your local remote URL. Always communicate changes to collaborators, especially when dealing with remote repository renames, to ensure a smooth transition.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A flowchart illustrating the process of renaming a remote Git repository. Start with \"Rename on Hosting Platform (e.g., GitHub Settings)\". Branch into \"GitHub\", \"GitLab\", \"AWS CodeCommit\" with their respective actions (e.g., \"Settings > General > Rename\", \"AWS CLI: update-repository-name\"). Then, all branches converge to \"Update Local Remote URL\". Show a terminal window with `git remote set-url origin <new-url>` and `git remote -v` commands. Use Git and cloud provider logos where appropriate. The overall style should be clean, modern, and easy to follow.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A flowchart illustrating the process of renaming a remote Git repository. Start with \"Rename on Hosting Platform (e.g., GitHub Settings)\". Branch into \"GitHub\", \"GitLab\", \"AWS CodeCommit\" with their respective actions (e.g., \"Settings > General > Rename\", \"AWS CLI: update-repository-name\"). Then, all branches converge to \"Update Local Remote URL\". Show a terminal window with `git remote set-url origin <new-url>` and `git remote -v` commands. Use Git and cloud provider logos where appropriate. The overall style should be clean, modern, and easy to follow."
      },
      "titles": {
        "PLACEHOLDER-1": "Remote Repository Rename Flow"
      },
      "count": 1,
      "placeholder_list": [
        [
          "Remote Repository Rename Flow",
          "1"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "9ba622a6-1.webp",
        "title": "Remote Repository Rename Flow",
        "path": "staging/images/9ba622a6-1.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/2041993.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T23:23:32.000224",
    "word_count": 1641,
    "code_blocks": 28
  }
}