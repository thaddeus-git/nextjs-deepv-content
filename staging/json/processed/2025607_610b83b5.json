{
  "metadata": {
    "title": "How to Create a JAR File in IntelliJ IDEA",
    "slug": "how-to-create-jar-intellij-idea",
    "uniqueId": "610b83b5",
    "category": "programming-languages",
    "subcategory": "java",
    "description": "Learn how to create an executable JAR file from your Java project in IntelliJ IDEA using the Artifacts feature.",
    "tags": [
      "java",
      "intellij-idea",
      "jar",
      "build",
      "artifact",
      "deployment"
    ],
    "difficulty": "beginner",
    "readTime": 7,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "2025607",
    "votes": 301
  },
  "content": "# How to Create a JAR File in IntelliJ IDEA\n\nCreating a JAR (Java Archive) file is a common task for Java developers, allowing you to package compiled Java classes and resources into a single, deployable unit. This guide will walk you through the process of creating a JAR file in IntelliJ IDEA, similar to how it's done in Eclipse.\n\n## Quick Answer\n\nTo create a JAR file in IntelliJ IDEA, navigate to `File` > `Project Structure` > `Artifacts`. Click the `+` icon, select `JAR` > `From modules with dependencies`, configure your main class and output directory, then build the artifact via `Build` > `Build Artifacts`.\n\n## Choose Your Method\n\nThe primary method for creating JARs in IntelliJ IDEA is through its \"Artifacts\" feature. This approach is robust and handles dependencies well. For older versions of IntelliJ IDEA, the process might differ slightly.\n\n```mermaid\ngraph TD\n    A[Start] --> B{IntelliJ IDEA Version?};\n    B -- IDEA 9.0 or newer --> C[Use Project Structure > Artifacts];\n    C --> D[Add JAR Artifact];\n    D --> E[Configure Main Class & Dependencies];\n    E --> F[Build Artifact];\n    B -- Older than IDEA 9.0 --> G[Use Build > Build Jars (Legacy)];\n    F --> H[JAR Created];\n    G --> H;\n```\n![IntelliJ IDEA JAR Creation Flowchart](/images/610b83b5-1.webp)\n\n## Ready-to-Use Code\n\nWhile JAR creation is primarily a GUI-driven process in IntelliJ IDEA, understanding the underlying build process can be helpful. For projects using build tools like Maven or Gradle, you can often create JARs via the command line.\n\n### Maven Example (if your project uses Maven)\n\n```bash\nmvn clean package\n```\nThis command will compile your project, run tests, and package the compiled code into a JAR file, typically found in the `target/` directory.\n\n### Gradle Example (if your project uses Gradle)\n\n```bash\n./gradlew build\n```\nor specifically for a desktop application:\n```bash\n./gradlew desktop:dist\n```\nThese commands will build your project and create a JAR file, usually in the `build/libs/` directory.\n\n## Method 1: Creating a JAR using Artifacts (IntelliJ IDEA 9.0+)\n\nThis is the recommended and most common method for creating JAR files in modern IntelliJ IDEA versions.\n\n### Step-by-Step Guide\n\n1.  **Open Project Structure**: Go to `File` > `Project Structure...` (or press `Ctrl+Alt+Shift+S` on Windows/Linux, `âŒ˜;` on macOS).\n    ![Open Project Structure](/images/610b83b5-2.webp)\n\n2.  **Navigate to Artifacts**: In the Project Structure dialog, select `Artifacts` from the left-hand menu.\n\n3.  **Add New Artifact**: Click the `+` (Add) button, then select `JAR` > `From modules with dependencies...`.\n    ![Add New JAR Artifact](PLACEHEDER-3)\n\n4.  **Select Main Class and Module**:\n    *   In the \"Create JAR from Modules\" dialog, click the folder icon next to \"Main Class\" to select the entry point of your application.\n    *   Ensure the correct module is selected.\n    *   Choose how to extract dependencies: `extract to the target JAR` is usually suitable for a single executable JAR.\n    *   Click `OK`.\n    ![Configure JAR Artifact](/images/610b83b5-4.webp)\n\n5.  **Configure Artifact Settings**:\n    *   **Name**: You can rename the artifact (e.g., `MyApplication.jar`).\n    *   **Output directory**: Specify where the JAR file will be saved. By default, it's `out/artifacts/YourArtifactName`.\n    *   **Include in project build**: Check this if you want the JAR to be rebuilt automatically when you build your project.\n    *   Review the `Output Layout` tab to ensure all necessary files and dependencies are included. You can add or remove elements here.\n    *   Click `Apply`, then `OK`.\n\n6.  **Build the Artifact**:\n    *   Go to `Build` > `Build Artifacts...`.\n    *   Select your newly created artifact (e.g., `MyApplication:jar`).\n    *   Choose `Build` to create the JAR file.\n    ![Build Artifact](/images/610b83b5-5.webp)\n\n7.  **Locate the JAR**: After a successful build, the JAR file will be located in the output directory you specified (e.g., `your_project_root/out/artifacts/MyApplication_jar/MyApplication.jar`).\n\n## Method 2: Legacy Approach (IntelliJ IDEA < 9.0)\n\nFor very old versions of IntelliJ IDEA (prior to 9.0), the process was simpler and involved a direct \"Build Jars\" option.\n\n1.  **Build Jars**: Go to `Build` > `Build Jars`.\n2.  Follow the prompts to select your module and configure the JAR.\n\nThis method is largely deprecated as the Artifacts system provides more flexibility and control over the build process.\n\n## Common Problems & Solutions\n\n### 1. \"Cannot load the main class\" or \"no main manifest attribute\"\nThis error indicates that the JAR file doesn't know which class to execute when run.\n\n*   **Solution**: Ensure you correctly specified the \"Main Class\" when configuring the artifact (Step 4 in Method 1). The main class must contain a `public static void main(String[] args)` method.\n*   **Manifest File**: Sometimes, the `MANIFEST.MF` file might be incorrectly generated or placed. Ensure it's in the `META-INF` directory within your JAR and correctly points to your main class. If you're manually editing, ensure the `Main-Class` attribute is present and correct.\n\n### 2. Missing Dependencies\nYour application runs in IntelliJ but fails when run from the JAR because required libraries are missing.\n\n*   **Solution**: When creating the artifact, ensure you select `From modules with dependencies...` and choose to `extract to the target JAR` or `copy to the output directory and link via manifest`. The former creates a single, larger JAR, while the latter creates a smaller JAR with a `lib` folder containing dependencies.\n\n### 3. JAR file not found after building\nYou built the artifact but can't locate the `.jar` file.\n\n*   **Solution**: Double-check the \"Output directory\" specified in the Artifact settings (Step 5 in Method 1). The JAR is usually found within a subfolder named after the artifact, inside the `out/artifacts` directory of your project. For example, `your_project_root/out/artifacts/MyApplication_jar/MyApplication.jar`.\n\n### 4. \"error: Class names, 'myStuff.jar', are only accepted if annotation processing is explicitly requested\"\nThis error usually occurs when trying to run the JAR with `javac` instead of `java`.\n\n*   **Solution**: Ensure you are running the JAR using the `java -jar` command, not `javac`.\n    ```bash\n    java -jar MyApplication.jar\n    ```\n\n## Real-World Use Cases\n\n*   **Distributing Applications**: Package your Java application for users to run without needing an IDE or a full Java development environment.\n*   **Libraries**: Create reusable JARs of your code to be included as dependencies in other projects.\n*   **Web Applications (WAR/EAR)**: While JARs are for standalone applications or libraries, the Artifacts system in IntelliJ IDEA is also used to build WAR (Web Archive) or EAR (Enterprise Archive) files for deploying web applications to servers.\n*   **Command-Line Tools**: Develop and distribute small utilities that can be executed directly from the command line.\n\n## Related: Other Java Operations\n\n*   **Running a Java Application**: Use the green play button in IntelliJ IDEA or `java YourMainClass` from the command line.\n*   **Debugging**: IntelliJ IDEA provides powerful debugging tools to step through your code.\n*   **Building with Maven/Gradle**: For larger projects, using build tools like Maven or Gradle is standard practice for managing dependencies and automating the build process, including JAR creation.\n\n## Summary\n\nCreating a JAR file in IntelliJ IDEA is primarily handled through the `Project Structure` > `Artifacts` menu. This powerful feature allows you to define how your project, along with its dependencies, should be packaged for deployment. By correctly configuring the main class and output settings, you can reliably generate executable JARs for your Java applications.\n\n## Frequently Asked Questions\n\n### Q: What is the difference between a JAR and a WAR file?\nA: A JAR (Java Archive) is a general-purpose packaging format for Java classes and resources, often used for standalone applications or libraries. A WAR (Web Application Archive) is specifically designed for packaging web applications (servlets, JSPs, HTML, CSS, etc.) to be deployed on a web server like Tomcat or Jetty.\n\n### Q: Can I create a JAR file for a Spring Boot application?\nA: Yes, Spring Boot applications are typically packaged as \"fat JARs\" (or \"uber JARs\") that include all dependencies and an embedded web server. IntelliJ IDEA's Artifacts can create these, but it's more common and recommended to use Spring Boot's Maven or Gradle plugins, which handle the fat JAR creation automatically.\n\n### Q: How do I run a JAR file from the command line?\nA: Open your terminal or command prompt, navigate to the directory containing the JAR file, and execute it using `java -jar YourApplication.jar`. Ensure you have a Java Runtime Environment (JRE) installed and configured in your system's PATH.\n\n### Q: What if my project has external libraries?\nA: When configuring the JAR artifact, IntelliJ IDEA provides options to handle dependencies. The most common approach for executable JARs is to \"extract to the target JAR,\" which bundles all dependent `.jar` files directly into your main JAR. Alternatively, you can choose to \"copy to the output directory and link via manifest,\" which creates a `lib` folder alongside your JAR containing the dependencies.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A clean, modern flowchart illustrating the decision process for creating a JAR in IntelliJ IDEA. Start with \"Start\" -> \"IntelliJ IDEA Version?\". Branch into \"IDEA 9.0 or newer\" leading to \"Use Project Structure > Artifacts\" -> \"Add JAR Artifact\" -> \"Configure Main Class & Dependencies\" -> \"Build Artifact\". The other branch is \"Older than IDEA 9.0\" leading to \"Use Build > Build Jars (Legacy)\". Both paths converge to \"JAR Created\". Use a professional, minimalist style with clear labels.\n\n**PLACEHOLDER-2:** A screenshot of IntelliJ IDEA's main menu, with the \"File\" menu open and \"Project Structure...\" highlighted. The screenshot should be clean, showing a typical IntelliJ IDEA window with a project open.\n\n**PLACEHEDER-3:** A screenshot of the IntelliJ IDEA \"Project Structure\" dialog, with \"Artifacts\" selected in the left pane. The \"+\" button should be clearly visible and highlighted, and the dropdown menu showing \"JAR\", \"WAR\", \"EAR\", etc., with \"JAR\" and then \"From modules with dependencies...\" highlighted.\n\n**PLACEHOLDER-4:** A screenshot of the \"Create JAR from Modules\" dialog in IntelliJ IDEA. The \"Main Class\" field should have a folder icon next to it, which is highlighted, and a sample main class selected. The \"Extract to the target JAR\" radio button should be selected.\n\n**PLACEHOLDER-5:** A screenshot of IntelliJ IDEA's main menu, with the \"Build\" menu open and \"Build Artifacts...\" highlighted. A sub-menu should be visible showing the configured artifact (e.g., \"MyApplication:jar\") with the \"Build\" option highlighted.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A clean, modern flowchart illustrating the decision process for creating a JAR in IntelliJ IDEA. Start with \"Start\" -> \"IntelliJ IDEA Version?\". Branch into \"IDEA 9.0 or newer\" leading to \"Use Project Structure > Artifacts\" -> \"Add JAR Artifact\" -> \"Configure Main Class & Dependencies\" -> \"Build Artifact\". The other branch is \"Older than IDEA 9.0\" leading to \"Use Build > Build Jars (Legacy)\". Both paths converge to \"JAR Created\". Use a professional, minimalist style with clear labels.",
        "PLACEHOLDER-2": "A screenshot of IntelliJ IDEA's main menu, with the \"File\" menu open and \"Project Structure...\" highlighted. The screenshot should be clean, showing a typical IntelliJ IDEA window with a project open.\n\n**PLACEHEDER-3:** A screenshot of the IntelliJ IDEA \"Project Structure\" dialog, with \"Artifacts\" selected in the left pane. The \"+\" button should be clearly visible and highlighted, and the dropdown menu showing \"JAR\", \"WAR\", \"EAR\", etc., with \"JAR\" and then \"From modules with dependencies...\" highlighted.",
        "PLACEHOLDER-4": "A screenshot of the \"Create JAR from Modules\" dialog in IntelliJ IDEA. The \"Main Class\" field should have a folder icon next to it, which is highlighted, and a sample main class selected. The \"Extract to the target JAR\" radio button should be selected.",
        "PLACEHOLDER-5": "A screenshot of IntelliJ IDEA's main menu, with the \"Build\" menu open and \"Build Artifacts...\" highlighted. A sub-menu should be visible showing the configured artifact (e.g., \"MyApplication:jar\") with the \"Build\" option highlighted."
      },
      "titles": {
        "PLACEHOLDER-1": "IntelliJ IDEA JAR Creation Flowchart",
        "PLACEHOLDER-2": "Open Project Structure",
        "PLACEHOLDER-4": "Configure JAR Artifact",
        "PLACEHOLDER-5": "Build Artifact"
      },
      "count": 4,
      "placeholder_list": [
        [
          "IntelliJ IDEA JAR Creation Flowchart",
          "1"
        ],
        [
          "Open Project Structure",
          "2"
        ],
        [
          "Configure JAR Artifact",
          "4"
        ],
        [
          "Build Artifact",
          "5"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "610b83b5-1.webp",
        "title": "IntelliJ IDEA JAR Creation Flowchart",
        "path": "staging/images/610b83b5-1.png"
      },
      {
        "placeholder": "PLACEHOLDER-2",
        "filename": "610b83b5-2.webp",
        "title": "Open Project Structure",
        "path": "staging/images/610b83b5-2.png"
      },
      {
        "placeholder": "PLACEHOLDER-4",
        "filename": "610b83b5-4.webp",
        "title": "Configure JAR Artifact",
        "path": "staging/images/610b83b5-4.png"
      },
      {
        "placeholder": "PLACEHOLDER-5",
        "filename": "610b83b5-5.webp",
        "title": "Build Artifact",
        "path": "staging/images/610b83b5-5.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/2025607.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:49:49.943586",
    "word_count": 1654,
    "code_blocks": 10
  }
}