{
  "metadata": {
    "title": "Latex Minted Package: How to Wrap Code Lines (breaklines=true)",
    "slug": "latex-minted-wrap-code-lines",
    "uniqueId": "9c80aac7",
    "category": "system-devops",
    "subcategory": "package-management",
    "description": "Learn how to enable line wrapping for code blocks in LaTeX using the Minted package's breaklines option to prevent overflow.",
    "tags": [
      "latex",
      "minted",
      "pygments",
      "code formatting",
      "line wrapping"
    ],
    "difficulty": "intermediate",
    "readTime": 5,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "2051383",
    "votes": 44
  },
  "content": "# Latex Minted Package: How to Wrap Code Lines (breaklines=true)\n\n## Quick Answer\n\nTo enable line wrapping in `minted` code blocks in LaTeX, use the `breaklines` option within the `minted` environment. This feature was introduced in `minted` version 2.0.\n\n```latex\n\\usepackage{minted}\n\n\\begin{document}\n\\begin{minted}[breaklines, linenos]{python}\n# Your long line of code or comment that needs to wrap\nclass MyClassWithAVeryLongNameAndManyParameters(BaseModel):\n    \"\"\"\n    This is a very long docstring that needs to wrap to fit within the page margins.\n    It describes the purpose of the class and its various attributes and methods.\n    \"\"\"\n    attribute_one = models.CharField(max_length=255, unique=True)\n\\end{minted}\n\\end{document}\n```\n\n## Choose Your Method\n\nThe primary method for line wrapping in `minted` is the `breaklines` option. However, understanding its evolution and alternatives can be helpful.\n\n```mermaid\ngraph TD\n    A[Need to wrap code lines in LaTeX?] --> B{Using Minted package?};\n    B -- Yes --> C{Minted version 2.0 or newer?};\n    C -- Yes --> D[Use `breaklines` option];\n    C -- No / Unsure --> E[Update Minted package];\n    E --> D;\n    B -- No --> F[Consider `listings` package with `breaklines=true`];\n    D --> G[Customize line break symbols with `breaksymbolleft`, `breaksymbolright`];\n    G --> H[Compile with `pdflatex -shell-escape`];\n```\n\n## Ready-to-Use Code\n\nHere's a complete minimal working example demonstrating how to use `breaklines` with the `minted` package.\n\n```latex\n\\documentclass[10pt]{article}\n\\usepackage{fancyvrb} % Often loaded by minted, good practice to include\n\\usepackage{minted}\n\n\\begin{document}\n\n\\section*{Minted with Line Wrapping}\n\nThis example demonstrates how to use the `breaklines` option in the `minted` package\nto automatically wrap long lines of code or comments within the specified width.\n\n\\begin{minted}[\n    breaklines,       % Enable line wrapping\n    mathescape,       % Allows math mode inside code (e.g., $...$)\n    linenos,          % Show line numbers\n    numbersep=5pt,    % Space between line number and code\n    frame=single,     % Draw a single frame around the code block\n    xleftmargin=0pt,  % No extra left margin for the code block itself\n    breaksymbolleft=\\small\\ensuremath{\\hookleftarrow}, % Custom symbol at the start of a broken line\n    breaksymbolright=\\small\\ensuremath{\\hookrightarrow}, % Custom symbol at the end of a broken line\n    breakindent=2em   % Indent broken lines by 2em\n]{python}\nclass Run(BaseModel):\n    \"\"\"\n    Run: unique Tool and multiple Inputs. This is a very long docstring\n    that needs to wrap to fit within the page margins. It describes the\n    purpose of the class and its various attributes and methods in detail.\n    Status:\n     Running => jobs are pending or running and not all jobs have been completed\n     Paused => workers querying for 'Running' Runs won't get this Run until we change status again\n     Done => all jobs have completed and have a result_status = 'Done'\n     Incomplete => No results (inputs) have been associated with the Run\n    \"\"\"\n    name = models.CharField(max_length=150, unique=True)\n    tool = models.ForeignKey('Tool', on_delete=models.CASCADE)\n    tags = models.ManyToManyField(RunTag, related_name=\"model_set\")\n\n# A very long comment that will be wrapped by the breaklines option.\n# This demonstrates how comments and other non-code text also adhere to the wrapping.\n# It's crucial for readability when dealing with extensive explanations or URLs.\n\\end{minted}\n\n\\end{document}\n```\n\n**Compilation Note:** Remember that `minted` requires `pdflatex` to be run with the `-shell-escape` option to allow it to call Pygments externally.\nExample: `pdflatex -shell-escape your_document.tex`\n\n## Method 1: Using `breaklines` in Minted 2.0+\n\nThe `minted` package, starting from version 2.0, officially supports line wrapping through the `breaklines` option. This is the most straightforward and recommended approach.\n\n### How it Works\n\nWhen `breaklines` is enabled, `minted` instructs Pygments to break long lines of code or comments that exceed the available text width. This prevents content from overflowing the page margins, making your code blocks much more readable, especially for languages with verbose comments or long function signatures.\n\n### Implementation\n\nSimply add `breaklines` to the options list of your `\\begin{minted}` environment:\n\n```latex\n\\begin{minted}[breaklines, linenos, frame=single]{python}\n# Your code here, long lines will wrap\n\\end{minted}\n```\n\n### Customizing Break Symbols\n\n`minted` also provides options to customize the symbols displayed at the beginning and end of a broken line. This can enhance clarity, indicating where a line has been artificially broken.\n\n*   `breaksymbolleft`: Symbol displayed at the beginning of a wrapped line.\n*   `breaksymbolright`: Symbol displayed at the end of a line before it wraps.\n*   `breakindent`: Indentation for wrapped lines.\n\n```latex\n\\begin{minted}[\n    breaklines,\n    breaksymbolleft=\\small\\ensuremath{\\hookleftarrow}, % Unicode hook arrow for left\n    breaksymbolright=\\small\\ensuremath{\\hookrightarrow}, % Unicode hook arrow for right\n    breakindent=2em % Indent wrapped lines by 2em\n]{javascript}\n// This is a very long JavaScript comment that will be broken into multiple lines\n// by the minted package. The breaksymbolleft and breaksymbolright options\n// will add visual cues to indicate the line breaks.\nfunction calculateComplexResult(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10) {\n    // ... function body ...\n}\n\\end{minted}\n```\n![Minted Breaklines Example](/images/9c80aac7-1.webp)\n\n## Common Problems & Solutions\n\n### 1. `breaklines` option not working\n\n**Problem:** You've added `breaklines`, but your lines are still overflowing.\n**Solution:**\n*   **Check `minted` version:** The `breaklines` option was introduced in `minted` version 2.0. If you're using an older version, it won't work. Update your TeX distribution (e.g., TeX Live, MiKTeX) to get the latest `minted` package.\n*   **Compilation:** Ensure you are compiling with `pdflatex -shell-escape`. `minted` relies on Pygments, which is an external program, and `-shell-escape` allows LaTeX to run external commands.\n\n### 2. Custom break symbols not appearing or causing errors\n\n**Problem:** You've set `breaksymbolleft` or `breaksymbolright`, but they don't show up, or compilation fails.\n**Solution:**\n*   **Math mode:** Ensure your symbols are enclosed in math mode (`\\ensuremath{...}`) if they are mathematical symbols or require specific fonts.\n*   **Font support:** Make sure your document's font setup supports the symbols you are trying to use. For common symbols, `\\usepackage{amssymb}` might be needed.\n*   **Empty string:** If you want no symbol, set it to an empty string: `breaksymbolleft={}`.\n\n### 3. Indentation of wrapped lines is off\n\n**Problem:** Wrapped lines don't indent correctly or consistently.\n**Solution:** Use the `breakindent` option to control the indentation of wrapped lines. A positive value will indent them further.\n\n```latex\n\\begin{minted}[breaklines, breakindent=3em]{java}\n// This line will wrap, and the subsequent wrapped parts will be indented by 3em.\npublic class VeryLongClassNameThatNeedsWrappingAndHasManyMethods {\n    public static void main(String[] args) {\n        System.out.println(\"This is a very long string literal that will also wrap within the code block.\");\n    }\n}\n\\end{minted}\n```\n\n## Related: Other LaTeX Code Formatting Packages\n\nWhile `minted` is excellent for syntax highlighting due to its Pygments integration, it's worth knowing about other options, especially if `minted`'s features don't fully meet your needs or if you're dealing with older LaTeX setups.\n\n### `listings` Package\n\nThe `listings` package is a traditional choice for including code in LaTeX. It has its own `breaklines=true` option, which works similarly to `minted`'s. However, its syntax highlighting capabilities are generally less sophisticated than `minted`'s Pygments-powered highlighting.\n\n```latex\n\\usepackage{listings}\n\\lstset{\n    breaklines=true,\n    basicstyle=\\ttfamily,\n    keywordstyle=\\color{blue},\n    commentstyle=\\color{green!50!black},\n    stringstyle=\\color{red},\n    showstringspaces=false,\n    frame=single,\n    numbers=left,\n    numberstyle=\\tiny\\color{gray},\n    captionpos=b,\n    tabsize=4,\n    language=Python % Specify language for basic highlighting\n}\n\n\\begin{document}\n\\begin{lstlisting}\nclass Run(BaseModel):\n    \"\"\"\n    This is a very long docstring that needs to wrap to fit within the page margins.\n    It describes the purpose of the class and its various attributes and methods.\n    \"\"\"\n    name = models.CharField(max_length=150, unique=True)\n    tool = models.ForeignKey('Tool')\n    tags = models.ManyToManyField(RunTag, related_name=\"model_set\")\n\\end{lstlisting}\n\\end{document}\n```\n![Listings Breaklines Example](/images/9c80aac7-2.webp)\n\n### `texments` Package\n\n`texments` is another package designed to integrate Pygments with LaTeX. It offers similar functionality to `minted` but might have a different set of options or a slightly different workflow. If `minted` presents issues, `texments` could be an alternative to explore, though `minted` is generally more widely used and maintained.\n\n## Summary\n\nThe `minted` package provides robust support for line wrapping in code blocks through its `breaklines` option, available since version 2.0. This feature, combined with customization options like `breaksymbolleft`, `breaksymbolright`, and `breakindent`, allows for highly readable and well-formatted code within your LaTeX documents. Always remember to compile with `pdflatex -shell-escape` for `minted` to function correctly. For older LaTeX setups or different needs, the `listings` package remains a viable alternative for basic line wrapping.\n\n## Frequently Asked Questions\n\n### Q: Why do I need `-shell-escape` for `minted`?\nA: The `minted` package uses the external Python library Pygments for syntax highlighting. The `-shell-escape` option allows LaTeX to execute external programs (like Pygments) during compilation. Without it, `minted` cannot process the code for highlighting and will likely produce errors or empty code blocks.\n\n### Q: Can I wrap lines in `minted` without showing line numbers?\nA: Yes, the `breaklines` option is independent of `linenos`. You can enable line wrapping without displaying line numbers by simply omitting `linenos` from the `minted` environment options.\n\n### Q: How do I update my `minted` package?\nA: The `minted` package is part of your TeX distribution (TeX Live, MiKTeX). You can update it using your distribution's package manager:\n*   **TeX Live:** Run `tlmgr update --all` in your terminal.\n*   **MiKTeX:** Use the MiKTeX Console to check for and install updates.\n\n### Q: What if `breaklines` breaks a word in the middle?\nA: `minted` (via Pygments) typically tries to break lines at natural points like spaces or punctuation. However, for extremely long unbroken strings or identifiers, it might break mid-word. You can sometimes influence this with `breakanywhere` (though this might not always be desirable) or by manually adding spaces or hyphens in comments if possible. For code, it's generally best practice to keep identifiers and string literals to a reasonable length.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A LaTeX document snippet showing a `minted` code block with `breaklines` enabled. The code block should contain a Python class with a very long docstring and a long function signature. The image should clearly show the docstring and function signature wrapping to the next line, with small `hookleftarrow` and `hookrightarrow` symbols indicating the breaks, and the wrapped lines indented. The code should have line numbers and a single frame.\n\n**PLACEHOLDER-2:** A LaTeX document snippet showing a `listings` code block with `breaklines=true`. The code block should contain the same Python class and long docstring as PLACEHOLDER-1. The image should show the docstring wrapping, but with simpler or no break symbols, and basic syntax highlighting (e.g., keywords in blue, comments in green). It should also have line numbers and a single frame.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A LaTeX document snippet showing a `minted` code block with `breaklines` enabled. The code block should contain a Python class with a very long docstring and a long function signature. The image should clearly show the docstring and function signature wrapping to the next line, with small `hookleftarrow` and `hookrightarrow` symbols indicating the breaks, and the wrapped lines indented. The code should have line numbers and a single frame.",
        "PLACEHOLDER-2": "A LaTeX document snippet showing a `listings` code block with `breaklines=true`. The code block should contain the same Python class and long docstring as PLACEHOLDER-1. The image should show the docstring wrapping, but with simpler or no break symbols, and basic syntax highlighting (e.g., keywords in blue, comments in green). It should also have line numbers and a single frame."
      },
      "titles": {
        "PLACEHOLDER-1": "Minted Breaklines Example",
        "PLACEHOLDER-2": "Listings Breaklines Example"
      },
      "count": 2,
      "placeholder_list": [
        [
          "Minted Breaklines Example",
          "1"
        ],
        [
          "Listings Breaklines Example",
          "2"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "9c80aac7-1.webp",
        "title": "Minted Breaklines Example",
        "path": "staging/images/9c80aac7-1.png"
      },
      {
        "placeholder": "PLACEHOLDER-2",
        "filename": "9c80aac7-2.webp",
        "title": "Listings Breaklines Example",
        "path": "staging/images/9c80aac7-2.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/2051383.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:52:06.114732",
    "word_count": 1655,
    "code_blocks": 14
  }
}