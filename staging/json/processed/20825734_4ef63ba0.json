{
  "metadata": {
    "title": "Fix PostgreSQL Connection Refused: Hostname, Port, and TCP/IP Issues",
    "slug": "fix-postgresql-connection-refused",
    "uniqueId": "4ef63ba0",
    "category": "databases",
    "subcategory": "postgresql",
    "description": "Troubleshoot and resolve PostgreSQL 'Connection refused' errors by checking server status, listening addresses, ports, and firewall configurations.",
    "tags": [
      "postgresql",
      "connection-refused",
      "troubleshooting",
      "database",
      "networking"
    ],
    "difficulty": "intermediate",
    "readTime": 8,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "20825734",
    "votes": 136
  },
  "content": "# Fix PostgreSQL Connection Refused: Hostname, Port, and TCP/IP Issues\n\nWhen trying to connect to a PostgreSQL database, encountering a \"Connection refused\" error can be frustrating. This error message, often accompanied by \"Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections,\" indicates that the client application could not establish a connection with the PostgreSQL server. It's crucial to understand that this error typically points to a network or server availability issue, rather than a `pg_hba.conf` authentication problem.\n\n## Quick Answer\n\nThe \"Connection refused\" error in PostgreSQL usually means the client cannot reach the server. The most common causes are:\n\n1.  **PostgreSQL server is not running.**\n2.  **PostgreSQL is not listening on the expected IP address or port.**\n3.  **A firewall is blocking the connection.**\n\nTo quickly diagnose, verify the server status and listening configuration:\n\n```bash\n# Check if PostgreSQL service is running (Linux/systemd)\nsudo systemctl status postgresql\n\n# Check listening ports and addresses\nsudo netstat -ltnp | grep postgres\n# OR\nsudo lsof -n -i :5432 # Replace 5432 with your PostgreSQL port\n```\n\nIf the server isn't running, start it. If it's not listening on the correct address/port, adjust `listen_addresses` and `port` in `postgresql.conf`.\n\n## Common Problems & Solutions\n\nThe \"Connection refused\" error is a low-level networking issue. Here's a systematic approach to diagnose and resolve it:\n\n### 1. PostgreSQL Server Not Running\n\nThis is the most frequent cause. If the PostgreSQL server process (postmaster) isn't active, no connections can be accepted.\n\n**Diagnosis:**\n\nUse system commands to check the service status.\n\n```bash\n# For systems using systemd (e.g., Ubuntu, Debian, CentOS 7+)\nsudo systemctl status postgresql\n\n# For systems using SysVinit (e.g., older CentOS, Debian)\nsudo service postgresql status\n\n# To list all running processes and filter for postgres\nps aux | grep postgres\n```\n\n**Solution:**\n\nStart the PostgreSQL service.\n\n```bash\n# For systems using systemd\nsudo systemctl start postgresql\n\n# For systems using SysVinit\nsudo service postgresql start\n```\n\nIf the service fails to start, check the PostgreSQL server logs (usually in `/var/log/postgresql/` or a path specified in `postgresql.conf`) for more detailed error messages.\n\n### 2. Incorrect Hostname or Port\n\nThe client might be trying to connect to the wrong IP address or port.\n\n**Diagnosis:**\n\n*   **Client Configuration:** Double-check the hostname (e.g., `localhost`, `127.0.0.1`, or a specific IP) and port (default is `5432`) configured in your application or `psql` command.\n*   **Server Listening Configuration:** Verify what IP addresses and ports PostgreSQL is actually listening on.\n\n```bash\n# Check listening ports and addresses\nsudo netstat -ltnp | grep postgres\n# OR (more specific for port 5432)\nsudo lsof -n -i :5432\n```\n\nThe output should show `LISTEN` on the expected IP and port, e.g., `tcp 0 0 127.0.0.1:5432 0.0.0.0:* LISTEN`.\n\n**Solution:**\n\n*   **Adjust Client:** Ensure your client application's connection string or `psql` command uses the correct hostname and port.\n    ```bash\n    # Example psql command\n    psql -h localhost -p 5432 -U your_user -d your_database\n    ```\n*   **Adjust Server (`postgresql.conf`):** If the server isn't listening on the desired address/port, you need to modify `postgresql.conf`.\n    *   **`listen_addresses`**: Controls which IP interfaces PostgreSQL listens on.\n        *   `localhost` or `127.0.0.1`: Listens only on the local machine (IPv4).\n        *   `::1`: Listens only on the local machine (IPv6).\n        *   `*` or `0.0.0.0`: Listens on all available IPv4 interfaces.\n        *   `::`: Listens on all available IPv6 interfaces.\n        *   You can specify a comma-separated list, e.g., `listen_addresses = 'localhost,192.168.1.100'`.\n    *   **`port`**: The TCP port number PostgreSQL listens on (default is `5432`).\n\n    Locate your `postgresql.conf` file (often in `/etc/postgresql/<version>/main/` on Linux).\n    ```bash\n    # Example: Uncomment and set listen_addresses to listen on all interfaces\n    listen_addresses = '*'\n    # Example: Ensure the port is correct\n    port = 5432\n    ```\n    After modifying `postgresql.conf`, you **must restart** the PostgreSQL service for changes to take effect.\n\n    ```bash\n    sudo systemctl restart postgresql\n    ```\n\n### 3. Firewall Blocking Connection\n\nA firewall (e.g., `ufw`, `firewalld`, `iptables`) on the server or client machine might be blocking the connection to the PostgreSQL port.\n\n**Diagnosis:**\n\nTemporarily disable the firewall (if safe to do so in a test environment) and try connecting. If it works, the firewall is the culprit.\n\n```bash\n# For ufw (Ubuntu/Debian)\nsudo ufw status\nsudo ufw disable # DANGER: Only for testing, re-enable immediately\n```\n\n**Solution:**\n\nAdd a rule to allow incoming connections on the PostgreSQL port (default `5432`).\n\n```bash\n# For ufw (Ubuntu/Debian)\nsudo ufw allow 5432/tcp\n\n# For firewalld (CentOS/RHEL)\nsudo firewall-cmd --add-port=5432/tcp --permanent\nsudo firewall-cmd --reload\n\n# For iptables (general Linux, more complex)\n# Example: Allow incoming TCP on port 5432 from any source\n# sudo iptables -A INPUT -p tcp --dport 5432 -j ACCEPT\n# Remember to save iptables rules after modification\n```\n![PostgreSQL Connection Refused Troubleshooting Flowchart](/images/4ef63ba0-1.webp)\n\n### 4. IPv4 vs. IPv6 Mismatch\n\nSometimes, the client tries to connect via IPv6 (`::1`) while the server is only listening on IPv4 (`127.0.0.1`), or vice-versa.\n\n**Diagnosis:**\n\nCheck the `netstat` or `lsof` output to see if PostgreSQL is listening on `127.0.0.1` (IPv4) or `::1` (IPv6) or both.\n\n**Solution:**\n\n*   **Server (`postgresql.conf`):** Set `listen_addresses = '*'` to listen on all available IPv4 and IPv6 interfaces, or explicitly list both `127.0.0.1` and `::1`.\n*   **Client:** Explicitly specify the IP address family in your connection string if your client allows it (e.g., `host=127.0.0.1` instead of `host=localhost` if `localhost` resolves to IPv6 first).\n\n### 5. Docker-Specific Issues\n\nIf PostgreSQL is running inside a Docker container, the networking setup is different.\n\n**Diagnosis:**\n\n*   Is the Docker container running? `docker ps`\n*   Is the port correctly mapped from the container to the host? Check your `docker run` command or `docker-compose.yml`.\n\n**Solution:**\n\nEnsure your `docker-compose.yml` or `docker run` command correctly maps the PostgreSQL port (e.g., `5432:5432`).\n\n```yaml\n# Example docker-compose.yml snippet\nservices:\n  db:\n    image: postgres:latest\n    ports:\n      - \"5432:5432\" # Host_Port:Container_Port\n    environment:\n      POSTGRES_DB: mydb\n      POSTGRES_USER: myuser\n      POSTGRES_PASSWORD: mypassword\n```\n\nThen, start your Docker services:\n\n```bash\ndocker-compose up -d\n```\n\n### 6. `pg_hba.conf` Misconception\n\nThe original question mentioned `pg_hba.conf`. While important for authentication, `pg_hba.conf` issues result in \"authentication failed\" or \"no pg_hba.conf entry\" errors, not \"connection refused.\" The \"connection refused\" error occurs *before* `pg_hba.conf` is even consulted.\n\n## Step-by-Step Diagnosis\n\nHere's a systematic approach to troubleshoot the \"Connection refused\" error:\n\n1.  **Verify PostgreSQL Service Status:**\n    ```bash\n    sudo systemctl status postgresql # or sudo service postgresql status\n    ```\n    *   **If not running:** Start it (`sudo systemctl start postgresql`). If it fails, check logs for startup errors.\n    *   **If running:** Proceed to step 2.\n\n2.  **Check Listening Addresses and Ports:**\n    ```bash\n    sudo netstat -ltnp | grep 5432 # Replace 5432 with your actual port\n    # OR\n    sudo lsof -n -i :5432\n    ```\n    *   **No output or not listening on expected address/port:**\n        *   Edit `postgresql.conf`: Set `listen_addresses = '*'` and `port = 5432` (or your desired port).\n        *   Restart PostgreSQL: `sudo systemctl restart postgresql`.\n        *   Re-check `netstat`/`lsof`.\n    *   **Listening correctly:** Proceed to step 3.\n\n3.  **Check Firewall Rules:**\n    *   **On the server:**\n        ```bash\n        sudo ufw status # for ufw\n        sudo firewall-cmd --list-all # for firewalld\n        ```\n        *   **If port 5432 is blocked:** Add a rule to allow it (e.g., `sudo ufw allow 5432/tcp`).\n        *   **If firewall is off or port is open:** Proceed to step 4.\n    *   **On the client (if different machine):** Check if any client-side firewall is blocking outbound connections to the server's PostgreSQL port.\n\n4.  **Verify Client Connection String:**\n    *   Ensure the hostname (IP address) and port in your application's connection string or `psql` command exactly match what PostgreSQL is listening on.\n    *   If using `localhost`, try `127.0.0.1` explicitly to rule out IPv6 resolution issues.\n\nBy following these steps, you should be able to pinpoint and resolve the cause of the \"Connection refused\" error.\n\n## Related: Other PostgreSQL Operations\n\nOnce your connection issues are resolved, you might need to perform other common PostgreSQL operations:\n\n*   **Creating a new user:**\n    ```sql\n    CREATE USER myuser WITH PASSWORD 'mypassword';\n    ```\n*   **Creating a new database:**\n    ```sql\n    CREATE DATABASE mydatabase OWNER myuser;\n    ```\n*   **Granting privileges:**\n    ```sql\n    GRANT ALL PRIVILEGES ON DATABASE mydatabase TO myuser;\n    ```\n*   **Checking PostgreSQL logs:**\n    Logs are crucial for diagnosing startup failures or other server-side issues. The location varies by OS and installation method, but common paths include:\n    *   `/var/log/postgresql/`\n    *   `/usr/local/var/postgres/pg_log/`\n    *   The `log_directory` setting in `postgresql.conf`.\n\n## Summary\n\nThe \"Connection refused\" error in PostgreSQL is a clear indicator that your client cannot establish a network connection to the database server. It's rarely an authentication issue. The primary steps to resolve it involve ensuring the PostgreSQL server is running, that it's configured to listen on the correct network interface and port, and that no firewalls are blocking the connection. Systematically checking these points, starting with the server's running status, will quickly lead you to the solution.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A flowchart titled \"PostgreSQL Connection Refused Troubleshooting Flowchart\". Start with \"Client attempts connection\". Branch 1: \"Is PostgreSQL server running?\". If \"No\", go to \"Start PostgreSQL service, check logs\". If \"Yes\", branch 2: \"Is PostgreSQL listening on correct IP/Port?\". If \"No\", go to \"Edit postgresql.conf (listen_addresses, port), Restart PG\". If \"Yes\", branch 3: \"Is Firewall blocking port?\". If \"Yes\", go to \"Configure firewall to allow port 5432/tcp\". If \"No\", go to \"Verify client connection string (hostname, port)\". All paths should eventually lead to \"Connection Successful\" or \"Review logs for advanced issues\". Use distinct colors for questions, actions, and outcomes.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A flowchart titled \"PostgreSQL Connection Refused Troubleshooting Flowchart\". Start with \"Client attempts connection\". Branch 1: \"Is PostgreSQL server running?\". If \"No\", go to \"Start PostgreSQL service, check logs\". If \"Yes\", branch 2: \"Is PostgreSQL listening on correct IP/Port?\". If \"No\", go to \"Edit postgresql.conf (listen_addresses, port), Restart PG\". If \"Yes\", branch 3: \"Is Firewall blocking port?\". If \"Yes\", go to \"Configure firewall to allow port 5432/tcp\". If \"No\", go to \"Verify client connection string (hostname, port)\". All paths should eventually lead to \"Connection Successful\" or \"Review logs for advanced issues\". Use distinct colors for questions, actions, and outcomes."
      },
      "titles": {
        "PLACEHOLDER-1": "PostgreSQL Connection Refused Troubleshooting Flowchart"
      },
      "count": 1,
      "placeholder_list": [
        [
          "PostgreSQL Connection Refused Troubleshooting Flowchart",
          "1"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "4ef63ba0-1.webp",
        "title": "PostgreSQL Connection Refused Troubleshooting Flowchart",
        "path": "staging/images/4ef63ba0-1.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/20825734.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T22:43:03.728408",
    "word_count": 1545,
    "code_blocks": 34
  }
}