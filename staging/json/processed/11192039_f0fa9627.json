{
  "metadata": {
    "title": "How to Use For Loops in Windows Command Line (CMD)",
    "slug": "how-to-use-for-loops-windows-command-line",
    "uniqueId": "f0fa9627",
    "category": "system-devops",
    "subcategory": "shell",
    "description": "Learn to automate repetitive tasks in Windows Command Prompt using FOR loops, iterating through files or numerical ranges.",
    "tags": [
      "windows",
      "cmd",
      "batch-script",
      "for-loop",
      "automation",
      "loops"
    ],
    "difficulty": "beginner",
    "readTime": 5,
    "lastUpdated": "2024-09-21T12:30:00.000Z",
    "sourceStackOverflowId": "11192039",
    "votes": 53
  },
  "content": "# How to Use For Loops in Windows Command Line (CMD)\n\n## Quick Answer\n\nTo iterate through files in the current directory using a `FOR` loop in Windows Command Prompt, use the following syntax:\n\n```bash\nFOR %i IN (*.ext) DO my-function %i\n```\n\nReplace `*.ext` with your desired file pattern (e.g., `*.txt`, `image_*.jpg`) and `my-function` with the command or script you want to execute for each file. If used within a batch file (`.bat`), use `%%i` instead of `%i`.\n\n## Choose Your Method\n\nDeciding which `FOR` loop syntax to use in Windows Command Line depends on your specific needs: iterating over files, numbers, or command output, and whether you're running it directly in the console or within a batch script.\n\n```mermaid\ngraph TD\n    A[Start] --> B{Need to iterate over files/folders?};\n    B -- Yes --> C{Running directly in CMD?};\n    C -- Yes --> D[Use FOR %i IN (filespec) DO command %i];\n    C -- No (Batch file) --> E[Use FOR %%i IN (filespec) DO command %%i];\n    B -- No --> F{Need to iterate over a sequence of numbers?};\n    F -- Yes --> G[Use FOR /L %i IN (start,step,end) DO command %i];\n    F -- No --> H{Need to iterate over command output?};\n    H -- Yes --> I[Use FOR /F %i IN ('command') DO command %i];\n    I -- No --> J[Consider other scripting languages or advanced FOR options];\n```\n\n## Table of Contents\n1. Quick Answer\n2. Choose Your Method\n3. Ready-to-Use Code\n4. Method 1: Iterating Through Files (Basic `FOR` Loop)\n5. Method 2: Iterating Through Files in a Batch Script\n6. Method 3: Iterating Through a Numerical Range (`FOR /L`)\n7. Method 4: Iterating Through Command Output (`FOR /F`)\n8. Common Problems & Solutions\n9. Real-World Use Cases\n10. Summary\n\n## Ready-to-Use Code\n\nHere are some common `FOR` loop patterns for quick use:\n\n**1. Loop through all `.txt` files in the current directory (CMD prompt):**\n```bash\nFOR %f IN (*.txt) DO ECHO Processing file: %f\n```\n\n**2. Loop through all `.txt` files in a specific directory (Batch file):**\n```batch\n@echo off\nFOR %%f IN (\"C:\\MyData\\*.txt\") DO ECHO Processing file: %%f\n```\n\n**3. Loop from 1 to 100 (CMD prompt):**\n```bash\nFOR /L %i IN (1,1,100) DO ECHO Current number: %i\n```\n\n**4. Loop through lines of a text file (Batch file):**\n```batch\n@echo off\nFOR /F \"delims=\" %%L IN (myfile.txt) DO ECHO Line content: %%L\n```\n\n## Method 1: Iterating Through Files (Basic `FOR` Loop)\n\nThe most common use case for `FOR` loops in Windows Command Line is to process a set of files. This method is ideal when you need to run a command on each file matching a certain pattern.\n\n### Syntax\n\nThe basic syntax for iterating through files directly in the command prompt is:\n\n```bash\nFOR %variable IN (set) DO command %variable\n```\n\n-   `%variable`: A single letter (e.g., `%i`, `%f`) that will hold the current item from the `set`.\n-   `set`: The list of items to iterate over. This can be a wildcard file specification (e.g., `*.txt`, `image_*.jpg`), a list of specific files (e.g., `file1.txt file2.doc`), or even directory paths.\n-   `command`: The command to execute for each item in the `set`.\n\n### Example: Processing Files\n\nLet's say you have several `.log` files in your current directory, and you want to display the content of each one.\n\n```bash\nFOR %i IN (*.log) DO TYPE %i\n```\n\nThis command will:\n1.  Find all files ending with `.log` in the current directory.\n2.  For each file found, it will assign its name to the variable `%i`.\n3.  It will then execute the `TYPE` command, passing the file name (`%i`) as an argument.\n\n### Example: Using a Function/External Program\n\nIf you have an external program or a batch script (`my-function.bat`) that processes a single file, you can integrate it:\n\n```bash\nFOR %i IN (*.ext) DO my-function.bat %i\n```\n\nThis will execute `my-function.bat` for every file matching `*.ext`, passing the filename as an argument to `my-function.bat`.\n\n## Method 2: Iterating Through Files in a Batch Script\n\nWhen you move `FOR` loops into a batch file (`.bat` or `.cmd`), there's a crucial syntax change: you must double the percent signs for the loop variable.\n\n### Syntax for Batch Files\n\n```batch\nFOR %%variable IN (set) DO command %%variable\n```\n\n-   `%%variable`: Notice the double percent signs. This is required when using `FOR` loops inside a batch script.\n\n### Example: Renaming Files in a Batch Script\n\nSuppose you want to rename all `.txt` files to `.bak` in a batch script.\n\n```batch\n@echo off\nECHO Renaming .txt files to .bak...\nFOR %%f IN (*.txt) DO (\n    ECHO Renaming \"%%f\" to \"%%~nf.bak\"\n    REN \"%%f\" \"%%~nf.bak\"\n)\nECHO Done.\n```\n\nIn this example:\n-   `%%f` is the loop variable.\n-   `%%~nf` extracts just the name of the file (without extension) from `%%f`. This is one of many variable modifiers available with `FOR` loops.\n-   The `()` block allows you to execute multiple commands for each iteration.\n\n![Batch File For Loop](/images/f0fa9627-1.webp)\n\n## Method 3: Iterating Through a Numerical Range (`FOR /L`)\n\nThe `FOR /L` command allows you to generate and iterate through a sequence of numbers. This is useful for tasks that require a fixed number of iterations or processing items by index.\n\n### Syntax\n\n```bash\nFOR /L %variable IN (start,step,end) DO command %variable\n```\n\n-   `start`: The starting number of the sequence.\n-   `step`: The increment value for each iteration.\n-   `end`: The ending number of the sequence. The loop continues as long as the current number is less than or equal to `end`.\n\n### Example: Counting from 1 to 10\n\nTo simply count from 1 to 10:\n\n```bash\nFOR /L %i IN (1,1,10) DO ECHO %i\n```\n\nOutput:\n```output\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\n### Example: Processing 17 Files by Index (as per original question)\n\nIf your files are named sequentially (e.g., `file1.dat`, `file2.dat`, ..., `file17.dat`), you could use `FOR /L` to process them:\n\n```bash\nFOR /L %i IN (1,1,17) DO my-software.exe \"file%i.dat\" \"output%i.result\"\n```\n\nThis command would execute `my-software.exe` 17 times, passing `file1.dat` and `output1.result` in the first iteration, `file2.dat` and `output2.result` in the second, and so on.\n\n## Method 4: Iterating Through Command Output (`FOR /F`)\n\nThe `FOR /F` command is powerful for parsing text files, strings, or the output of other commands. It allows you to process each line or token from the input.\n\n### Syntax\n\n```bash\nFOR /F [\"options\"] %variable IN ('command' OR \"string\" OR file) DO command %variable\n```\n\n-   `\"options\"`: Optional parameters like `delims` (delimiters), `tokens` (which tokens to parse), `skip` (lines to skip), etc.\n-   `'command'`: Executes a command and processes its output line by line.\n-   `\"string\"`: Processes a literal string.\n-   `file`: Processes the content of a file line by line.\n\n### Example: Listing Running Processes\n\nTo list all running processes and display their names:\n\n```bash\nFOR /F \"tokens=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127\" %i IN ('tasklist /fo list') DO @IF DEFINED %i ECHO %i\n```\nThis command uses `tasklist /fo list` to get process information and then iterates through each line, echoing it. The `tokens` option is used to ensure that the entire line is captured, as `FOR /F` by default splits lines into tokens based on spaces.\n\n### Example: Reading a Text File Line by Line\n\nTo read a file named `config.txt` line by line:\n\n```bash\nFOR /F \"delims=\" %L IN (config.txt) DO ECHO %L\n```\n\n-   `delims=` tells `FOR /F` not to use any delimiters, so the entire line is treated as a single token.\n-   `%L` will contain the full content of each line.\n\n## Common Problems & Solutions\n\n### 1. `%i` vs `%%i` Error\n\n**Problem:** Using `%i` in a batch file or `%%i` directly in the command prompt.\n**Solution:**\n-   **In CMD prompt:** Use single percent sign: `FOR %i IN (...) DO ... %i`\n-   **In Batch file (`.bat` or `.cmd`):** Use double percent signs: `FOR %%i IN (...) DO ... %%i`\n\n### 2. Spaces in File Paths\n\n**Problem:** `FOR` loops can struggle with file paths containing spaces if not properly quoted.\n**Solution:** Always enclose file paths and variables that might contain spaces in double quotes.\n\n```bash\nREM Correct (CMD prompt)\nFOR %f IN (\"C:\\My Files\\*.txt\") DO ECHO \"%f\"\n\nREM Correct (Batch file)\nFOR %%f IN (\"C:\\My Files\\*.txt\") DO ECHO \"%%f\"\n```\n\n### 3. Accessing File Properties (Name, Extension, Path)\n\n**Problem:** You need just the filename without the path, or just the extension.\n**Solution:** Use `FOR` variable modifiers.\n\n-   `%~nf`: Expands `%f` to a file name only.\n-   `%~xf`: Expands `%f` to a file extension only.\n-   `%~pf`: Expands `%f` to a path only.\n-   `%~dpf`: Expands `%f` to drive letter and path only.\n-   `%~nxf`: Expands `%f` to file name and extension only.\n\nExample (Batch file):\n```batch\n@echo off\nFOR %%f IN (\"C:\\MyFolder\\My Document.docx\") DO (\n    ECHO Full path: %%f\n    ECHO Filename only: %%~nf\n    ECHO Extension only: %%~xf\n    ECHO Drive and path: %%~dpf\n    ECHO Filename and extension: %%~nxf\n)\n```\n\nOutput:\n```output\nFull path: C:\\MyFolder\\My Document.docx\nFilename only: My Document\nExtension only: .docx\nDrive and path: C:\\MyFolder\\\nFilename and extension: My Document.docx\n```\n\n### 4. Infinite Loops with `GOTO`\n\n**Problem:** Using `GOTO` for looping can lead to infinite loops if the exit condition is not met or is flawed.\n**Solution:** While `GOTO` can create loops, `FOR` is generally safer and more structured for iteration. If using `GOTO`, ensure a clear and reachable exit condition.\n\nExample of a `GOTO` loop (less recommended for file processing):\n```batch\n@echo off\nSET /A counter=0\n:loop_start\n    SET /A counter+=1\n    IF %counter% GTR 10 GOTO loop_end\n    ECHO Current count: %counter%\nGOTO loop_start\n:loop_end\nECHO Loop finished.\n```\n\n## Real-World Use Cases\n\n`FOR` loops are incredibly versatile for automating various tasks in Windows.\n\n1.  **Bulk File Processing:**\n    -   Converting image formats: `FOR %%f IN (*.jpg) DO convert.exe \"%%f\" \"%%~nf.png\"`\n    -   Compressing files: `FOR %%f IN (*.log) DO 7z a \"%%~nf.zip\" \"%%f\"`\n    -   Applying a custom script to multiple data files.\n\n2.  **Log File Analysis:**\n    -   Searching for specific errors across multiple log files: `FOR %%f IN (*.log) DO FINDSTR \"ERROR\" \"%%f\"`\n    -   Archiving old logs: `FORFILES /P \"C:\\Logs\" /M \"*.log\" /D -30 /C \"cmd /c MOVE @file C:\\OldLogs\"` (Note: `FORFILES` is another powerful command for date-based iteration).\n\n3.  **Directory Management:**\n    -   Creating a series of numbered folders: `FOR /L %%i IN (1,1,10) DO MD \"Project_%%i\"`\n    -   Deleting empty directories.\n\n4.  **System Information Gathering:**\n    -   Listing all services and their status: `FOR /F \"tokens=1,2*\" %%a IN ('sc query state= all ^| findstr \"SERVICE_NAME STATE\"') DO ECHO Service: %%b, State: %%c`\n\n## Summary\n\nWindows Command Line `FOR` loops are a powerful tool for automating repetitive tasks, especially when dealing with files, numerical sequences, or command output. Understanding the different `FOR` loop variants (`FOR`, `FOR /L`, `FOR /F`) and the crucial distinction between `%variable` (CMD) and `%%variable` (batch files) is key to effective scripting. By leveraging these constructs, you can significantly streamline your workflow and avoid manual, tedious operations.\n\n---\n\n## Image Generation Prompts\n\n**PLACEHOLDER-1:** A diagram illustrating the flow of a batch script using a `FOR` loop. The diagram should show a `FOR` loop icon, an arrow pointing to a `( )` block representing multiple commands, and then an arrow pointing to a `REN` command. Text labels should indicate \"Batch File Start\", \"FOR %%f IN (*.txt)\", \"Execute Commands for Each File\", \"REN '%%f' '%%~nf.bak'\", and \"Batch File End\". Use a clean, modern flowchart style.",
  "originalFormat": {
    "image_prompts": {
      "prompts": {
        "PLACEHOLDER-1": "A diagram illustrating the flow of a batch script using a `FOR` loop. The diagram should show a `FOR` loop icon, an arrow pointing to a `( )` block representing multiple commands, and then an arrow pointing to a `REN` command. Text labels should indicate \"Batch File Start\", \"FOR %%f IN (*.txt)\", \"Execute Commands for Each File\", \"REN '%%f' '%%~nf.bak'\", and \"Batch File End\". Use a clean, modern flowchart style."
      },
      "titles": {
        "PLACEHOLDER-1": "Batch File For Loop"
      },
      "count": 1,
      "placeholder_list": [
        [
          "Batch File For Loop",
          "1"
        ]
      ]
    },
    "generated_images": [
      {
        "placeholder": "PLACEHOLDER-1",
        "filename": "f0fa9627-1.webp",
        "title": "Batch File For Loop",
        "path": "staging/images/f0fa9627-1.png"
      }
    ],
    "source_file": "/Users/thaddeus/Documents/on-going projects/deepv-stackoverflow-workflow-complete/data/crawled_data/11192039.json",
    "workflow_version": "deepv_stackoverflow_v2.0_schema_compliant",
    "generated_at": "2025-09-22T23:23:13.498395",
    "word_count": 1884,
    "code_blocks": 44
  }
}